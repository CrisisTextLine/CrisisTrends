{"version":3,"sources":["main.min.js","wst.js","d3.cloud.js","toggle.js","carousel.js","faq.js","image-carousel.js","message-count.js","visualizations.js","word-cloud.js","main.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","e","console","error","_typeof","Symbol","iterator","obj","constructor","prototype","cloud","place","board","tag","bounds","dxdy","dx","dy","startX","x","y","size","startY","maxDelta","Math","sqrt","s","spiral","dt","random","t","min","x0","y0","x1","y1","cloudCollide","collideRects","last","sprite","w","width","sw","lx","sx","msx","h","j","i","text","cloudText","font","cloudFont","fontSize","cloudFontSize","fontStyle","cloudFontNormal","fontWeight","rotate","cloudRotate","padding","cloudPadding","archimedeanSpiral","words","timeInterval","Infinity","event","d3","dispatch","timer","start","step","d","Date","n","data","cloudSprite","hasText","tags","push","word","cloudBounds","stop","end","zeroArray","length","map","call","this","style","weight","sort","a","b","clearInterval","setInterval","arguments","functor","spirals","rebind","value","di","c","clearRect","cw","ratio","ch","maxh","save","measureText","sr","sin","cloudRadians","cr","cos","wcr","wsr","hcr","hsr","max","abs","translate","fillText","lineWidth","strokeText","restore","height","xoff","yoff","pixels","getImageData","w32","seen","seenRow","k","m","slice","b0","b1","rectangularSpiral","sign","canvas","PI","document","createElement","getContext","Canvas","archimedean","rectangular","fillStyle","strokeStyle","textAlign","module","exports","layout","toggle","NodeList","forEach","display","hide","show","_typeof2","f","define","amd","g","global","self","Carousel","r","o","u","require","code","l","1","process","__filename","amdefine","requireFn","trimDots","ary","part","splice","normalize","name","baseName","baseParts","charAt","split","concat","join","makeNormalize","relName","makeLoad","id","load","loaderCache","fromText","runFactory","deps","factory","result","uri","makeRequire","alreadyCalled","depName","apply","undefined","Array","isArray","defineCache","stringRequire","path","systemRequire","relId","amdRequire","callback","nextTick","toUrl","filePath","indexOf","dirname","filename","prefix","plugin","index","originalId","hasOwnProperty","substring","_process","2","throwFirstError","pendingErrors","shift","asap","task","rawTask","freeTasks","pop","RawTask","rawAsap","requestErrorThrow","makeRequestCallFromTimer","onerror","./raw","3","queue","requestFlush","flushing","flush","currentIndex","capacity","scan","newLength","makeRequestCallFromMutationObserver","observer","BrowserMutationObserver","node","createTextNode","observe","characterData","handleTimer","clearTimeout","timeoutHandle","intervalHandle","setTimeout","scope","MutationObserver","WebKitMutationObserver","4","ES6Promise","objectOrFunction","isFunction","setScheduler","scheduleFn","customSchedulerFn","setAsap","asapFn","useNextTick","useVertxTimer","vertxNext","useSetTimeout","useMutationObserver","iterations","useMessageChannel","channel","MessageChannel","port1","onmessage","port2","postMessage","globalSetTimeout","len","arg","attemptVertx","vertx","runOnLoop","runOnContext","onFulfillment","onRejection","_arguments","parent","child","noop","PROMISE_ID","makePromise","_state","invokeCallback","_result","subscribe","resolve","object","Constructor","promise","_resolve","selfFulfillment","TypeError","cannotReturnOwn","getThen","GET_THEN_ERROR","tryThen","fulfillmentHandler","rejectionHandler","handleForeignThenable","thenable","sealed","fulfill","reason","_reject","_label","handleOwnThenable","FULFILLED","REJECTED","handleMaybeThenable","maybeThenable","then$$","publishRejection","_onerror","publish","PENDING","_subscribers","subscribers","settled","detail","ErrorObject","tryCatch","TRY_CATCH_ERROR","hasCallback","succeeded","failed","initializePromise","resolver","nextId","Enumerator","input","_instanceConstructor","_input","_remaining","_enumerate","validationError","all","entries","race","reject","_","needsResolver","needsNew","Promise","polyfill","local","Function","P","promiseToString","Object","toString","cast","_isArray","scheduleFlush","browserWindow","browserGlobal","isNode","isWorker","Uint8ClampedArray","importScripts","_eachEntry","entry","resolve$$","_then","_settledAt","_willSettleAt","enumerator","_setScheduler","_setAsap","_asap","catch","5","_interopRequireDefault","__esModule","default","create","hb","_create","compile","options","_handlebarsCompilerCompiler","precompile","AST","_handlebarsCompilerAst2","Compiler","JavaScriptCompiler","_handlebarsCompilerJavascriptCompiler2","Parser","_handlebarsCompilerBase","parser","parse","_handlebarsRuntime","_handlebarsRuntime2","_handlebarsCompilerAst","_handlebarsCompilerJavascriptCompiler","_handlebarsCompilerVisitor","_handlebarsCompilerVisitor2","_handlebarsNoConflict","_handlebarsNoConflict2","inst","Visitor","./handlebars.runtime","./handlebars/compiler/ast","./handlebars/compiler/base","./handlebars/compiler/compiler","./handlebars/compiler/javascript-compiler","./handlebars/compiler/visitor","./handlebars/no-conflict","6","_interopRequireWildcard","newObj","key","base","HandlebarsEnvironment","Utils","extend","SafeString","_handlebarsSafeString2","Exception","_handlebarsException2","escapeExpression","VM","runtime","template","spec","_handlebarsBase","_handlebarsSafeString","_handlebarsException","_handlebarsUtils","./handlebars/base","./handlebars/exception","./handlebars/runtime","./handlebars/safe-string","./handlebars/utils","7","helpers","partials","decorators","_helpers","registerDefaultHelpers","_decorators","registerDefaultDecorators","_utils","_exception","_exception2","_logger","_logger2","VERSION","COMPILER_REVISION","REVISION_CHANGES","objectType","logger","log","registerHelper","fn","unregisterHelper","registerPartial","partial","unregisterPartial","registerDecorator","unregisterDecorator","createFrame","./decorators","./exception","./helpers","./logger","./utils","8","helperExpression","type","params","hash","scopedId","test","original","simpleId","parts","depth","9","_parser2","yy","locInfo","SourceLocation","srcName","strip","_whitespaceControl2","accept","_parser","_whitespaceControl","Helpers","../utils","./parser","./whitespace-control","10","castChunk","chunk","codeGen","loc","ret","wrap","CodeGen","srcFile","source","SourceNode","SourceMap","err","line","column","chunks","src","add","prepend","toStringWithSourceMap","isEmpty","unshift","merge","empty","each","iter","currentLocation","functionCall","generateList","quotedString","str","replace","objectLiteral","pairs","generateArray","source-map","11","env","compat","useDepths","ast","environment","compileInput","templateSpec","context","execOptions","compiled","_setup","setupOptions","_child","blockParams","depths","argEquals","transformLiteralToPath","sexpr","literal","_ast","_ast2","compiler","equals","other","opcodes","opcode","otherOpcode","args","children","guid","program","sourceNode","stringParams","trackIds","knownHelpers","helperMissing","blockHelperMissing","if","unless","with","lookup","_name","compileProgram","childCompiler","usePartial","Program","body","bodyLength","isSimple","BlockStatement","block","inverse","classifySexpr","helperSexpr","simpleSexpr","ambiguousSexpr","DecoratorBlock","decorator","setupFullMustacheParams","useDecorators","PartialStatement","explicitPartialContext","partialName","isDynamic","indent","preventIndent","PartialBlockStatement","partialBlock","MustacheStatement","mustache","SubExpression","escaped","noEscape","Decorator","ContentStatement","content","CommentStatement","isBlock","strict","knownHelpersOnly","falsy","PathExpression","addDepth","scoped","blockParamId","blockParamIndex","StringLiteral","string","NumberLiteral","number","BooleanLiteral","bool","UndefinedLiteral","NullLiteral","Hash","pushParam","isBlockParam","isHelper","isEligible","_name2","pushParams","val","blockParamChild","omitEmpty","param","../exception","./ast","12","validateClose","open","close","errorNode","first_line","first_column","last_line","last_column","token","substr","stripFlags","stripComment","comment","preparePath","dig","depthString","isLiteral","separator","prepareMustache","escapeFlag","prepareRawBlock","openRawBlock","contents","openStrip","inverseStrip","closeStrip","prepareBlock","openBlock","inverseAndProgram","inverted","chain","prepareProgram","statements","firstLoc","lastLoc","preparePartialBlock","13","Literal","strictLookup","requireTerminal","stack","popStack","nameLookup","aliasable","_base","_codeGen","_codeGen2","isValidJavaScriptVariableName","JSON","stringify","depthedLookup","compilerInfo","revision","versions","appendToBuffer","explicit","initializeBuffer","asObject","isChild","programs","environments","preamble","stackSlot","stackVars","aliases","registers","list","hashes","compileStack","inlineStack","compileChildren","useBlockParams","pushSource","createFunctionContext","main","main_d","_context","useData","compilerOptions","file","destName","lastContext","varDeclarations","locals","aliasCount","alias","referenceCount","mergeSource","appendOnly","forceBuffer","appendFirst","sourceSeen","bufferStart","bufferEnd","blockValue","contextName","setupHelperArgs","blockName","ambiguousBlockValue","flushInline","current","topStack","lastHelper","appendContent","pendingContent","pendingLocation","append","isInline","replaceStack","appendEscaped","pushContext","pushStackLiteral","lookupOnContext","resolvePath","lookupBlockParam","lookupData","_this","assumeObjects","resolvePossibleLambda","pushStringParam","pushString","emptyHash","pushHash","values","types","contexts","ids","popHash","pushLiteral","pushProgram","programExpression","paramSize","foundDecorator","invokeHelper","nonHelper","helper","setupHelper","simple","callParams","invokeKnownHelper","invokeAmbiguous","helperCall","useRegister","helperName","paramsInit","invokePartial","setupParams","assignToHash","pushId","existing","matchExistingProgram","programParams","expr","item","createdStack","usedLiteral","top","incrStack","topStackName","wrapped","inline","blockHelper","foundHelper","callContext","objectArgs","hashIds","hashTypes","hashContexts","reservedWords","compilerWords","RESERVED_WORDS","../base","./code-gen","14","handlebars","trace","symbols_","root","EOF","program_repetition0","statement","rawBlock","COMMENT","CONTENT","rawBlock_repetition_plus0","END_RAW_BLOCK","OPEN_RAW_BLOCK","openRawBlock_repetition0","openRawBlock_option0","CLOSE_RAW_BLOCK","block_option0","closeBlock","openInverse","block_option1","OPEN_BLOCK","openBlock_repetition0","openBlock_option0","openBlock_option1","CLOSE","OPEN_INVERSE","openInverse_repetition0","openInverse_option0","openInverse_option1","openInverseChain","OPEN_INVERSE_CHAIN","openInverseChain_repetition0","openInverseChain_option0","openInverseChain_option1","INVERSE","inverseChain","inverseChain_option0","OPEN_ENDBLOCK","OPEN","mustache_repetition0","mustache_option0","OPEN_UNESCAPED","mustache_repetition1","mustache_option1","CLOSE_UNESCAPED","OPEN_PARTIAL","partial_repetition0","partial_option0","openPartialBlock","OPEN_PARTIAL_BLOCK","openPartialBlock_repetition0","openPartialBlock_option0","OPEN_SEXPR","sexpr_repetition0","sexpr_option0","CLOSE_SEXPR","hash_repetition_plus0","hashSegment","ID","EQUALS","OPEN_BLOCK_PARAMS","blockParams_repetition_plus0","CLOSE_BLOCK_PARAMS","dataName","STRING","NUMBER","BOOLEAN","UNDEFINED","NULL","DATA","pathSegments","SEP","$accept","$end","terminals_","15","18","19","23","29","33","34","39","44","47","48","51","54","55","60","65","68","72","73","75","77","80","81","82","83","84","85","87","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","chained","Number","table","16","24","27","59","20","78","79","86","17","56","64","49","52","25","38","43","45","28","57","26","30","35","21","61","50","63","69","70","71","53","58","66","31","36","22","62","46","40","67","32","74","37","41","76","42","defaultActions","91","102","105","111","112","117","120","123","124","136","137","parseError","lex","lexer","vstack","lstack","recovering","setInput","yylloc","yyloc","ranges","symbol","preErrorSymbol","action","p","newState","expected","yyval","errStr","showPosition","range","_more","_less","done","matched","conditionStack","offset","lines","unput","oldLines","more","less","pastInput","past","upcomingInput","next","pre","tempMatch","rules","_currentRules","flex","matches","begin","condition","popState","conditions","topState","pushState","yy_","$avoiding_name_collisions","YY_START","mu","inclusive","emu","com","raw","INITIAL","print","PrintVisitor","_visitor","_visitor2","pad","out","paramStrings","joinedPairs","HashPair","pair","./visitor","parents","visitSubExpression","acceptRequired","acceptArray","acceptKey","visitBlock","visitPartial","mutating","array","WhitespaceControl","isPrevWhitespace","isRoot","prev","sibling","isNextWhitespace","omitRight","multiple","rightStripped","omitLeft","leftStripped","doStandalone","ignoreStandalone","isRootSeen","_isPrevWhitespace","_isNextWhitespace","openStandalone","closeStandalone","inlineStandalone","exec","firstInverse","lastInverse","instance","_decoratorsInline2","_decoratorsInline","./decorators/inline","props","container","message","tmp","idx","errorProps","captureStackTrace","lineNumber","defineProperty","nop","_helpersBlockHelperMissing2","_helpersEach2","_helpersHelperMissing2","_helpersIf2","_helpersLog2","_helpersLookup2","_helpersWith2","_helpersBlockHelperMissing","_helpersEach","_helpersHelperMissing","_helpersIf","_helpersLog","_helpersLookup","_helpersWith","./helpers/block-helper-missing","./helpers/each","./helpers/helper-missing","./helpers/if","./helpers/log","./helpers/lookup","./helpers/with","contextPath","appendContextPath","execIteration","field","first","priorKey","conditional","includeZero","level","methodMap","lookupLevel","levelMap","toLowerCase","parseInt","method","_len","_key","Handlebars","$Handlebars","noConflict","checkRevision","compilerRevision","currentRevision","runtimeVersions","compilerVersions","invokePartialWrapper","resolvePartial","initData","executeDecorators","lambda","declaredBlockParams","programWrapper","wrapProgram","_parent","common","isTop","prog","currentDepths","./base","toHTML","escapeChar","chr","escape","possible","badChars","frame","&","<",">","\"","'","`","=","extension","fs","templateString","readFileSync","printer","extensions","../dist/cjs/handlebars","../dist/cjs/handlebars/compiler/printer","./dist/cjs/handlebars.runtime","_classCallCheck","_createClass","defineProperties","target","descriptor","enumerable","configurable","writable","protoProps","staticProps","ensurePathArray","paths","ResourceManager","_head","getElementsByTagName","_cssPaths","_scriptMaps","_dataPromises","script","loadPromises","createScriptElement","setAttribute","addEventListener","appendChild","bind","querySelectorAll","removeChild","url","reqOptions","cacheId","cache","fetch","el","hbsData","isHandlebarFile","frags","ext","resp","innerHTML","unloadCss","getOwnPropertyNames","unloadScript","es6-promise","whatwg-fetch","_resourceManagerJs","_resourceManagerJs2","getCssPropUnitMap","v","trim","num","unit","convertCssTimeValueToMilliseconds","getJsPropName","cssProp","letter","toUpperCase","traverseEachParent","startEl","parentNode","predicate","className","Module","defaultOptions","loadedClass","activeClass","disabledClass","errorClass","styles","requestOptions","onLoad","onShow","onHide","onEnable","onDisable","onError","_handleElementInitialState","subModules","active","loaded","_elChildren","loadStatus","view","getStyles","fetchData","getTemplate","nodes","frag","createDocumentFragment","classList","cssUrl","loadCss","_isHTMLTemplate","tpl","importNode","childNodes","HTMLElement","_ret","tempDiv","loadTemplate","html","HTMLTemplateElement","errored","waitForTransition","remove","disabled","contains","_origDisabled","disable","_origError","_this2","duration","getTransitionDuration","delayProp","getCssComputedProperty","durationProp","times","delay","highest","prop","getComputedStyle","getPropertyValue","startTarget","_this3","destroy","_resetElementInitialState","handlebars/runtime","resource-manager-js","./lib","ex","LAST_ERROR","IS_ERROR","tryCallOne","tryCallTwo","_45","_81","_65","_54","doResolve","safeThen","onFulfilled","onRejected","res","handle","Handler","deferred","_10","handleResolved","cb","newValue","finale","_97","_61","asap/raw","./core.js","valuePromise","TRUE","FALSE","ZERO","EMPTYSTRING","arr","remaining","./done.js","./es6-extensions.js","./finally.js","./node-extensions.js","./synchronous.js","denodeifyWithCount","argumentCount","callbackFn","denodeifyWithoutCount","fnLength","denodeify","nodeify","ctx","enableSynchronous","isPending","getState","isFulfilled","isRejected","getValue","getReason","disableSynchronous","SourceMapGenerator","SourceMapConsumer","./source-map/source-map-consumer","./source-map/source-map-generator","./source-map/source-node","ArraySet","_array","_set","util","fromArray","aArray","aAllowDuplicates","set","aStr","isDuplicate","has","toSetString","at","aIdx","toArray","./util","toVLQSigned","aValue","fromVLQSigned","isNegative","shifted","base64","VLQ_BASE_SHIFT","VLQ_BASE","VLQ_BASE_MASK","VLQ_CONTINUATION_BIT","encode","digit","encoded","vlq","decode","aIndex","aOutParam","continuation","strLen","charCodeAt","rest","./base64","intToCharMap","aNumber","charCode","bigA","bigZ","littleA","littleZ","zero","nine","plus","slash","littleOffset","numberOffset","recursiveSearch","aLow","aHigh","aNeedle","aHaystack","aCompare","aBias","mid","floor","cmp","LEAST_UPPER_BOUND","GREATEST_LOWER_BOUND","search","generatedPositionAfter","mappingA","mappingB","lineA","generatedLine","lineB","columnA","generatedColumn","columnB","compareByGeneratedPositionsInflated","MappingList","_sorted","_last","unsortedForEach","aCallback","aThisArg","aMapping","swap","temp","randomIntInRange","low","high","round","doQuickSort","comparator","pivotIndex","pivot","q","quickSort","aSourceMap","sourceMap","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","version","getArg","sources","names","sourceRoot","sourcesContent","mappings","_version","_names","_sources","_mappings","Mapping","originalLine","originalColumn","lastOffset","_sections","offsetLine","offsetColumn","generatedOffset","consumer","binarySearch","base64VLQ","fromSourceMap","__generatedMappings","get","_parseMappings","__originalMappings","_charIsMappingSeparator","aSourceRoot","GENERATED_ORDER","ORIGINAL_ORDER","eachMapping","aContext","aOrder","order","_generatedMappings","_originalMappings","mapping","allGeneratedPositionsFor","aArgs","needle","relative","_findMapping","compareByOriginalPositions","lastColumn","smc","_sourceRoot","_generateSourcesContent","_file","generatedMappings","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","segment","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","originalMappings","compareByGeneratedPositionsDeflated","aMappings","aLineName","aColumnName","aComparator","computeColumnSpans","nextMapping","lastGeneratedColumn","originalPositionFor","hasContentsOfAllSources","some","sc","sourceContentFor","aSource","nullOnMissing","urlParse","fileUriAbsPath","scheme","generatedPositionFor","sectionIndex","section","bias","every","generatedPosition","sectionMappings","adjustedMapping","./array-set","./base64-vlq","./binary-search","./quick-sort","_skipValidation","_sourcesContents","aSourceMapConsumer","generator","newMapping","generated","addMapping","sourceFile","setSourceContent","_validateMapping","aSourceFile","aSourceContent","keys","applySourceMap","aSourceMapPath","newSources","newNames","aGenerated","aOriginal","aName","_serializeMappings","previousGeneratedLine","aSources","toJSON","./mapping-list","aLine","aColumn","aChunks","sourceContents","isSourceNode","REGEX_NEWLINE","NEWLINE_CODE","fromStringWithSourceMap","aGeneratedCode","aRelativePath","addMappingWithCode","remainingLines","shiftNextLine","lineContents","newLine","lastGeneratedLine","lastMapping","nextLine","aChunk","walk","aFn","aSep","newChildren","replaceRight","aPattern","aReplacement","lastChild","walkSourceContents","fromSetString","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","sourceContent","./source-map-generator","aDefaultValue","aUrl","urlRegexp","auth","host","port","urlGenerate","aParsedUrl","aPath","isAbsolute","up","aRoot","aPathUrl","aRootUrl","dataUrlRegexp","joined","lastIndexOf","onlyCompareOriginal","onlyCompareGenerated","strcmp","aStr1","aStr2","normalizeName","String","normalizeValue","iteratorFor","items","support","iterable","Headers","headers","consumed","bodyUsed","fileReaderReady","reader","onload","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","readArrayBufferAsText","buf","Uint8Array","chars","fromCharCode","bufferClone","byteLength","buffer","Body","_initBody","_bodyInit","_bodyText","Blob","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","arrayBuffer","isDataView","_bodyArrayBuffer","ArrayBuffer","isArrayBufferView","rejected","json","normalizeMethod","upcased","methods","Request","credentials","mode","referrer","form","bytes","decodeURIComponent","parseHeaders","rawHeaders","Response","bodyInit","status","ok","statusText","viewClasses","DataView","isView","getAll","thisArg","clone","response","redirectStatuses","redirect","RangeError","init","request","xhr","XMLHttpRequest","getAllResponseHeaders","responseURL","responseText","ontimeout","withCredentials","responseType","setRequestHeader","send","_extends","assign","CarouselArrows","leftArrow","rightArrow","panels","arrowDisabledClass","onLeftArrowClick","onRightArrowClick","initialIndex","arrows","_leftArrowEventListener","_rightArrowEventListener","panelIndex","currentItemNum","maxItems","minItems","enable","disableRightArrow","enableLeftArrow","disableLeftArrow","enableRightArrow","isDisabled","removeEventListener","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","setPrototypeOf","__proto__","_get","property","receiver","desc","getOwnPropertyDescriptor","getPrototypeOf","getter","_promise","_promise2","_moduleJs","_moduleJs2","CarouselPanel","_Module","lazyLoadAttr","assetLoadedClass","_loadableImages","imgEl","_loadImage","tagName","getAttribute","img","module-js","_carouselPanel","_carouselPanel2","CarouselPanels","panelActiveClass","panelLoadedClass","onChange","panelBackClass","panelForwardClass","_panelModules","_setupPanelModules","panel","modules","errorMsg","maxIndex","minIndex","prevIndex","getCurrentIndex","_updatePanels","_currentIndex","toIndex","fromIndex","fromPanel","toPanel","rangePanels","toAdd","toRemove","panelModule","./carousel-panel","CarouselThumbs","thumbnails","thumbnailActiveTriggerEvent","thumbnailActiveClass","_thumbnailEventListener","onThumbnailEvent","setup","thumbs","triggerThumbsEventListener","_thumbnailArr","currentTarget","goTo","thumbnailCount","count","_carouselThumbs","_carouselThumbs2","_carouselPanels","_carouselPanels2","_carouselArrows","_carouselArrows2","assetLoadingClass","autoLoadAssets","onPanelChange","arrowActiveClass","_checkForInitErrors","_setupPanels","_setupThumbs","_setupArrows","onThumbnailChange","internalOptions","panelCount","warn","update","./carousel-arrows","./carousel-panels","./carousel-thumbs","normalizeArray","allowAboveRoot","filter","xs","splitPathRe","splitPath","resolvedPath","resolvedAbsolute","cwd","trailingSlash","from","to","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dir","basename","extname","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","run","Item","title","browser","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","chdir","umask","renderFAQ","bootstrapTemplate","domNode","addQuestion","question","answer","appendTo","_thisQuestion","_question","cloneNode","_destination","getElementsByClassName","_section","_subsection","sectionTitle","faq","_thisSection","image","_thisDestination","subsectionTitle","questions","subsection","_thisSubsection","bindFAQ","select","allElements","cursor","stopPropagation","renderCarousel","fail","incrementValue","intVal","difference","currentVal","ceil","updateDisplay","messageDiv","MESSAGE_URL","getElementById","getMessageCount","loadDashboard","reload","DASHBOARD_URL","reflowDashboard","adjustHeight","viz","offsetWidth","getQuotes","quotes","initializeD3","svg","attr","cloudHeight","setSVGWidth","wordCloudDiv","skipRedraw","cloudWidth","doViz","lastWords","selectAll","vis","maxscale","scale","linear","domain","sizeScale","draw","enter","quoteDiv","CLOUD_HEIGHT","bootstrapWordCloud","issue","attachHamburger","element","scrollToTop","scrollTo","preventDefault","resizeTimer","outerWidth","newEvent","Event","originalEvent","dispatchEvent"],"mappings":"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","file":"main.min.js","sourcesContent":["'use strict'; /*\n               *\n               *  Web Starter Kit\n               *  Copyright 2015 Google Inc. All rights reserved.\n               *\n               *  Licensed under the Apache License, Version 2.0 (the \"License\");\n               *  you may not use this file except in compliance with the License.\n               *  You may obtain a copy of the License at\n               *\n               *    https://www.apache.org/licenses/LICENSE-2.0\n               *\n               *  Unless required by applicable law or agreed to in writing, software\n               *  distributed under the License is distributed on an \"AS IS\" BASIS,\n               *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n               *  See the License for the specific language governing permissions and\n               *  limitations under the License\n               *\n               */\n\n(function () {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n  /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\n\n\n  if ('serviceWorker' in navigator && (\n  window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js').\n    then(function (registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function () {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {(function () {\n            // The updatefound event implies that registration.installing is set:\n            // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n            var installingWorker = registration.installing;\n\n            installingWorker.onstatechange = function () {\n              switch (installingWorker.state) {\n                case 'installed':\n                  // At this point, the old content will have been purged and the\n                  // fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in the page's interface.\n                  break;\n\n                case 'redundant':\n                  throw new Error('The installing ' +\n                  'service worker became redundant.');\n\n                default:\n                // Ignore\n              }\n            };})();\n        }\n      };\n    }).catch(function (e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  // Your custom JavaScript goes here\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndzdC5qcyJdLCJuYW1lcyI6WyJpc0xvY2FsaG9zdCIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhvc3RuYW1lIiwibWF0Y2giLCJuYXZpZ2F0b3IiLCJwcm90b2NvbCIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsInRoZW4iLCJyZWdpc3RyYXRpb24iLCJvbnVwZGF0ZWZvdW5kIiwiY29udHJvbGxlciIsImluc3RhbGxpbmdXb3JrZXIiLCJpbnN0YWxsaW5nIiwib25zdGF0ZWNoYW5nZSIsInN0YXRlIiwiRXJyb3IiLCJjYXRjaCIsImUiLCJjb25zb2xlIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJjQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLENBQUMsWUFBVztBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsY0FBY0MsUUFBUUMsT0FBT0MsUUFBUCxDQUFnQkMsUUFBaEIsS0FBNkIsV0FBN0I7QUFDeEI7QUFDQUYsU0FBT0MsUUFBUCxDQUFnQkMsUUFBaEIsS0FBNkIsT0FGTDtBQUd4QjtBQUNBRixTQUFPQyxRQUFQLENBQWdCQyxRQUFoQixDQUF5QkMsS0FBekI7QUFDRSwwREFERixDQUpnQixDQUFwQjs7OztBQVNBLE1BQUksbUJBQW1CQyxTQUFuQjtBQUNDSixTQUFPQyxRQUFQLENBQWdCSSxRQUFoQixLQUE2QixRQUE3QixJQUF5Q1AsV0FEMUMsQ0FBSixFQUM0RDtBQUMxRE0sY0FBVUUsYUFBVixDQUF3QkMsUUFBeEIsQ0FBaUMsbUJBQWpDO0FBQ0NDLFFBREQsQ0FDTSxVQUFTQyxZQUFULEVBQXVCO0FBQzNCO0FBQ0FBLG1CQUFhQyxhQUFiLEdBQTZCLFlBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFJTixVQUFVRSxhQUFWLENBQXdCSyxVQUE1QixFQUF3QztBQUN0QztBQUNBO0FBQ0EsZ0JBQU1DLG1CQUFtQkgsYUFBYUksVUFBdEM7O0FBRUFELDZCQUFpQkUsYUFBakIsR0FBaUMsWUFBVztBQUMxQyxzQkFBUUYsaUJBQWlCRyxLQUF6QjtBQUNFLHFCQUFLLFdBQUw7QUFDRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVGLHFCQUFLLFdBQUw7QUFDRSx3QkFBTSxJQUFJQyxLQUFKLENBQVU7QUFDQSxvREFEVixDQUFOOztBQUdGO0FBQ0U7QUFiSjtBQWVELGFBaEJELENBTHNDO0FBc0J2QztBQUNGLE9BNUJEO0FBNkJELEtBaENELEVBZ0NHQyxLQWhDSCxDQWdDUyxVQUFTQyxDQUFULEVBQVk7QUFDbkJDLGNBQVFDLEtBQVIsQ0FBYywyQ0FBZCxFQUEyREYsQ0FBM0Q7QUFDRCxLQWxDRDtBQW1DRDs7QUFFRDtBQUNELENBeEREIiwiZmlsZSI6IndzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKlxuICogIFdlYiBTdGFydGVyIEtpdFxuICogIENvcHlyaWdodCAyMDE1IEdvb2dsZSBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2VcbiAqXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ2hlY2sgdG8gbWFrZSBzdXJlIHNlcnZpY2Ugd29ya2VycyBhcmUgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGJyb3dzZXIsXG4gIC8vIGFuZCB0aGF0IHRoZSBjdXJyZW50IHBhZ2UgaXMgYWNjZXNzZWQgZnJvbSBhIHNlY3VyZSBvcmlnaW4uIFVzaW5nIGFcbiAgLy8gc2VydmljZSB3b3JrZXIgZnJvbSBhbiBpbnNlY3VyZSBvcmlnaW4gd2lsbCB0cmlnZ2VyIEpTIGNvbnNvbGUgZXJyb3JzLiBTZWVcbiAgLy8gaHR0cDovL3d3dy5jaHJvbWl1bS5vcmcvSG9tZS9jaHJvbWl1bS1zZWN1cml0eS9wcmVmZXItc2VjdXJlLW9yaWdpbnMtZm9yLXBvd2VyZnVsLW5ldy1mZWF0dXJlc1xuICBjb25zdCBpc0xvY2FsaG9zdCA9IEJvb2xlYW4od2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fFxuICAgICAgLy8gWzo6MV0gaXMgdGhlIElQdjYgbG9jYWxob3N0IGFkZHJlc3MuXG4gICAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09ICdbOjoxXScgfHxcbiAgICAgIC8vIDEyNy4wLjAuMS84IGlzIGNvbnNpZGVyZWQgbG9jYWxob3N0IGZvciBJUHY0LlxuICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLm1hdGNoKFxuICAgICAgICAvXjEyNyg/OlxcLig/OjI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykpezN9JC9cbiAgICAgIClcbiAgICApO1xuXG4gIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yICYmXG4gICAgICAod2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyB8fCBpc0xvY2FsaG9zdCkpIHtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcignc2VydmljZS13b3JrZXIuanMnKVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlZ2lzdHJhdGlvbikge1xuICAgICAgLy8gdXBkYXRlZm91bmQgaXMgZmlyZWQgaWYgc2VydmljZS13b3JrZXIuanMgY2hhbmdlcy5cbiAgICAgIHJlZ2lzdHJhdGlvbi5vbnVwZGF0ZWZvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIHVwZGF0ZWZvdW5kIGlzIGFsc28gZmlyZWQgdGhlIHZlcnkgZmlyc3QgdGltZSB0aGUgU1cgaXMgaW5zdGFsbGVkLFxuICAgICAgICAvLyBhbmQgdGhlcmUncyBubyBuZWVkIHRvIHByb21wdCBmb3IgYSByZWxvYWQgYXQgdGhhdCBwb2ludC5cbiAgICAgICAgLy8gU28gY2hlY2sgaGVyZSB0byBzZWUgaWYgdGhlIHBhZ2UgaXMgYWxyZWFkeSBjb250cm9sbGVkLFxuICAgICAgICAvLyBpLmUuIHdoZXRoZXIgdGhlcmUncyBhbiBleGlzdGluZyBzZXJ2aWNlIHdvcmtlci5cbiAgICAgICAgaWYgKG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAvLyBUaGUgdXBkYXRlZm91bmQgZXZlbnQgaW1wbGllcyB0aGF0IHJlZ2lzdHJhdGlvbi5pbnN0YWxsaW5nIGlzIHNldDpcbiAgICAgICAgICAvLyBodHRwczovL3NsaWdodGx5b2ZmLmdpdGh1Yi5pby9TZXJ2aWNlV29ya2VyL3NwZWMvc2VydmljZV93b3JrZXIvaW5kZXguaHRtbCNzZXJ2aWNlLXdvcmtlci1jb250YWluZXItdXBkYXRlZm91bmQtZXZlbnRcbiAgICAgICAgICBjb25zdCBpbnN0YWxsaW5nV29ya2VyID0gcmVnaXN0cmF0aW9uLmluc3RhbGxpbmc7XG5cbiAgICAgICAgICBpbnN0YWxsaW5nV29ya2VyLm9uc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoaW5zdGFsbGluZ1dvcmtlci5zdGF0ZSkge1xuICAgICAgICAgICAgICBjYXNlICdpbnN0YWxsZWQnOlxuICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHRoZSBvbGQgY29udGVudCB3aWxsIGhhdmUgYmVlbiBwdXJnZWQgYW5kIHRoZVxuICAgICAgICAgICAgICAgIC8vIGZyZXNoIGNvbnRlbnQgd2lsbCBoYXZlIGJlZW4gYWRkZWQgdG8gdGhlIGNhY2hlLlxuICAgICAgICAgICAgICAgIC8vIEl0J3MgdGhlIHBlcmZlY3QgdGltZSB0byBkaXNwbGF5IGEgXCJOZXcgY29udGVudCBpc1xuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZTsgcGxlYXNlIHJlZnJlc2guXCIgbWVzc2FnZSBpbiB0aGUgcGFnZSdzIGludGVyZmFjZS5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlICdyZWR1bmRhbnQnOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGluc3RhbGxpbmcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzZXJ2aWNlIHdvcmtlciBiZWNhbWUgcmVkdW5kYW50LicpO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbihlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uOicsIGUpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gWW91ciBjdXN0b20gSmF2YVNjcmlwdCBnb2VzIGhlcmVcbn0pKCk7XG4iXX0=\n\n\"use strict\";var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;}; // Word cloud layout by Jason Davies, http://www.jasondavies.com/word-cloud/\n// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\n(function () {\n  function cloud() {\n    var size = [256, 256],\n    text = cloudText,\n    font = cloudFont,\n    fontSize = cloudFontSize,\n    fontStyle = cloudFontNormal,\n    fontWeight = cloudFontNormal,\n    rotate = cloudRotate,\n    padding = cloudPadding,\n    spiral = archimedeanSpiral,\n    words = [],\n    timeInterval = Infinity,\n    event = d3.dispatch(\"word\", \"end\"),\n    timer = null,\n    cloud = {};\n\n    cloud.start = function () {\n      var board = zeroArray((size[0] >> 5) * size[1]),\n      bounds = null,\n      n = words.length,\n      i = -1,\n      tags = [],\n      data = words.map(function (d, i) {\n        d.text = text.call(this, d, i);\n        d.font = font.call(this, d, i);\n        d.style = fontStyle.call(this, d, i);\n        d.weight = fontWeight.call(this, d, i);\n        d.rotate = rotate.call(this, d, i);\n        d.size = ~~fontSize.call(this, d, i);\n        d.padding = padding.call(this, d, i);\n        return d;\n      }).sort(function (a, b) {return b.size - a.size;});\n\n      if (timer) clearInterval(timer);\n      timer = setInterval(step, 0);\n      step();\n\n      return cloud;\n\n      function step() {\n        var start = +new Date(),\n        d;\n        while (+new Date() - start < timeInterval && ++i < n && timer) {\n          d = data[i];\n          d.x = size[0] * (Math.random() + .5) >> 1;\n          d.y = size[1] * (Math.random() + .5) >> 1;\n          cloudSprite(d, data, i);\n          if (d.hasText && place(board, d, bounds)) {\n            tags.push(d);\n            event.word(d);\n            if (bounds) cloudBounds(bounds, d);else\n            bounds = [{ x: d.x + d.x0, y: d.y + d.y0 }, { x: d.x + d.x1, y: d.y + d.y1 }];\n            // Temporary hack\n            d.x -= size[0] >> 1;\n            d.y -= size[1] >> 1;\n          }\n        }\n        if (i >= n) {\n          cloud.stop();\n          event.end(tags, bounds);\n        }\n      }\n    };\n\n    cloud.stop = function () {\n      if (timer) {\n        clearInterval(timer);\n        timer = null;\n      }\n      return cloud;\n    };\n\n    cloud.timeInterval = function (x) {\n      if (!arguments.length) return timeInterval;\n      timeInterval = x == null ? Infinity : x;\n      return cloud;\n    };\n\n    function place(board, tag, bounds) {\n      var perimeter = [{ x: 0, y: 0 }, { x: size[0], y: size[1] }],\n      startX = tag.x,\n      startY = tag.y,\n      maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n      s = spiral(size),\n      dt = Math.random() < .5 ? 1 : -1,\n      t = -dt,\n      dxdy,\n      dx,\n      dy;\n\n      while (dxdy = s(t += dt)) {\n        dx = ~~dxdy[0];\n        dy = ~~dxdy[1];\n\n        if (Math.min(dx, dy) > maxDelta) break;\n\n        tag.x = startX + dx;\n        tag.y = startY + dy;\n\n        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||\n        tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;\n        // TODO only check for collisions within current bounds.\n        if (!bounds || !cloudCollide(tag, board, size[0])) {\n          if (!bounds || collideRects(tag, bounds)) {\n            var sprite = tag.sprite,\n            w = tag.width >> 5,\n            sw = size[0] >> 5,\n            lx = tag.x - (w << 4),\n            sx = lx & 0x7f,\n            msx = 32 - sx,\n            h = tag.y1 - tag.y0,\n            x = (tag.y + tag.y0) * sw + (lx >> 5),\n            last;\n            for (var j = 0; j < h; j++) {\n              last = 0;\n              for (var i = 0; i <= w; i++) {\n                board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n              }\n              x += sw;\n            }\n            delete tag.sprite;\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    cloud.words = function (x) {\n      if (!arguments.length) return words;\n      words = x;\n      return cloud;\n    };\n\n    cloud.size = function (x) {\n      if (!arguments.length) return size;\n      size = [+x[0], +x[1]];\n      return cloud;\n    };\n\n    cloud.font = function (x) {\n      if (!arguments.length) return font;\n      font = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.fontStyle = function (x) {\n      if (!arguments.length) return fontStyle;\n      fontStyle = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.fontWeight = function (x) {\n      if (!arguments.length) return fontWeight;\n      fontWeight = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.rotate = function (x) {\n      if (!arguments.length) return rotate;\n      rotate = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.text = function (x) {\n      if (!arguments.length) return text;\n      text = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.spiral = function (x) {\n      if (!arguments.length) return spiral;\n      spiral = spirals[x + \"\"] || x;\n      return cloud;\n    };\n\n    cloud.fontSize = function (x) {\n      if (!arguments.length) return fontSize;\n      fontSize = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.padding = function (x) {\n      if (!arguments.length) return padding;\n      padding = d3.functor(x);\n      return cloud;\n    };\n\n    return d3.rebind(cloud, event, \"on\");\n  }\n\n  function cloudText(d) {\n    return d.text;\n  }\n\n  function cloudFont() {\n    return \"serif\";\n  }\n\n  function cloudFontNormal() {\n    return \"normal\";\n  }\n\n  function cloudFontSize(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function cloudRotate() {\n    return (~~(Math.random() * 6) - 3) * 30;\n  }\n\n  function cloudPadding() {\n    return 1;\n  }\n\n  // Fetches a monochrome sprite bitmap for the specified text.\n  // Load in batches for speed.\n  function cloudSprite(d, data, di) {\n    if (d.sprite) return;\n    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n    var x = 0,\n    y = 0,\n    maxh = 0,\n    n = data.length;\n    --di;\n    while (++di < n) {\n      d = data[di];\n      c.save();\n      c.font = d.style + \" \" + d.weight + \" \" + ~~((d.size + 1) / ratio) + \"px \" + d.font;\n      var w = c.measureText(d.text + \"m\").width * ratio,\n      h = d.size << 1;\n      if (d.rotate) {\n        var sr = Math.sin(d.rotate * cloudRadians),\n        cr = Math.cos(d.rotate * cloudRadians),\n        wcr = w * cr,\n        wsr = w * sr,\n        hcr = h * cr,\n        hsr = h * sr;\n        w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;\n        h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n      } else {\n        w = w + 0x1f >> 5 << 5;\n      }\n      if (h > maxh) maxh = h;\n      if (x + w >= cw << 5) {\n        x = 0;\n        y += maxh;\n        maxh = 0;\n      }\n      if (y + h >= ch) break;\n      c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n      if (d.rotate) c.rotate(d.rotate * cloudRadians);\n      c.fillText(d.text, 0, 0);\n      if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, 0, 0);\n      c.restore();\n      d.width = w;\n      d.height = h;\n      d.xoff = x;\n      d.yoff = y;\n      d.x1 = w >> 1;\n      d.y1 = h >> 1;\n      d.x0 = -d.x1;\n      d.y0 = -d.y1;\n      d.hasText = true;\n      x += w;\n    }\n    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n    sprite = [];\n    while (--di >= 0) {\n      d = data[di];\n      if (!d.hasText) continue;\n      var w = d.width,\n      w32 = w >> 5,\n      h = d.y1 - d.y0;\n      // Zero the buffer\n      for (var i = 0; i < h * w32; i++) {sprite[i] = 0;}\n      x = d.xoff;\n      if (x == null) return;\n      y = d.yoff;\n      var seen = 0,\n      seenRow = -1;\n      for (var j = 0; j < h; j++) {\n        for (var i = 0; i < w; i++) {\n          var k = w32 * j + (i >> 5),\n          m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;\n          sprite[k] |= m;\n          seen |= m;\n        }\n        if (seen) seenRow = j;else\n        {\n          d.y0++;\n          h--;\n          j--;\n          y++;\n        }\n      }\n      d.y1 = d.y0 + seenRow;\n      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n    }\n  }\n\n  // Use mask-based collision detection.\n  function cloudCollide(tag, board, sw) {\n    sw >>= 5;\n    var sprite = tag.sprite,\n    w = tag.width >> 5,\n    lx = tag.x - (w << 4),\n    sx = lx & 0x7f,\n    msx = 32 - sx,\n    h = tag.y1 - tag.y0,\n    x = (tag.y + tag.y0) * sw + (lx >> 5),\n    last;\n    for (var j = 0; j < h; j++) {\n      last = 0;\n      for (var i = 0; i <= w; i++) {\n        if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) &\n        board[x + i]) return true;\n      }\n      x += sw;\n    }\n    return false;\n  }\n\n  function cloudBounds(bounds, d) {\n    var b0 = bounds[0],\n    b1 = bounds[1];\n    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n  }\n\n  function collideRects(a, b) {\n    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n  }\n\n  function archimedeanSpiral(size) {\n    var e = size[0] / size[1];\n    return function (t) {\n      return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\n    };\n  }\n\n  function rectangularSpiral(size) {\n    var dy = 4,\n    dx = dy * size[0] / size[1],\n    x = 0,\n    y = 0;\n    return function (t) {\n      var sign = t < 0 ? -1 : 1;\n      // See triangular numbers: T_n = n * (n + 1) / 2.\n      switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {\n        case 0:x += dx;break;\n        case 1:y += dy;break;\n        case 2:x -= dx;break;\n        default:y -= dy;break;}\n\n      return [x, y];\n    };\n  }\n\n  // TODO reuse arrays?\n  function zeroArray(n) {\n    var a = [],\n    i = -1;\n    while (++i < n) {a[i] = 0;}\n    return a;\n  }\n\n  var cloudRadians = Math.PI / 180,\n  cw = 1 << 11 >> 5,\n  ch = 1 << 11,\n  canvas,\n  ratio = 1;\n\n  if (typeof document !== \"undefined\") {\n    canvas = document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = 1;\n    ratio = Math.sqrt(canvas.getContext(\"2d\").getImageData(0, 0, 1, 1).data.length >> 2);\n    canvas.width = (cw << 5) / ratio;\n    canvas.height = ch / ratio;\n  } else {\n    // Attempt to use node-canvas.\n    canvas = new Canvas(cw << 5, ch);\n  }\n\n  var c = canvas.getContext(\"2d\"),\n  spirals = {\n    archimedean: archimedeanSpiral,\n    rectangular: rectangularSpiral };\n\n  c.fillStyle = c.strokeStyle = \"red\";\n  c.textAlign = \"center\";\n\n  if ((typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) === \"object\" && module.exports) module.exports = cloud;else\n  (d3.layout || (d3.layout = {})).cloud = cloud;\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n'use strict'; /* eslint-env browser */\n/**\n                                        * Toggle the display of an element.\n                                        *\n                                        * @param  {element} e The element to toggle.\n                                        *\n                                        * @return {element}   The element that was toggled.\n                                        */\nwindow.toggle = function (e) {\n  if (e instanceof NodeList) {\n    e.forEach(toggle);\n    return e;\n  }\n\n  if (e.style.display === 'inherit') {\n    return hide(e);\n  }\n\n  return show(e);\n};\n\n/**\n    * Hide an element or elements.\n    *\n    * @param  {element|NodeList} e The element(s) to hide\n    *\n    * @return {element} The element hidden\n    */\nwindow.hide = function (e) {\n  if (e instanceof NodeList) {\n    e.forEach(hide);\n  } else {\n    e.style.display = 'none';\n  }\n\n  return e;\n};\n\n/**\n    * Unhide an element.\n    *\n    * @param  {element} e The element to unhide.\n    *\n    * @return {element} The element unhidden\n    */\nwindow.show = function (e) {\n  if (e instanceof NodeList) {\n    e.forEach(hide);\n  } else {\n    e.style.display = 'inherit';\n  }\n\n  return e;\n};\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvZ2dsZS5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJ0b2dnbGUiLCJlIiwiTm9kZUxpc3QiLCJmb3JFYWNoIiwic3R5bGUiLCJkaXNwbGF5IiwiaGlkZSIsInNob3ciXSwibWFwcGluZ3MiOiJjQUFBO0FBQ0E7Ozs7Ozs7QUFPQUEsT0FBT0MsTUFBUCxHQUFnQixVQUFTQyxDQUFULEVBQVk7QUFDMUIsTUFBSUEsYUFBYUMsUUFBakIsRUFBMkI7QUFDekJELE1BQUVFLE9BQUYsQ0FBVUgsTUFBVjtBQUNBLFdBQU9DLENBQVA7QUFDRDs7QUFFRCxNQUFJQSxFQUFFRyxLQUFGLENBQVFDLE9BQVIsS0FBb0IsU0FBeEIsRUFBbUM7QUFDakMsV0FBT0MsS0FBS0wsQ0FBTCxDQUFQO0FBQ0Q7O0FBRUQsU0FBT00sS0FBS04sQ0FBTCxDQUFQO0FBQ0QsQ0FYRDs7QUFhQTs7Ozs7OztBQU9BRixPQUFPTyxJQUFQLEdBQWMsVUFBU0wsQ0FBVCxFQUFZO0FBQ3hCLE1BQUlBLGFBQWFDLFFBQWpCLEVBQTJCO0FBQ3pCRCxNQUFFRSxPQUFGLENBQVVHLElBQVY7QUFDRCxHQUZELE1BRU87QUFDTEwsTUFBRUcsS0FBRixDQUFRQyxPQUFSLEdBQWtCLE1BQWxCO0FBQ0Q7O0FBRUQsU0FBT0osQ0FBUDtBQUNELENBUkQ7O0FBVUE7Ozs7Ozs7QUFPQUYsT0FBT1EsSUFBUCxHQUFjLFVBQVNOLENBQVQsRUFBWTtBQUN4QixNQUFJQSxhQUFhQyxRQUFqQixFQUEyQjtBQUN6QkQsTUFBRUUsT0FBRixDQUFVRyxJQUFWO0FBQ0QsR0FGRCxNQUVPO0FBQ0xMLE1BQUVHLEtBQUYsQ0FBUUMsT0FBUixHQUFrQixTQUFsQjtBQUNEOztBQUVELFNBQU9KLENBQVA7QUFDRCxDQVJEIiwiZmlsZSI6InRvZ2dsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuLyoqXG4gKiBUb2dnbGUgdGhlIGRpc3BsYXkgb2YgYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtlbGVtZW50fSBlIFRoZSBlbGVtZW50IHRvIHRvZ2dsZS5cbiAqXG4gKiBAcmV0dXJuIHtlbGVtZW50fSAgIFRoZSBlbGVtZW50IHRoYXQgd2FzIHRvZ2dsZWQuXG4gKi9cbndpbmRvdy50b2dnbGUgPSBmdW5jdGlvbihlKSB7XG4gIGlmIChlIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcbiAgICBlLmZvckVhY2godG9nZ2xlKTtcbiAgICByZXR1cm4gZTtcbiAgfVxuXG4gIGlmIChlLnN0eWxlLmRpc3BsYXkgPT09ICdpbmhlcml0Jykge1xuICAgIHJldHVybiBoaWRlKGUpO1xuICB9XG5cbiAgcmV0dXJuIHNob3coZSk7XG59XG5cbi8qKlxuICogSGlkZSBhbiBlbGVtZW50IG9yIGVsZW1lbnRzLlxuICpcbiAqIEBwYXJhbSAge2VsZW1lbnR8Tm9kZUxpc3R9IGUgVGhlIGVsZW1lbnQocykgdG8gaGlkZVxuICpcbiAqIEByZXR1cm4ge2VsZW1lbnR9IFRoZSBlbGVtZW50IGhpZGRlblxuICovXG53aW5kb3cuaGlkZSA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xuICAgIGUuZm9yRWFjaChoaWRlKTtcbiAgfSBlbHNlIHtcbiAgICBlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICByZXR1cm4gZTtcbn1cblxuLyoqXG4gKiBVbmhpZGUgYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtlbGVtZW50fSBlIFRoZSBlbGVtZW50IHRvIHVuaGlkZS5cbiAqXG4gKiBAcmV0dXJuIHtlbGVtZW50fSBUaGUgZWxlbWVudCB1bmhpZGRlblxuICovXG53aW5kb3cuc2hvdyA9IGZ1bmN0aW9uKGUpIHtcbiAgaWYgKGUgaW5zdGFuY2VvZiBOb2RlTGlzdCkge1xuICAgIGUuZm9yRWFjaChoaWRlKTtcbiAgfSBlbHNlIHtcbiAgICBlLnN0eWxlLmRpc3BsYXkgPSAnaW5oZXJpdCc7XG4gIH1cblxuICByZXR1cm4gZTtcbn1cbiJdfQ==\n\n\"use strict\";var _typeof2 = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;}; /** \n                                                                                                                                                                                                                                                                                        * carousel-js - v3.1.1.\n                                                                                                                                                                                                                                                                                        * git://github.com/mkay581/carousel-js.git\n                                                                                                                                                                                                                                                                                        * Copyright 2016 Mark Kennedy. Licensed MIT.\n                                                                                                                                                                                                                                                                                        */\n\n(function (f) {if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof2(exports)) === \"object\" && typeof module !== \"undefined\") {module.exports = f();} else if (typeof define === \"function\" && define.amd) {define([], f);} else {var g;if (typeof window !== \"undefined\") {g = window;} else if (typeof global !== \"undefined\") {g = global;} else if (typeof self !== \"undefined\") {g = self;} else {g = this;}g.Carousel = f();}})(function () {var define, module, exports;return function e(t, n, r) {function s(o, u) {if (!n[o]) {if (!t[o]) {var a = typeof require == \"function\" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;}var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {var n = t[o][1][e];return s(n ? n : e);}, l, l.exports, e, t, n, r);}return n[o].exports;}var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) {s(r[o]);}return s;}({ 1: [function (require, module, exports) {\n      (function (process, __filename) {\n        /** vim: et:ts=4:sw=4:sts=4\n                                        * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.\n                                        * Available via the MIT or new BSD license.\n                                        * see: http://github.com/jrburke/amdefine for details\n                                        */\n\n        /*jslint node: true */\n        /*global module, process */\n        'use strict';\n\n        /**\n                       * Creates a define for node.\n                       * @param {Object} module the \"module\" object that is defined by Node for the\n                       * current module.\n                       * @param {Function} [requireFn]. Node's require function for the current module.\n                       * It only needs to be passed in Node versions before 0.5, when module.require\n                       * did not exist.\n                       * @returns {Function} a define function that is usable for the current node\n                       * module.\n                       */\n        function amdefine(module, requireFn) {\n          'use strict';\n          var defineCache = {},\n          loaderCache = {},\n          alreadyCalled = false,\n          path = require('path'),\n          makeRequire,_stringRequire;\n\n          /**\n                                       * Trims the . and .. from an array of path segments.\n                                       * It will keep a leading path segment if a .. will become\n                                       * the first path segment, to help with module name lookups,\n                                       * which act like paths, but can be remapped. But the end result,\n                                       * all paths that use this function should look normalized.\n                                       * NOTE: this method MODIFIES the input array.\n                                       * @param {Array} ary the array of path segments.\n                                       */\n          function trimDots(ary) {\n            var i, part;\n            for (i = 0; ary[i]; i += 1) {\n              part = ary[i];\n              if (part === '.') {\n                ary.splice(i, 1);\n                i -= 1;\n              } else if (part === '..') {\n                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\n                  //End of the line. Keep at least one non-dot\n                  //path segment at the front so it can be mapped\n                  //correctly to disk. Otherwise, there is likely\n                  //no path mapping for a path starting with '..'.\n                  //This can still fail, but catches the most reasonable\n                  //uses of ..\n                  break;\n                } else if (i > 0) {\n                  ary.splice(i - 1, 2);\n                  i -= 2;\n                }\n              }\n            }\n          }\n\n          function normalize(name, baseName) {\n            var baseParts;\n\n            //Adjust any relative paths.\n            if (name && name.charAt(0) === '.') {\n              //If have a base name, try to normalize against it,\n              //otherwise, assume it is a top-level require that will\n              //be relative to baseUrl in the end.\n              if (baseName) {\n                baseParts = baseName.split('/');\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                baseParts = baseParts.concat(name.split('/'));\n                trimDots(baseParts);\n                name = baseParts.join('/');\n              }\n            }\n\n            return name;\n          }\n\n          /**\n             * Create the normalize() function passed to a loader plugin's\n             * normalize method.\n             */\n          function makeNormalize(relName) {\n            return function (name) {\n              return normalize(name, relName);\n            };\n          }\n\n          function makeLoad(id) {\n            function load(value) {\n              loaderCache[id] = value;\n            }\n\n            load.fromText = function (id, text) {\n              //This one is difficult because the text can/probably uses\n              //define, and any relative paths and requires should be relative\n              //to that id was it would be found on disk. But this would require\n              //bootstrapping a module/require fairly deeply from node core.\n              //Not sure how best to go about that yet.\n              throw new Error('amdefine does not implement load.fromText');\n            };\n\n            return load;\n          }\n\n          makeRequire = function makeRequire(systemRequire, exports, module, relId) {\n            function amdRequire(deps, callback) {\n              if (typeof deps === 'string') {\n                //Synchronous, single module require('')\n                return _stringRequire(systemRequire, exports, module, deps, relId);\n              } else {\n                //Array of dependencies with a callback.\n\n                //Convert the dependencies to modules.\n                deps = deps.map(function (depName) {\n                  return _stringRequire(systemRequire, exports, module, depName, relId);\n                });\n\n                //Wait for next tick to call back the require call.\n                if (callback) {\n                  process.nextTick(function () {\n                    callback.apply(null, deps);\n                  });\n                }\n              }\n            }\n\n            amdRequire.toUrl = function (filePath) {\n              if (filePath.indexOf('.') === 0) {\n                return normalize(filePath, path.dirname(module.filename));\n              } else {\n                return filePath;\n              }\n            };\n\n            return amdRequire;\n          };\n\n          //Favor explicit value, passed in if the module wants to support Node 0.4.\n          requireFn = requireFn || function req() {\n            return module.require.apply(module, arguments);\n          };\n\n          function runFactory(id, deps, factory) {\n            var r, e, m, result;\n\n            if (id) {\n              e = loaderCache[id] = {};\n              m = {\n                id: id,\n                uri: __filename,\n                exports: e };\n\n              r = makeRequire(requireFn, e, m, id);\n            } else {\n              //Only support one define call per file\n              if (alreadyCalled) {\n                throw new Error('amdefine with no module ID cannot be called more than once per file.');\n              }\n              alreadyCalled = true;\n\n              //Use the real variables from node\n              //Use module.exports for exports, since\n              //the exports in here is amdefine exports.\n              e = module.exports;\n              m = module;\n              r = makeRequire(requireFn, e, m, module.id);\n            }\n\n            //If there are dependencies, they are strings, so need\n            //to convert them to dependency values.\n            if (deps) {\n              deps = deps.map(function (depName) {\n                return r(depName);\n              });\n            }\n\n            //Call the factory with the right dependencies.\n            if (typeof factory === 'function') {\n              result = factory.apply(m.exports, deps);\n            } else {\n              result = factory;\n            }\n\n            if (result !== undefined) {\n              m.exports = result;\n              if (id) {\n                loaderCache[id] = m.exports;\n              }\n            }\n          }\n\n          _stringRequire = function stringRequire(systemRequire, exports, module, id, relId) {\n            //Split the ID by a ! so that\n            var index = id.indexOf('!'),\n            originalId = id,\n            prefix,plugin;\n\n            if (index === -1) {\n              id = normalize(id, relId);\n\n              //Straight module lookup. If it is one of the special dependencies,\n              //deal with it, otherwise, delegate to node.\n              if (id === 'require') {\n                return makeRequire(systemRequire, exports, module, relId);\n              } else if (id === 'exports') {\n                return exports;\n              } else if (id === 'module') {\n                return module;\n              } else if (loaderCache.hasOwnProperty(id)) {\n                return loaderCache[id];\n              } else if (defineCache[id]) {\n                runFactory.apply(null, defineCache[id]);\n                return loaderCache[id];\n              } else {\n                if (systemRequire) {\n                  return systemRequire(originalId);\n                } else {\n                  throw new Error('No module with ID: ' + id);\n                }\n              }\n            } else {\n              //There is a plugin in play.\n              prefix = id.substring(0, index);\n              id = id.substring(index + 1, id.length);\n\n              plugin = _stringRequire(systemRequire, exports, module, prefix, relId);\n\n              if (plugin.normalize) {\n                id = plugin.normalize(id, makeNormalize(relId));\n              } else {\n                //Normalize the ID normally.\n                id = normalize(id, relId);\n              }\n\n              if (loaderCache[id]) {\n                return loaderCache[id];\n              } else {\n                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});\n\n                return loaderCache[id];\n              }\n            }\n          };\n\n          //Create a define function specific to the module asking for amdefine.\n          function define(id, deps, factory) {\n            if (Array.isArray(id)) {\n              factory = deps;\n              deps = id;\n              id = undefined;\n            } else if (typeof id !== 'string') {\n              factory = id;\n              id = deps = undefined;\n            }\n\n            if (deps && !Array.isArray(deps)) {\n              factory = deps;\n              deps = undefined;\n            }\n\n            if (!deps) {\n              deps = ['require', 'exports', 'module'];\n            }\n\n            //Set up properties for this module. If an ID, then use\n            //internal cache. If no ID, then use the external variables\n            //for this node module.\n            if (id) {\n              //Put the module in deep freeze until there is a\n              //require call for it.\n              defineCache[id] = [id, deps, factory];\n            } else {\n              runFactory(id, deps, factory);\n            }\n          }\n\n          //define.require, which has access to all the values in the\n          //cache. Useful for AMD modules that all have IDs in the file,\n          //but need to finally export a value to node based on one of those\n          //IDs.\n          define.require = function (id) {\n            if (loaderCache[id]) {\n              return loaderCache[id];\n            }\n\n            if (defineCache[id]) {\n              runFactory.apply(null, defineCache[id]);\n              return loaderCache[id];\n            }\n          };\n\n          define.amd = {};\n\n          return define;\n        }\n\n        module.exports = amdefine;\n\n      }).call(this, require('_process'), \"/node_modules/amdefine/amdefine.js\");\n    }, { \"_process\": 65, \"path\": 64 }], 2: [function (require, module, exports) {\n      \"use strict\";\n\n      // rawAsap provides everything we need except exception management.\n      var rawAsap = require(\"./raw\");\n      // RawTasks are recycled to reduce GC churn.\n      var freeTasks = [];\n      // We queue errors to ensure they are thrown in right order (FIFO).\n      // Array-as-queue is good enough here, since we are just dealing with exceptions.\n      var pendingErrors = [];\n      var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\n      function throwFirstError() {\n        if (pendingErrors.length) {\n          throw pendingErrors.shift();\n        }\n      }\n\n      /**\n         * Calls a task as soon as possible after returning, in its own event, with priority\n         * over other events like animation, reflow, and repaint. An error thrown from an\n         * event will not interrupt, nor even substantially slow down the processing of\n         * other events, but will be rather postponed to a lower priority event.\n         * @param {{call}} task A callable object, typically a function that takes no\n         * arguments.\n         */\n      module.exports = asap;\n      function asap(task) {\n        var rawTask;\n        if (freeTasks.length) {\n          rawTask = freeTasks.pop();\n        } else {\n          rawTask = new RawTask();\n        }\n        rawTask.task = task;\n        rawAsap(rawTask);\n      }\n\n      // We wrap tasks with recyclable task objects.  A task object implements\n      // `call`, just like a function.\n      function RawTask() {\n        this.task = null;\n      }\n\n      // The sole purpose of wrapping the task is to catch the exception and recycle\n      // the task object after its single use.\n      RawTask.prototype.call = function () {\n        try {\n          this.task.call();\n        } catch (error) {\n          if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n          } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n          }\n        } finally {\n          this.task = null;\n          freeTasks[freeTasks.length] = this;\n        }\n      };\n\n    }, { \"./raw\": 3 }], 3: [function (require, module, exports) {\n      (function (global) {\n        \"use strict\";\n\n        // Use the fastest means possible to execute a task in its own turn, with\n        // priority over other events including IO, animation, reflow, and redraw\n        // events in browsers.\n        //\n        // An exception thrown by a task will permanently interrupt the processing of\n        // subsequent tasks. The higher level `asap` function ensures that if an\n        // exception is thrown by a task, that the task queue will continue flushing as\n        // soon as possible, but if you use `rawAsap` directly, you are responsible to\n        // either ensure that no exceptions are thrown from your task, or to manually\n        // call `rawAsap.requestFlush` if an exception is thrown.\n        module.exports = rawAsap;\n        function rawAsap(task) {\n          if (!queue.length) {\n            requestFlush();\n            flushing = true;\n          }\n          // Equivalent to push, but avoids a function call.\n          queue[queue.length] = task;\n        }\n\n        var queue = [];\n        // Once a flush has been requested, no further calls to `requestFlush` are\n        // necessary until the next `flush` completes.\n        var flushing = false;\n        // `requestFlush` is an implementation-specific method that attempts to kick\n        // off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n        // the event queue before yielding to the browser's own event loop.\n        var requestFlush;\n        // The position of the next task to execute in the task queue. This is\n        // preserved between calls to `flush` so that it can be resumed if\n        // a task throws an exception.\n        var index = 0;\n        // If a task schedules additional tasks recursively, the task queue can grow\n        // unbounded. To prevent memory exhaustion, the task queue will periodically\n        // truncate already-completed tasks.\n        var capacity = 1024;\n\n        // The flush function processes all tasks that have been scheduled with\n        // `rawAsap` unless and until one of those tasks throws an exception.\n        // If a task throws an exception, `flush` ensures that its state will remain\n        // consistent and will resume where it left off when called again.\n        // However, `flush` does not make any arrangements to be called again if an\n        // exception is thrown.\n        function flush() {\n          while (index < queue.length) {\n            var currentIndex = index;\n            // Advance the index before calling the task. This ensures that we will\n            // begin flushing on the next task the task throws an error.\n            index = index + 1;\n            queue[currentIndex].call();\n            // Prevent leaking memory for long chains of recursive calls to `asap`.\n            // If we call `asap` within tasks scheduled by `asap`, the queue will\n            // grow, but to avoid an O(n) walk for every task we execute, we don't\n            // shift tasks off the queue after they have been executed.\n            // Instead, we periodically shift 1024 tasks off the queue.\n            if (index > capacity) {\n              // Manually shift all values starting at the index back to the\n              // beginning of the queue.\n              for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n              }\n              queue.length -= index;\n              index = 0;\n            }\n          }\n          queue.length = 0;\n          index = 0;\n          flushing = false;\n        }\n\n        // `requestFlush` is implemented using a strategy based on data collected from\n        // every available SauceLabs Selenium web driver worker at time of writing.\n        // https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n        // Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n        // have WebKitMutationObserver but not un-prefixed MutationObserver.\n        // Must use `global` or `self` instead of `window` to work in both frames and web\n        // workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\n        /* globals self */\n        var scope = typeof global !== \"undefined\" ? global : self;\n        var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;\n\n        // MutationObservers are desirable because they have high priority and work\n        // reliably everywhere they are implemented.\n        // They are implemented in all modern browsers.\n        //\n        // - Android 4-4.3\n        // - Chrome 26-34\n        // - Firefox 14-29\n        // - Internet Explorer 11\n        // - iPad Safari 6-7.1\n        // - iPhone Safari 7-7.1\n        // - Safari 6-7\n        if (typeof BrowserMutationObserver === \"function\") {\n          requestFlush = makeRequestCallFromMutationObserver(flush);\n\n          // MessageChannels are desirable because they give direct access to the HTML\n          // task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n          // 11-12, and in web workers in many engines.\n          // Although message channels yield to any queued rendering and IO tasks, they\n          // would be better than imposing the 4ms delay of timers.\n          // However, they do not work reliably in Internet Explorer or Safari.\n\n          // Internet Explorer 10 is the only browser that has setImmediate but does\n          // not have MutationObservers.\n          // Although setImmediate yields to the browser's renderer, it would be\n          // preferrable to falling back to setTimeout since it does not have\n          // the minimum 4ms penalty.\n          // Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n          // Desktop to a lesser extent) that renders both setImmediate and\n          // MessageChannel useless for the purposes of ASAP.\n          // https://github.com/kriskowal/q/issues/396\n\n          // Timers are implemented universally.\n          // We fall back to timers in workers in most engines, and in foreground\n          // contexts in the following browsers.\n          // However, note that even this simple case requires nuances to operate in a\n          // broad spectrum of browsers.\n          //\n          // - Firefox 3-13\n          // - Internet Explorer 6-9\n          // - iPad Safari 4.3\n          // - Lynx 2.8.7\n        } else {\n          requestFlush = makeRequestCallFromTimer(flush);\n        }\n\n        // `requestFlush` requests that the high priority event queue be flushed as\n        // soon as possible.\n        // This is useful to prevent an error thrown in a task from stalling the event\n        // queue if the exception handled by Node.js’s\n        // `process.on(\"uncaughtException\")` or by a domain.\n        rawAsap.requestFlush = requestFlush;\n\n        // To request a high priority event, we induce a mutation observer by toggling\n        // the text of a text node between \"1\" and \"-1\".\n        function makeRequestCallFromMutationObserver(callback) {\n          var toggle = 1;\n          var observer = new BrowserMutationObserver(callback);\n          var node = document.createTextNode(\"\");\n          observer.observe(node, { characterData: true });\n          return function requestCall() {\n            toggle = -toggle;\n            node.data = toggle;\n          };\n        }\n\n        // The message channel technique was discovered by Malte Ubl and was the\n        // original foundation for this library.\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n\n        // Safari 6.0.5 (at least) intermittently fails to create message ports on a\n        // page's first load. Thankfully, this version of Safari supports\n        // MutationObservers, so we don't need to fall back in that case.\n\n        // function makeRequestCallFromMessageChannel(callback) {\n        //     var channel = new MessageChannel();\n        //     channel.port1.onmessage = callback;\n        //     return function requestCall() {\n        //         channel.port2.postMessage(0);\n        //     };\n        // }\n\n        // For reasons explained above, we are also unable to use `setImmediate`\n        // under any circumstances.\n        // Even if we were, there is another bug in Internet Explorer 10.\n        // It is not sufficient to assign `setImmediate` to `requestFlush` because\n        // `setImmediate` must be called *by name* and therefore must be wrapped in a\n        // closure.\n        // Never forget.\n\n        // function makeRequestCallFromSetImmediate(callback) {\n        //     return function requestCall() {\n        //         setImmediate(callback);\n        //     };\n        // }\n\n        // Safari 6.0 has a problem where timers will get lost while the user is\n        // scrolling. This problem does not impact ASAP because Safari 6.0 supports\n        // mutation observers, so that implementation is used instead.\n        // However, if we ever elect to use timers in Safari, the prevalent work-around\n        // is to add a scroll event listener that calls for a flush.\n\n        // `setTimeout` does not call the passed callback if the delay is less than\n        // approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n        // even then.\n\n        function makeRequestCallFromTimer(callback) {\n          return function requestCall() {\n            // We dispatch a timeout with a specified delay of 0 for engines that\n            // can reliably accommodate that request. This will usually be snapped\n            // to a 4 milisecond delay, but once we're flushing, there's no delay\n            // between events.\n            var timeoutHandle = setTimeout(handleTimer, 0);\n            // However, since this timer gets frequently dropped in Firefox\n            // workers, we enlist an interval handle that will try to fire\n            // an event 20 times per second until it succeeds.\n            var intervalHandle = setInterval(handleTimer, 50);\n\n            function handleTimer() {\n              // Whichever timer succeeds will cancel both timers and\n              // execute the callback.\n              clearTimeout(timeoutHandle);\n              clearInterval(intervalHandle);\n              callback();\n            }\n          };\n        }\n\n        // This is for `asap.js` only.\n        // Its name will be periodically randomized to break any code that depends on\n        // its existence.\n        rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n        // ASAP was originally a nextTick shim included in Q. This was factored out\n        // into this ASAP package. It was later adapted to RSVP which made further\n        // amendments. These decisions, particularly to marginalize MessageChannel and\n        // to capture the MutationObserver implementation in a closure, were integrated\n        // back into ASAP proper.\n        // https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}], 4: [function (require, module, exports) {\n      (function (process, global) {\n        /*!\n                                    * @overview es6-promise - a tiny implementation of Promises/A+.\n                                    * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n                                    * @license   Licensed under MIT license\n                                    *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n                                    * @version   4.0.5\n                                    */\n\n        (function (global, factory) {\n          (typeof exports === \"undefined\" ? \"undefined\" : _typeof2(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n          typeof define === 'function' && define.amd ? define(factory) :\n          global.ES6Promise = factory();\n        })(this, function () {'use strict';\n\n          function objectOrFunction(x) {\n            return typeof x === 'function' || (typeof x === \"undefined\" ? \"undefined\" : _typeof2(x)) === 'object' && x !== null;\n          }\n\n          function isFunction(x) {\n            return typeof x === 'function';\n          }\n\n          var _isArray = undefined;\n          if (!Array.isArray) {\n            _isArray = function _isArray(x) {\n              return Object.prototype.toString.call(x) === '[object Array]';\n            };\n          } else {\n            _isArray = Array.isArray;\n          }\n\n          var isArray = _isArray;\n\n          var len = 0;\n          var vertxNext = undefined;\n          var customSchedulerFn = undefined;\n\n          var asap = function asap(callback, arg) {\n            queue[len] = callback;\n            queue[len + 1] = arg;\n            len += 2;\n            if (len === 2) {\n              // If len is 2, that means that we need to schedule an async flush.\n              // If additional callbacks are queued before the queue is flushed, they\n              // will be processed by this flush that we are scheduling.\n              if (customSchedulerFn) {\n                customSchedulerFn(flush);\n              } else {\n                scheduleFlush();\n              }\n            }\n          };\n\n          function setScheduler(scheduleFn) {\n            customSchedulerFn = scheduleFn;\n          }\n\n          function setAsap(asapFn) {\n            asap = asapFn;\n          }\n\n          var browserWindow = typeof window !== 'undefined' ? window : undefined;\n          var browserGlobal = browserWindow || {};\n          var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n          var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n          // test for web worker but not in IE10\n          var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n          // node\n          function useNextTick() {\n            // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n            // see https://github.com/cujojs/when/issues/410 for details\n            return function () {\n              return process.nextTick(flush);\n            };\n          }\n\n          // vertx\n          function useVertxTimer() {\n            if (typeof vertxNext !== 'undefined') {\n              return function () {\n                vertxNext(flush);\n              };\n            }\n\n            return useSetTimeout();\n          }\n\n          function useMutationObserver() {\n            var iterations = 0;\n            var observer = new BrowserMutationObserver(flush);\n            var node = document.createTextNode('');\n            observer.observe(node, { characterData: true });\n\n            return function () {\n              node.data = iterations = ++iterations % 2;\n            };\n          }\n\n          // web worker\n          function useMessageChannel() {\n            var channel = new MessageChannel();\n            channel.port1.onmessage = flush;\n            return function () {\n              return channel.port2.postMessage(0);\n            };\n          }\n\n          function useSetTimeout() {\n            // Store setTimeout reference so es6-promise will be unaffected by\n            // other code modifying setTimeout (like sinon.useFakeTimers())\n            var globalSetTimeout = setTimeout;\n            return function () {\n              return globalSetTimeout(flush, 1);\n            };\n          }\n\n          var queue = new Array(1000);\n          function flush() {\n            for (var i = 0; i < len; i += 2) {\n              var callback = queue[i];\n              var arg = queue[i + 1];\n\n              callback(arg);\n\n              queue[i] = undefined;\n              queue[i + 1] = undefined;\n            }\n\n            len = 0;\n          }\n\n          function attemptVertx() {\n            try {\n              var r = require;\n              var vertx = r('vertx');\n              vertxNext = vertx.runOnLoop || vertx.runOnContext;\n              return useVertxTimer();\n            } catch (e) {\n              return useSetTimeout();\n            }\n          }\n\n          var scheduleFlush = undefined;\n          // Decide what async method to use to triggering processing of queued callbacks:\n          if (isNode) {\n            scheduleFlush = useNextTick();\n          } else if (BrowserMutationObserver) {\n            scheduleFlush = useMutationObserver();\n          } else if (isWorker) {\n            scheduleFlush = useMessageChannel();\n          } else if (browserWindow === undefined && typeof require === 'function') {\n            scheduleFlush = attemptVertx();\n          } else {\n            scheduleFlush = useSetTimeout();\n          }\n\n          function then(onFulfillment, onRejection) {\n            var _arguments = arguments;\n\n            var parent = this;\n\n            var child = new this.constructor(noop);\n\n            if (child[PROMISE_ID] === undefined) {\n              makePromise(child);\n            }\n\n            var _state = parent._state;\n\n            if (_state) {\n              (function () {\n                var callback = _arguments[_state - 1];\n                asap(function () {\n                  return invokeCallback(_state, child, callback, parent._result);\n                });\n              })();\n            } else {\n              subscribe(parent, child, onFulfillment, onRejection);\n            }\n\n            return child;\n          }\n\n          /**\n              `Promise.resolve` returns a promise that will become resolved with the\n              passed `value`. It is shorthand for the following:\n            \n              ```javascript\n              let promise = new Promise(function(resolve, reject){\n                resolve(1);\n              });\n            \n              promise.then(function(value){\n                // value === 1\n              });\n              ```\n            \n              Instead of writing the above, your code now simply becomes the following:\n            \n              ```javascript\n              let promise = Promise.resolve(1);\n            \n              promise.then(function(value){\n                // value === 1\n              });\n              ```\n            \n              @method resolve\n              @static\n              @param {Any} value value that the returned promise will be resolved with\n              Useful for tooling.\n              @return {Promise} a promise that will become fulfilled with the given\n              `value`\n            */\n          function resolve(object) {\n            /*jshint validthis:true */\n            var Constructor = this;\n\n            if (object && (typeof object === \"undefined\" ? \"undefined\" : _typeof2(object)) === 'object' && object.constructor === Constructor) {\n              return object;\n            }\n\n            var promise = new Constructor(noop);\n            _resolve(promise, object);\n            return promise;\n          }\n\n          var PROMISE_ID = Math.random().toString(36).substring(16);\n\n          function noop() {}\n\n          var PENDING = void 0;\n          var FULFILLED = 1;\n          var REJECTED = 2;\n\n          var GET_THEN_ERROR = new ErrorObject();\n\n          function selfFulfillment() {\n            return new TypeError(\"You cannot resolve a promise with itself\");\n          }\n\n          function cannotReturnOwn() {\n            return new TypeError('A promises callback cannot return that same promise.');\n          }\n\n          function getThen(promise) {\n            try {\n              return promise.then;\n            } catch (error) {\n              GET_THEN_ERROR.error = error;\n              return GET_THEN_ERROR;\n            }\n          }\n\n          function tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n            try {\n              then.call(value, fulfillmentHandler, rejectionHandler);\n            } catch (e) {\n              return e;\n            }\n          }\n\n          function handleForeignThenable(promise, thenable, then) {\n            asap(function (promise) {\n              var sealed = false;\n              var error = tryThen(then, thenable, function (value) {\n                if (sealed) {\n                  return;\n                }\n                sealed = true;\n                if (thenable !== value) {\n                  _resolve(promise, value);\n                } else {\n                  fulfill(promise, value);\n                }\n              }, function (reason) {\n                if (sealed) {\n                  return;\n                }\n                sealed = true;\n\n                _reject(promise, reason);\n              }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n              if (!sealed && error) {\n                sealed = true;\n                _reject(promise, error);\n              }\n            }, promise);\n          }\n\n          function handleOwnThenable(promise, thenable) {\n            if (thenable._state === FULFILLED) {\n              fulfill(promise, thenable._result);\n            } else if (thenable._state === REJECTED) {\n              _reject(promise, thenable._result);\n            } else {\n              subscribe(thenable, undefined, function (value) {\n                return _resolve(promise, value);\n              }, function (reason) {\n                return _reject(promise, reason);\n              });\n            }\n          }\n\n          function handleMaybeThenable(promise, maybeThenable, then$$) {\n            if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {\n              handleOwnThenable(promise, maybeThenable);\n            } else {\n              if (then$$ === GET_THEN_ERROR) {\n                _reject(promise, GET_THEN_ERROR.error);\n              } else if (then$$ === undefined) {\n                fulfill(promise, maybeThenable);\n              } else if (isFunction(then$$)) {\n                handleForeignThenable(promise, maybeThenable, then$$);\n              } else {\n                fulfill(promise, maybeThenable);\n              }\n            }\n          }\n\n          function _resolve(promise, value) {\n            if (promise === value) {\n              _reject(promise, selfFulfillment());\n            } else if (objectOrFunction(value)) {\n              handleMaybeThenable(promise, value, getThen(value));\n            } else {\n              fulfill(promise, value);\n            }\n          }\n\n          function publishRejection(promise) {\n            if (promise._onerror) {\n              promise._onerror(promise._result);\n            }\n\n            publish(promise);\n          }\n\n          function fulfill(promise, value) {\n            if (promise._state !== PENDING) {\n              return;\n            }\n\n            promise._result = value;\n            promise._state = FULFILLED;\n\n            if (promise._subscribers.length !== 0) {\n              asap(publish, promise);\n            }\n          }\n\n          function _reject(promise, reason) {\n            if (promise._state !== PENDING) {\n              return;\n            }\n            promise._state = REJECTED;\n            promise._result = reason;\n\n            asap(publishRejection, promise);\n          }\n\n          function subscribe(parent, child, onFulfillment, onRejection) {\n            var _subscribers = parent._subscribers;\n            var length = _subscribers.length;\n\n            parent._onerror = null;\n\n            _subscribers[length] = child;\n            _subscribers[length + FULFILLED] = onFulfillment;\n            _subscribers[length + REJECTED] = onRejection;\n\n            if (length === 0 && parent._state) {\n              asap(publish, parent);\n            }\n          }\n\n          function publish(promise) {\n            var subscribers = promise._subscribers;\n            var settled = promise._state;\n\n            if (subscribers.length === 0) {\n              return;\n            }\n\n            var child = undefined,\n            callback = undefined,\n            detail = promise._result;\n\n            for (var i = 0; i < subscribers.length; i += 3) {\n              child = subscribers[i];\n              callback = subscribers[i + settled];\n\n              if (child) {\n                invokeCallback(settled, child, callback, detail);\n              } else {\n                callback(detail);\n              }\n            }\n\n            promise._subscribers.length = 0;\n          }\n\n          function ErrorObject() {\n            this.error = null;\n          }\n\n          var TRY_CATCH_ERROR = new ErrorObject();\n\n          function tryCatch(callback, detail) {\n            try {\n              return callback(detail);\n            } catch (e) {\n              TRY_CATCH_ERROR.error = e;\n              return TRY_CATCH_ERROR;\n            }\n          }\n\n          function invokeCallback(settled, promise, callback, detail) {\n            var hasCallback = isFunction(callback),\n            value = undefined,\n            error = undefined,\n            succeeded = undefined,\n            failed = undefined;\n\n            if (hasCallback) {\n              value = tryCatch(callback, detail);\n\n              if (value === TRY_CATCH_ERROR) {\n                failed = true;\n                error = value.error;\n                value = null;\n              } else {\n                succeeded = true;\n              }\n\n              if (promise === value) {\n                _reject(promise, cannotReturnOwn());\n                return;\n              }\n            } else {\n              value = detail;\n              succeeded = true;\n            }\n\n            if (promise._state !== PENDING) {\n              // noop\n            } else if (hasCallback && succeeded) {\n              _resolve(promise, value);\n            } else if (failed) {\n              _reject(promise, error);\n            } else if (settled === FULFILLED) {\n              fulfill(promise, value);\n            } else if (settled === REJECTED) {\n              _reject(promise, value);\n            }\n          }\n\n          function initializePromise(promise, resolver) {\n            try {\n              resolver(function resolvePromise(value) {\n                _resolve(promise, value);\n              }, function rejectPromise(reason) {\n                _reject(promise, reason);\n              });\n            } catch (e) {\n              _reject(promise, e);\n            }\n          }\n\n          var id = 0;\n          function nextId() {\n            return id++;\n          }\n\n          function makePromise(promise) {\n            promise[PROMISE_ID] = id++;\n            promise._state = undefined;\n            promise._result = undefined;\n            promise._subscribers = [];\n          }\n\n          function Enumerator(Constructor, input) {\n            this._instanceConstructor = Constructor;\n            this.promise = new Constructor(noop);\n\n            if (!this.promise[PROMISE_ID]) {\n              makePromise(this.promise);\n            }\n\n            if (isArray(input)) {\n              this._input = input;\n              this.length = input.length;\n              this._remaining = input.length;\n\n              this._result = new Array(this.length);\n\n              if (this.length === 0) {\n                fulfill(this.promise, this._result);\n              } else {\n                this.length = this.length || 0;\n                this._enumerate();\n                if (this._remaining === 0) {\n                  fulfill(this.promise, this._result);\n                }\n              }\n            } else {\n              _reject(this.promise, validationError());\n            }\n          }\n\n          function validationError() {\n            return new Error('Array Methods must be provided an Array');\n          };\n\n          Enumerator.prototype._enumerate = function () {\n            var length = this.length;\n            var _input = this._input;\n\n            for (var i = 0; this._state === PENDING && i < length; i++) {\n              this._eachEntry(_input[i], i);\n            }\n          };\n\n          Enumerator.prototype._eachEntry = function (entry, i) {\n            var c = this._instanceConstructor;\n            var resolve$$ = c.resolve;\n\n            if (resolve$$ === resolve) {\n              var _then = getThen(entry);\n\n              if (_then === then && entry._state !== PENDING) {\n                this._settledAt(entry._state, i, entry._result);\n              } else if (typeof _then !== 'function') {\n                this._remaining--;\n                this._result[i] = entry;\n              } else if (c === Promise) {\n                var promise = new c(noop);\n                handleMaybeThenable(promise, entry, _then);\n                this._willSettleAt(promise, i);\n              } else {\n                this._willSettleAt(new c(function (resolve$$) {\n                  return resolve$$(entry);\n                }), i);\n              }\n            } else {\n              this._willSettleAt(resolve$$(entry), i);\n            }\n          };\n\n          Enumerator.prototype._settledAt = function (state, i, value) {\n            var promise = this.promise;\n\n            if (promise._state === PENDING) {\n              this._remaining--;\n\n              if (state === REJECTED) {\n                _reject(promise, value);\n              } else {\n                this._result[i] = value;\n              }\n            }\n\n            if (this._remaining === 0) {\n              fulfill(promise, this._result);\n            }\n          };\n\n          Enumerator.prototype._willSettleAt = function (promise, i) {\n            var enumerator = this;\n\n            subscribe(promise, undefined, function (value) {\n              return enumerator._settledAt(FULFILLED, i, value);\n            }, function (reason) {\n              return enumerator._settledAt(REJECTED, i, reason);\n            });\n          };\n\n          /**\n               `Promise.all` accepts an array of promises, and returns a new promise which\n               is fulfilled with an array of fulfillment values for the passed promises, or\n               rejected with the reason of the first passed promise to be rejected. It casts all\n               elements of the passed iterable to promises as it runs this algorithm.\n             \n               Example:\n             \n               ```javascript\n               let promise1 = resolve(1);\n               let promise2 = resolve(2);\n               let promise3 = resolve(3);\n               let promises = [ promise1, promise2, promise3 ];\n             \n               Promise.all(promises).then(function(array){\n                 // The array here would be [ 1, 2, 3 ];\n               });\n               ```\n             \n               If any of the `promises` given to `all` are rejected, the first promise\n               that is rejected will be given as an argument to the returned promises's\n               rejection handler. For example:\n             \n               Example:\n             \n               ```javascript\n               let promise1 = resolve(1);\n               let promise2 = reject(new Error(\"2\"));\n               let promise3 = reject(new Error(\"3\"));\n               let promises = [ promise1, promise2, promise3 ];\n             \n               Promise.all(promises).then(function(array){\n                 // Code here never runs because there are rejected promises!\n               }, function(error) {\n                 // error.message === \"2\"\n               });\n               ```\n             \n               @method all\n               @static\n               @param {Array} entries array of promises\n               @param {String} label optional string for labeling the promise.\n               Useful for tooling.\n               @return {Promise} promise that is fulfilled when all `promises` have been\n               fulfilled, or rejected if any of them become rejected.\n               @static\n             */\n          function all(entries) {\n            return new Enumerator(this, entries).promise;\n          }\n\n          /**\n              `Promise.race` returns a new promise which is settled in the same way as the\n              first passed promise to settle.\n            \n              Example:\n            \n              ```javascript\n              let promise1 = new Promise(function(resolve, reject){\n                setTimeout(function(){\n                  resolve('promise 1');\n                }, 200);\n              });\n            \n              let promise2 = new Promise(function(resolve, reject){\n                setTimeout(function(){\n                  resolve('promise 2');\n                }, 100);\n              });\n            \n              Promise.race([promise1, promise2]).then(function(result){\n                // result === 'promise 2' because it was resolved before promise1\n                // was resolved.\n              });\n              ```\n            \n              `Promise.race` is deterministic in that only the state of the first\n              settled promise matters. For example, even if other promises given to the\n              `promises` array argument are resolved, but the first settled promise has\n              become rejected before the other promises became fulfilled, the returned\n              promise will become rejected:\n            \n              ```javascript\n              let promise1 = new Promise(function(resolve, reject){\n                setTimeout(function(){\n                  resolve('promise 1');\n                }, 200);\n              });\n            \n              let promise2 = new Promise(function(resolve, reject){\n                setTimeout(function(){\n                  reject(new Error('promise 2'));\n                }, 100);\n              });\n            \n              Promise.race([promise1, promise2]).then(function(result){\n                // Code here never runs\n              }, function(reason){\n                // reason.message === 'promise 2' because promise 2 became rejected before\n                // promise 1 became fulfilled\n              });\n              ```\n            \n              An example real-world use case is implementing timeouts:\n            \n              ```javascript\n              Promise.race([ajax('foo.json'), timeout(5000)])\n              ```\n            \n              @method race\n              @static\n              @param {Array} promises array of promises to observe\n              Useful for tooling.\n              @return {Promise} a promise which settles in the same way as the first passed\n              promise to settle.\n            */\n          function race(entries) {\n            /*jshint validthis:true */\n            var Constructor = this;\n\n            if (!isArray(entries)) {\n              return new Constructor(function (_, reject) {\n                return reject(new TypeError('You must pass an array to race.'));\n              });\n            } else {\n              return new Constructor(function (resolve, reject) {\n                var length = entries.length;\n                for (var i = 0; i < length; i++) {\n                  Constructor.resolve(entries[i]).then(resolve, reject);\n                }\n              });\n            }\n          }\n\n          /**\n              `Promise.reject` returns a promise rejected with the passed `reason`.\n              It is shorthand for the following:\n            \n              ```javascript\n              let promise = new Promise(function(resolve, reject){\n                reject(new Error('WHOOPS'));\n              });\n            \n              promise.then(function(value){\n                // Code here doesn't run because the promise is rejected!\n              }, function(reason){\n                // reason.message === 'WHOOPS'\n              });\n              ```\n            \n              Instead of writing the above, your code now simply becomes the following:\n            \n              ```javascript\n              let promise = Promise.reject(new Error('WHOOPS'));\n            \n              promise.then(function(value){\n                // Code here doesn't run because the promise is rejected!\n              }, function(reason){\n                // reason.message === 'WHOOPS'\n              });\n              ```\n            \n              @method reject\n              @static\n              @param {Any} reason value that the returned promise will be rejected with.\n              Useful for tooling.\n              @return {Promise} a promise rejected with the given `reason`.\n            */\n          function reject(reason) {\n            /*jshint validthis:true */\n            var Constructor = this;\n            var promise = new Constructor(noop);\n            _reject(promise, reason);\n            return promise;\n          }\n\n          function needsResolver() {\n            throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n          }\n\n          function needsNew() {\n            throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n          }\n\n          /**\n              Promise objects represent the eventual result of an asynchronous operation. The\n              primary way of interacting with a promise is through its `then` method, which\n              registers callbacks to receive either a promise's eventual value or the reason\n              why the promise cannot be fulfilled.\n            \n              Terminology\n              -----------\n            \n              - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n              - `thenable` is an object or function that defines a `then` method.\n              - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n              - `exception` is a value that is thrown using the throw statement.\n              - `reason` is a value that indicates why a promise was rejected.\n              - `settled` the final resting state of a promise, fulfilled or rejected.\n            \n              A promise can be in one of three states: pending, fulfilled, or rejected.\n            \n              Promises that are fulfilled have a fulfillment value and are in the fulfilled\n              state.  Promises that are rejected have a rejection reason and are in the\n              rejected state.  A fulfillment value is never a thenable.\n            \n              Promises can also be said to *resolve* a value.  If this value is also a\n              promise, then the original promise's settled state will match the value's\n              settled state.  So a promise that *resolves* a promise that rejects will\n              itself reject, and a promise that *resolves* a promise that fulfills will\n              itself fulfill.\n            \n            \n              Basic Usage:\n              ------------\n            \n              ```js\n              let promise = new Promise(function(resolve, reject) {\n                // on success\n                resolve(value);\n            \n                // on failure\n                reject(reason);\n              });\n            \n              promise.then(function(value) {\n                // on fulfillment\n              }, function(reason) {\n                // on rejection\n              });\n              ```\n            \n              Advanced Usage:\n              ---------------\n            \n              Promises shine when abstracting away asynchronous interactions such as\n              `XMLHttpRequest`s.\n            \n              ```js\n              function getJSON(url) {\n                return new Promise(function(resolve, reject){\n                  let xhr = new XMLHttpRequest();\n            \n                  xhr.open('GET', url);\n                  xhr.onreadystatechange = handler;\n                  xhr.responseType = 'json';\n                  xhr.setRequestHeader('Accept', 'application/json');\n                  xhr.send();\n            \n                  function handler() {\n                    if (this.readyState === this.DONE) {\n                      if (this.status === 200) {\n                        resolve(this.response);\n                      } else {\n                        reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n                      }\n                    }\n                  };\n                });\n              }\n            \n              getJSON('/posts.json').then(function(json) {\n                // on fulfillment\n              }, function(reason) {\n                // on rejection\n              });\n              ```\n            \n              Unlike callbacks, promises are great composable primitives.\n            \n              ```js\n              Promise.all([\n                getJSON('/posts'),\n                getJSON('/comments')\n              ]).then(function(values){\n                values[0] // => postsJSON\n                values[1] // => commentsJSON\n            \n                return values;\n              });\n              ```\n            \n              @class Promise\n              @param {function} resolver\n              Useful for tooling.\n              @constructor\n            */\n          function Promise(resolver) {\n            this[PROMISE_ID] = nextId();\n            this._result = this._state = undefined;\n            this._subscribers = [];\n\n            if (noop !== resolver) {\n              typeof resolver !== 'function' && needsResolver();\n              this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n            }\n          }\n\n          Promise.all = all;\n          Promise.race = race;\n          Promise.resolve = resolve;\n          Promise.reject = reject;\n          Promise._setScheduler = setScheduler;\n          Promise._setAsap = setAsap;\n          Promise._asap = asap;\n\n          Promise.prototype = {\n            constructor: Promise,\n\n            /**\n                                    The primary way of interacting with a promise is through its `then` method,\n                                    which registers callbacks to receive either a promise's eventual value or the\n                                    reason why the promise cannot be fulfilled.\n                                  \n                                    ```js\n                                    findUser().then(function(user){\n                                      // user is available\n                                    }, function(reason){\n                                      // user is unavailable, and you are given the reason why\n                                    });\n                                    ```\n                                  \n                                    Chaining\n                                    --------\n                                  \n                                    The return value of `then` is itself a promise.  This second, 'downstream'\n                                    promise is resolved with the return value of the first promise's fulfillment\n                                    or rejection handler, or rejected if the handler throws an exception.\n                                  \n                                    ```js\n                                    findUser().then(function (user) {\n                                      return user.name;\n                                    }, function (reason) {\n                                      return 'default name';\n                                    }).then(function (userName) {\n                                      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n                                      // will be `'default name'`\n                                    });\n                                  \n                                    findUser().then(function (user) {\n                                      throw new Error('Found user, but still unhappy');\n                                    }, function (reason) {\n                                      throw new Error('`findUser` rejected and we're unhappy');\n                                    }).then(function (value) {\n                                      // never reached\n                                    }, function (reason) {\n                                      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n                                      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n                                    });\n                                    ```\n                                    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n                                  \n                                    ```js\n                                    findUser().then(function (user) {\n                                      throw new PedagogicalException('Upstream error');\n                                    }).then(function (value) {\n                                      // never reached\n                                    }).then(function (value) {\n                                      // never reached\n                                    }, function (reason) {\n                                      // The `PedgagocialException` is propagated all the way down to here\n                                    });\n                                    ```\n                                  \n                                    Assimilation\n                                    ------------\n                                  \n                                    Sometimes the value you want to propagate to a downstream promise can only be\n                                    retrieved asynchronously. This can be achieved by returning a promise in the\n                                    fulfillment or rejection handler. The downstream promise will then be pending\n                                    until the returned promise is settled. This is called *assimilation*.\n                                  \n                                    ```js\n                                    findUser().then(function (user) {\n                                      return findCommentsByAuthor(user);\n                                    }).then(function (comments) {\n                                      // The user's comments are now available\n                                    });\n                                    ```\n                                  \n                                    If the assimliated promise rejects, then the downstream promise will also reject.\n                                  \n                                    ```js\n                                    findUser().then(function (user) {\n                                      return findCommentsByAuthor(user);\n                                    }).then(function (comments) {\n                                      // If `findCommentsByAuthor` fulfills, we'll have the value here\n                                    }, function (reason) {\n                                      // If `findCommentsByAuthor` rejects, we'll have the reason here\n                                    });\n                                    ```\n                                  \n                                    Simple Example\n                                    --------------\n                                  \n                                    Synchronous Example\n                                  \n                                    ```javascript\n                                    let result;\n                                  \n                                    try {\n                                      result = findResult();\n                                      // success\n                                    } catch(reason) {\n                                      // failure\n                                    }\n                                    ```\n                                  \n                                    Errback Example\n                                  \n                                    ```js\n                                    findResult(function(result, err){\n                                      if (err) {\n                                        // failure\n                                      } else {\n                                        // success\n                                      }\n                                    });\n                                    ```\n                                  \n                                    Promise Example;\n                                  \n                                    ```javascript\n                                    findResult().then(function(result){\n                                      // success\n                                    }, function(reason){\n                                      // failure\n                                    });\n                                    ```\n                                  \n                                    Advanced Example\n                                    --------------\n                                  \n                                    Synchronous Example\n                                  \n                                    ```javascript\n                                    let author, books;\n                                  \n                                    try {\n                                      author = findAuthor();\n                                      books  = findBooksByAuthor(author);\n                                      // success\n                                    } catch(reason) {\n                                      // failure\n                                    }\n                                    ```\n                                  \n                                    Errback Example\n                                  \n                                    ```js\n                                  \n                                    function foundBooks(books) {\n                                  \n                                    }\n                                  \n                                    function failure(reason) {\n                                  \n                                    }\n                                  \n                                    findAuthor(function(author, err){\n                                      if (err) {\n                                        failure(err);\n                                        // failure\n                                      } else {\n                                        try {\n                                          findBoooksByAuthor(author, function(books, err) {\n                                            if (err) {\n                                              failure(err);\n                                            } else {\n                                              try {\n                                                foundBooks(books);\n                                              } catch(reason) {\n                                                failure(reason);\n                                              }\n                                            }\n                                          });\n                                        } catch(error) {\n                                          failure(err);\n                                        }\n                                        // success\n                                      }\n                                    });\n                                    ```\n                                  \n                                    Promise Example;\n                                  \n                                    ```javascript\n                                    findAuthor().\n                                      then(findBooksByAuthor).\n                                      then(function(books){\n                                        // found books\n                                    }).catch(function(reason){\n                                      // something went wrong\n                                    });\n                                    ```\n                                  \n                                    @method then\n                                    @param {Function} onFulfilled\n                                    @param {Function} onRejected\n                                    Useful for tooling.\n                                    @return {Promise}\n                                  */\n            then: then,\n\n            /**\n                          `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n                          as the catch block of a try/catch statement.\n                        \n                          ```js\n                          function findAuthor(){\n                            throw new Error('couldn't find that author');\n                          }\n                        \n                          // synchronous\n                          try {\n                            findAuthor();\n                          } catch(reason) {\n                            // something went wrong\n                          }\n                        \n                          // async with promises\n                          findAuthor().catch(function(reason){\n                            // something went wrong\n                          });\n                          ```\n                        \n                          @method catch\n                          @param {Function} onRejection\n                          Useful for tooling.\n                          @return {Promise}\n                        */\n            'catch': function _catch(onRejection) {\n              return this.then(null, onRejection);\n            } };\n\n\n          function polyfill() {\n            var local = undefined;\n\n            if (typeof global !== 'undefined') {\n              local = global;\n            } else if (typeof self !== 'undefined') {\n              local = self;\n            } else {\n              try {\n                local = Function('return this')();\n              } catch (e) {\n                throw new Error('polyfill failed because global object is unavailable in this environment');\n              }\n            }\n\n            var P = local.Promise;\n\n            if (P) {\n              var promiseToString = null;\n              try {\n                promiseToString = Object.prototype.toString.call(P.resolve());\n              } catch (e) {\n                // silently ignored\n              }\n\n              if (promiseToString === '[object Promise]' && !P.cast) {\n                return;\n              }\n            }\n\n            local.Promise = Promise;\n          }\n\n          // Strange compat..\n          Promise.polyfill = polyfill;\n          Promise.Promise = Promise;\n\n          return Promise;\n\n        });\n\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, { \"_process\": 65 }], 5: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _handlebarsRuntime = require('./handlebars.runtime');\n\n      var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);\n\n      // Compiler imports\n\n      var _handlebarsCompilerAst = require('./handlebars/compiler/ast');\n\n      var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);\n\n      var _handlebarsCompilerBase = require('./handlebars/compiler/base');\n\n      var _handlebarsCompilerCompiler = require('./handlebars/compiler/compiler');\n\n      var _handlebarsCompilerJavascriptCompiler = require('./handlebars/compiler/javascript-compiler');\n\n      var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);\n\n      var _handlebarsCompilerVisitor = require('./handlebars/compiler/visitor');\n\n      var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);\n\n      var _handlebarsNoConflict = require('./handlebars/no-conflict');\n\n      var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);\n\n      var _create = _handlebarsRuntime2['default'].create;\n      function create() {\n        var hb = _create();\n\n        hb.compile = function (input, options) {\n          return _handlebarsCompilerCompiler.compile(input, options, hb);\n        };\n        hb.precompile = function (input, options) {\n          return _handlebarsCompilerCompiler.precompile(input, options, hb);\n        };\n\n        hb.AST = _handlebarsCompilerAst2['default'];\n        hb.Compiler = _handlebarsCompilerCompiler.Compiler;\n        hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];\n        hb.Parser = _handlebarsCompilerBase.parser;\n        hb.parse = _handlebarsCompilerBase.parse;\n\n        return hb;\n      }\n\n      var inst = create();\n      inst.create = create;\n\n      _handlebarsNoConflict2['default'](inst);\n\n      inst.Visitor = _handlebarsCompilerVisitor2['default'];\n\n      inst['default'] = inst;\n\n      exports['default'] = inst;\n      module.exports = exports['default'];\n\n\n    }, { \"./handlebars.runtime\": 6, \"./handlebars/compiler/ast\": 8, \"./handlebars/compiler/base\": 9, \"./handlebars/compiler/compiler\": 11, \"./handlebars/compiler/javascript-compiler\": 13, \"./handlebars/compiler/visitor\": 16, \"./handlebars/no-conflict\": 30 }], 6: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      // istanbul ignore next\n\n      function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj['default'] = obj;return newObj;}}\n\n      var _handlebarsBase = require('./handlebars/base');\n\n      var base = _interopRequireWildcard(_handlebarsBase);\n\n      // Each of these augment the Handlebars object. No need to setup here.\n      // (This is done to easily share code between commonjs and browse envs)\n\n      var _handlebarsSafeString = require('./handlebars/safe-string');\n\n      var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);\n\n      var _handlebarsException = require('./handlebars/exception');\n\n      var _handlebarsException2 = _interopRequireDefault(_handlebarsException);\n\n      var _handlebarsUtils = require('./handlebars/utils');\n\n      var Utils = _interopRequireWildcard(_handlebarsUtils);\n\n      var _handlebarsRuntime = require('./handlebars/runtime');\n\n      var runtime = _interopRequireWildcard(_handlebarsRuntime);\n\n      var _handlebarsNoConflict = require('./handlebars/no-conflict');\n\n      var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);\n\n      // For compatibility and usage outside of module systems, make the Handlebars object a namespace\n      function create() {\n        var hb = new base.HandlebarsEnvironment();\n\n        Utils.extend(hb, base);\n        hb.SafeString = _handlebarsSafeString2['default'];\n        hb.Exception = _handlebarsException2['default'];\n        hb.Utils = Utils;\n        hb.escapeExpression = Utils.escapeExpression;\n\n        hb.VM = runtime;\n        hb.template = function (spec) {\n          return runtime.template(spec, hb);\n        };\n\n        return hb;\n      }\n\n      var inst = create();\n      inst.create = create;\n\n      _handlebarsNoConflict2['default'](inst);\n\n      inst['default'] = inst;\n\n      exports['default'] = inst;\n      module.exports = exports['default'];\n\n\n    }, { \"./handlebars/base\": 7, \"./handlebars/exception\": 20, \"./handlebars/no-conflict\": 30, \"./handlebars/runtime\": 31, \"./handlebars/safe-string\": 32, \"./handlebars/utils\": 33 }], 7: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.HandlebarsEnvironment = HandlebarsEnvironment;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _utils = require('./utils');\n\n      var _exception = require('./exception');\n\n      var _exception2 = _interopRequireDefault(_exception);\n\n      var _helpers = require('./helpers');\n\n      var _decorators = require('./decorators');\n\n      var _logger = require('./logger');\n\n      var _logger2 = _interopRequireDefault(_logger);\n\n      var VERSION = '4.0.5';\n      exports.VERSION = VERSION;\n      var COMPILER_REVISION = 7;\n\n      exports.COMPILER_REVISION = COMPILER_REVISION;\n      var REVISION_CHANGES = {\n        1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n        2: '== 1.0.0-rc.3',\n        3: '== 1.0.0-rc.4',\n        4: '== 1.x.x',\n        5: '== 2.0.0-alpha.x',\n        6: '>= 2.0.0-beta.1',\n        7: '>= 4.0.0' };\n\n\n      exports.REVISION_CHANGES = REVISION_CHANGES;\n      var objectType = '[object Object]';\n\n      function HandlebarsEnvironment(helpers, partials, decorators) {\n        this.helpers = helpers || {};\n        this.partials = partials || {};\n        this.decorators = decorators || {};\n\n        _helpers.registerDefaultHelpers(this);\n        _decorators.registerDefaultDecorators(this);\n      }\n\n      HandlebarsEnvironment.prototype = {\n        constructor: HandlebarsEnvironment,\n\n        logger: _logger2['default'],\n        log: _logger2['default'].log,\n\n        registerHelper: function registerHelper(name, fn) {\n          if (_utils.toString.call(name) === objectType) {\n            if (fn) {\n              throw new _exception2['default']('Arg not supported with multiple helpers');\n            }\n            _utils.extend(this.helpers, name);\n          } else {\n            this.helpers[name] = fn;\n          }\n        },\n        unregisterHelper: function unregisterHelper(name) {\n          delete this.helpers[name];\n        },\n\n        registerPartial: function registerPartial(name, partial) {\n          if (_utils.toString.call(name) === objectType) {\n            _utils.extend(this.partials, name);\n          } else {\n            if (typeof partial === 'undefined') {\n              throw new _exception2['default']('Attempting to register a partial called \"' + name + '\" as undefined');\n            }\n            this.partials[name] = partial;\n          }\n        },\n        unregisterPartial: function unregisterPartial(name) {\n          delete this.partials[name];\n        },\n\n        registerDecorator: function registerDecorator(name, fn) {\n          if (_utils.toString.call(name) === objectType) {\n            if (fn) {\n              throw new _exception2['default']('Arg not supported with multiple decorators');\n            }\n            _utils.extend(this.decorators, name);\n          } else {\n            this.decorators[name] = fn;\n          }\n        },\n        unregisterDecorator: function unregisterDecorator(name) {\n          delete this.decorators[name];\n        } };\n\n\n      var log = _logger2['default'].log;\n\n      exports.log = log;\n      exports.createFrame = _utils.createFrame;\n      exports.logger = _logger2['default'];\n\n\n    }, { \"./decorators\": 18, \"./exception\": 20, \"./helpers\": 21, \"./logger\": 29, \"./utils\": 33 }], 8: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      var AST = {\n        // Public API used to evaluate derived attributes regarding AST nodes\n        helpers: {\n          // a mustache is definitely a helper if:\n          // * it is an eligible helper, and\n          // * it has at least one parameter or hash segment\n          helperExpression: function helperExpression(node) {\n            return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);\n          },\n\n          scopedId: function scopedId(path) {\n            return (/^\\.|this\\b/.test(path.original));\n\n          },\n\n          // an ID is simple if it only has one part, and that part is not\n          // `..` or `this`.\n          simpleId: function simpleId(path) {\n            return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;\n          } } };\n\n\n\n      // Must be exported as an object rather than the root of the module as the jison lexer\n      // must modify the object to operate properly.\n      exports['default'] = AST;\n      module.exports = exports['default'];\n\n\n    }, {}], 9: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.parse = parse;\n      // istanbul ignore next\n\n      function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj['default'] = obj;return newObj;}}\n\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _parser = require('./parser');\n\n      var _parser2 = _interopRequireDefault(_parser);\n\n      var _whitespaceControl = require('./whitespace-control');\n\n      var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);\n\n      var _helpers = require('./helpers');\n\n      var Helpers = _interopRequireWildcard(_helpers);\n\n      var _utils = require('../utils');\n\n      exports.parser = _parser2['default'];\n\n      var yy = {};\n      _utils.extend(yy, Helpers);\n\n      function parse(input, options) {\n        // Just return if an already-compiled AST was passed in.\n        if (input.type === 'Program') {\n          return input;\n        }\n\n        _parser2['default'].yy = yy;\n\n        // Altering the shared object here, but this is ok as parser is a sync operation\n        yy.locInfo = function (locInfo) {\n          return new yy.SourceLocation(options && options.srcName, locInfo);\n        };\n\n        var strip = new _whitespaceControl2['default'](options);\n        return strip.accept(_parser2['default'].parse(input));\n      }\n\n\n    }, { \"../utils\": 33, \"./helpers\": 12, \"./parser\": 14, \"./whitespace-control\": 17 }], 10: [function (require, module, exports) {\n      /* global define */\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _utils = require('../utils');\n\n      var SourceNode = undefined;\n\n      try {\n        /* istanbul ignore next */\n        if (typeof define !== 'function' || !define.amd) {\n          // We don't support this in AMD environments. For these environments, we asusme that\n          // they are running on the browser and thus have no need for the source-map library.\n          var SourceMap = require('source-map');\n          SourceNode = SourceMap.SourceNode;\n        }\n      } catch (err) {}\n      /* NOP */\n\n      /* istanbul ignore if: tested but not covered in istanbul due to dist build  */\n      if (!SourceNode) {\n        SourceNode = function SourceNode(line, column, srcFile, chunks) {\n          this.src = '';\n          if (chunks) {\n            this.add(chunks);\n          }\n        };\n        /* istanbul ignore next */\n        SourceNode.prototype = {\n          add: function add(chunks) {\n            if (_utils.isArray(chunks)) {\n              chunks = chunks.join('');\n            }\n            this.src += chunks;\n          },\n          prepend: function prepend(chunks) {\n            if (_utils.isArray(chunks)) {\n              chunks = chunks.join('');\n            }\n            this.src = chunks + this.src;\n          },\n          toStringWithSourceMap: function toStringWithSourceMap() {\n            return { code: this.toString() };\n          },\n          toString: function toString() {\n            return this.src;\n          } };\n\n      }\n\n      function castChunk(chunk, codeGen, loc) {\n        if (_utils.isArray(chunk)) {\n          var ret = [];\n\n          for (var i = 0, len = chunk.length; i < len; i++) {\n            ret.push(codeGen.wrap(chunk[i], loc));\n          }\n          return ret;\n        } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n          // Handle primitives that the SourceNode will throw up on\n          return chunk + '';\n        }\n        return chunk;\n      }\n\n      function CodeGen(srcFile) {\n        this.srcFile = srcFile;\n        this.source = [];\n      }\n\n      CodeGen.prototype = {\n        isEmpty: function isEmpty() {\n          return !this.source.length;\n        },\n        prepend: function prepend(source, loc) {\n          this.source.unshift(this.wrap(source, loc));\n        },\n        push: function push(source, loc) {\n          this.source.push(this.wrap(source, loc));\n        },\n\n        merge: function merge() {\n          var source = this.empty();\n          this.each(function (line) {\n            source.add(['  ', line, '\\n']);\n          });\n          return source;\n        },\n\n        each: function each(iter) {\n          for (var i = 0, len = this.source.length; i < len; i++) {\n            iter(this.source[i]);\n          }\n        },\n\n        empty: function empty() {\n          var loc = this.currentLocation || { start: {} };\n          return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n        },\n        wrap: function wrap(chunk) {\n          var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];\n\n          if (chunk instanceof SourceNode) {\n            return chunk;\n          }\n\n          chunk = castChunk(chunk, this, loc);\n\n          return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);\n        },\n\n        functionCall: function functionCall(fn, type, params) {\n          params = this.generateList(params);\n          return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n        },\n\n        quotedString: function quotedString(str) {\n          return '\"' + (str + '').replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\u2028/g, \"\\\\u2028\") // Per Ecma-262 7.3 + 7.8.4\n          .replace(/\\u2029/g, \"\\\\u2029\") + '\"';\n        },\n\n        objectLiteral: function objectLiteral(obj) {\n          var pairs = [];\n\n          for (var key in obj) {\n            if (obj.hasOwnProperty(key)) {\n              var value = castChunk(obj[key], this);\n              if (value !== 'undefined') {\n                pairs.push([this.quotedString(key), ':', value]);\n              }\n            }\n          }\n\n          var ret = this.generateList(pairs);\n          ret.prepend('{');\n          ret.add('}');\n          return ret;\n        },\n\n        generateList: function generateList(entries) {\n          var ret = this.empty();\n\n          for (var i = 0, len = entries.length; i < len; i++) {\n            if (i) {\n              ret.add(',');\n            }\n\n            ret.add(castChunk(entries[i], this));\n          }\n\n          return ret;\n        },\n\n        generateArray: function generateArray(entries) {\n          var ret = this.generateList(entries);\n          ret.prepend('[');\n          ret.add(']');\n\n          return ret;\n        } };\n\n\n      exports['default'] = CodeGen;\n      module.exports = exports['default'];\n\n\n    }, { \"../utils\": 33, \"source-map\": 46 }], 11: [function (require, module, exports) {\n      /* eslint-disable new-cap */\n\n      'use strict';\n\n      exports.__esModule = true;\n      exports.Compiler = Compiler;\n      exports.precompile = precompile;\n      exports.compile = compile;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _exception = require('../exception');\n\n      var _exception2 = _interopRequireDefault(_exception);\n\n      var _utils = require('../utils');\n\n      var _ast = require('./ast');\n\n      var _ast2 = _interopRequireDefault(_ast);\n\n      var slice = [].slice;\n\n      function Compiler() {}\n\n      // the foundHelper register will disambiguate helper lookup from finding a\n      // function in a context. This is necessary for mustache compatibility, which\n      // requires that context functions in blocks are evaluated by blockHelperMissing,\n      // and then proceed as if the resulting value was provided to blockHelperMissing.\n\n      Compiler.prototype = {\n        compiler: Compiler,\n\n        equals: function equals(other) {\n          var len = this.opcodes.length;\n          if (other.opcodes.length !== len) {\n            return false;\n          }\n\n          for (var i = 0; i < len; i++) {\n            var opcode = this.opcodes[i],\n            otherOpcode = other.opcodes[i];\n            if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {\n              return false;\n            }\n          }\n\n          // We know that length is the same between the two arrays because they are directly tied\n          // to the opcode behavior above.\n          len = this.children.length;\n          for (var i = 0; i < len; i++) {\n            if (!this.children[i].equals(other.children[i])) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n\n        guid: 0,\n\n        compile: function compile(program, options) {\n          this.sourceNode = [];\n          this.opcodes = [];\n          this.children = [];\n          this.options = options;\n          this.stringParams = options.stringParams;\n          this.trackIds = options.trackIds;\n\n          options.blockParams = options.blockParams || [];\n\n          // These changes will propagate to the other compiler components\n          var knownHelpers = options.knownHelpers;\n          options.knownHelpers = {\n            'helperMissing': true,\n            'blockHelperMissing': true,\n            'each': true,\n            'if': true,\n            'unless': true,\n            'with': true,\n            'log': true,\n            'lookup': true };\n\n          if (knownHelpers) {\n            for (var _name in knownHelpers) {\n              /* istanbul ignore else */\n              if (_name in knownHelpers) {\n                options.knownHelpers[_name] = knownHelpers[_name];\n              }\n            }\n          }\n\n          return this.accept(program);\n        },\n\n        compileProgram: function compileProgram(program) {\n          var childCompiler = new this.compiler(),\n          // eslint-disable-line new-cap\n          result = childCompiler.compile(program, this.options),\n          guid = this.guid++;\n\n          this.usePartial = this.usePartial || result.usePartial;\n\n          this.children[guid] = result;\n          this.useDepths = this.useDepths || result.useDepths;\n\n          return guid;\n        },\n\n        accept: function accept(node) {\n          /* istanbul ignore next: Sanity code */\n          if (!this[node.type]) {\n            throw new _exception2['default']('Unknown type: ' + node.type, node);\n          }\n\n          this.sourceNode.unshift(node);\n          var ret = this[node.type](node);\n          this.sourceNode.shift();\n          return ret;\n        },\n\n        Program: function Program(program) {\n          this.options.blockParams.unshift(program.blockParams);\n\n          var body = program.body,\n          bodyLength = body.length;\n          for (var i = 0; i < bodyLength; i++) {\n            this.accept(body[i]);\n          }\n\n          this.options.blockParams.shift();\n\n          this.isSimple = bodyLength === 1;\n          this.blockParams = program.blockParams ? program.blockParams.length : 0;\n\n          return this;\n        },\n\n        BlockStatement: function BlockStatement(block) {\n          transformLiteralToPath(block);\n\n          var program = block.program,\n          inverse = block.inverse;\n\n          program = program && this.compileProgram(program);\n          inverse = inverse && this.compileProgram(inverse);\n\n          var type = this.classifySexpr(block);\n\n          if (type === 'helper') {\n            this.helperSexpr(block, program, inverse);\n          } else if (type === 'simple') {\n            this.simpleSexpr(block);\n\n            // now that the simple mustache is resolved, we need to\n            // evaluate it by executing `blockHelperMissing`\n            this.opcode('pushProgram', program);\n            this.opcode('pushProgram', inverse);\n            this.opcode('emptyHash');\n            this.opcode('blockValue', block.path.original);\n          } else {\n            this.ambiguousSexpr(block, program, inverse);\n\n            // now that the simple mustache is resolved, we need to\n            // evaluate it by executing `blockHelperMissing`\n            this.opcode('pushProgram', program);\n            this.opcode('pushProgram', inverse);\n            this.opcode('emptyHash');\n            this.opcode('ambiguousBlockValue');\n          }\n\n          this.opcode('append');\n        },\n\n        DecoratorBlock: function DecoratorBlock(decorator) {\n          var program = decorator.program && this.compileProgram(decorator.program);\n          var params = this.setupFullMustacheParams(decorator, program, undefined),\n          path = decorator.path;\n\n          this.useDecorators = true;\n          this.opcode('registerDecorator', params.length, path.original);\n        },\n\n        PartialStatement: function PartialStatement(partial) {\n          this.usePartial = true;\n\n          var program = partial.program;\n          if (program) {\n            program = this.compileProgram(partial.program);\n          }\n\n          var params = partial.params;\n          if (params.length > 1) {\n            throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);\n          } else if (!params.length) {\n            if (this.options.explicitPartialContext) {\n              this.opcode('pushLiteral', 'undefined');\n            } else {\n              params.push({ type: 'PathExpression', parts: [], depth: 0 });\n            }\n          }\n\n          var partialName = partial.name.original,\n          isDynamic = partial.name.type === 'SubExpression';\n          if (isDynamic) {\n            this.accept(partial.name);\n          }\n\n          this.setupFullMustacheParams(partial, program, undefined, true);\n\n          var indent = partial.indent || '';\n          if (this.options.preventIndent && indent) {\n            this.opcode('appendContent', indent);\n            indent = '';\n          }\n\n          this.opcode('invokePartial', isDynamic, partialName, indent);\n          this.opcode('append');\n        },\n        PartialBlockStatement: function PartialBlockStatement(partialBlock) {\n          this.PartialStatement(partialBlock);\n        },\n\n        MustacheStatement: function MustacheStatement(mustache) {\n          this.SubExpression(mustache);\n\n          if (mustache.escaped && !this.options.noEscape) {\n            this.opcode('appendEscaped');\n          } else {\n            this.opcode('append');\n          }\n        },\n        Decorator: function Decorator(decorator) {\n          this.DecoratorBlock(decorator);\n        },\n\n        ContentStatement: function ContentStatement(content) {\n          if (content.value) {\n            this.opcode('appendContent', content.value);\n          }\n        },\n\n        CommentStatement: function CommentStatement() {},\n\n        SubExpression: function SubExpression(sexpr) {\n          transformLiteralToPath(sexpr);\n          var type = this.classifySexpr(sexpr);\n\n          if (type === 'simple') {\n            this.simpleSexpr(sexpr);\n          } else if (type === 'helper') {\n            this.helperSexpr(sexpr);\n          } else {\n            this.ambiguousSexpr(sexpr);\n          }\n        },\n        ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {\n          var path = sexpr.path,\n          name = path.parts[0],\n          isBlock = program != null || inverse != null;\n\n          this.opcode('getContext', path.depth);\n\n          this.opcode('pushProgram', program);\n          this.opcode('pushProgram', inverse);\n\n          path.strict = true;\n          this.accept(path);\n\n          this.opcode('invokeAmbiguous', name, isBlock);\n        },\n\n        simpleSexpr: function simpleSexpr(sexpr) {\n          var path = sexpr.path;\n          path.strict = true;\n          this.accept(path);\n          this.opcode('resolvePossibleLambda');\n        },\n\n        helperSexpr: function helperSexpr(sexpr, program, inverse) {\n          var params = this.setupFullMustacheParams(sexpr, program, inverse),\n          path = sexpr.path,\n          name = path.parts[0];\n\n          if (this.options.knownHelpers[name]) {\n            this.opcode('invokeKnownHelper', params.length, name);\n          } else if (this.options.knownHelpersOnly) {\n            throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);\n          } else {\n            path.strict = true;\n            path.falsy = true;\n\n            this.accept(path);\n            this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));\n          }\n        },\n\n        PathExpression: function PathExpression(path) {\n          this.addDepth(path.depth);\n          this.opcode('getContext', path.depth);\n\n          var name = path.parts[0],\n          scoped = _ast2['default'].helpers.scopedId(path),\n          blockParamId = !path.depth && !scoped && this.blockParamIndex(name);\n\n          if (blockParamId) {\n            this.opcode('lookupBlockParam', blockParamId, path.parts);\n          } else if (!name) {\n            // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`\n            this.opcode('pushContext');\n          } else if (path.data) {\n            this.options.data = true;\n            this.opcode('lookupData', path.depth, path.parts, path.strict);\n          } else {\n            this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);\n          }\n        },\n\n        StringLiteral: function StringLiteral(string) {\n          this.opcode('pushString', string.value);\n        },\n\n        NumberLiteral: function NumberLiteral(number) {\n          this.opcode('pushLiteral', number.value);\n        },\n\n        BooleanLiteral: function BooleanLiteral(bool) {\n          this.opcode('pushLiteral', bool.value);\n        },\n\n        UndefinedLiteral: function UndefinedLiteral() {\n          this.opcode('pushLiteral', 'undefined');\n        },\n\n        NullLiteral: function NullLiteral() {\n          this.opcode('pushLiteral', 'null');\n        },\n\n        Hash: function Hash(hash) {\n          var pairs = hash.pairs,\n          i = 0,\n          l = pairs.length;\n\n          this.opcode('pushHash');\n\n          for (; i < l; i++) {\n            this.pushParam(pairs[i].value);\n          }\n          while (i--) {\n            this.opcode('assignToHash', pairs[i].key);\n          }\n          this.opcode('popHash');\n        },\n\n        // HELPERS\n        opcode: function opcode(name) {\n          this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });\n        },\n\n        addDepth: function addDepth(depth) {\n          if (!depth) {\n            return;\n          }\n\n          this.useDepths = true;\n        },\n\n        classifySexpr: function classifySexpr(sexpr) {\n          var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);\n\n          var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);\n\n          // a mustache is an eligible helper if:\n          // * its id is simple (a single part, not `this` or `..`)\n          var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);\n\n          // if a mustache is an eligible helper but not a definite\n          // helper, it is ambiguous, and will be resolved in a later\n          // pass or at runtime.\n          var isEligible = !isBlockParam && (isHelper || isSimple);\n\n          // if ambiguous, we can possibly resolve the ambiguity now\n          // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.\n          if (isEligible && !isHelper) {\n            var _name2 = sexpr.path.parts[0],\n            options = this.options;\n\n            if (options.knownHelpers[_name2]) {\n              isHelper = true;\n            } else if (options.knownHelpersOnly) {\n              isEligible = false;\n            }\n          }\n\n          if (isHelper) {\n            return 'helper';\n          } else if (isEligible) {\n            return 'ambiguous';\n          } else {\n            return 'simple';\n          }\n        },\n\n        pushParams: function pushParams(params) {\n          for (var i = 0, l = params.length; i < l; i++) {\n            this.pushParam(params[i]);\n          }\n        },\n\n        pushParam: function pushParam(val) {\n          var value = val.value != null ? val.value : val.original || '';\n\n          if (this.stringParams) {\n            if (value.replace) {\n              value = value.replace(/^(\\.?\\.\\/)*/g, '').replace(/\\//g, '.');\n            }\n\n            if (val.depth) {\n              this.addDepth(val.depth);\n            }\n            this.opcode('getContext', val.depth || 0);\n            this.opcode('pushStringParam', value, val.type);\n\n            if (val.type === 'SubExpression') {\n              // SubExpressions get evaluated and passed in\n              // in string params mode.\n              this.accept(val);\n            }\n          } else {\n            if (this.trackIds) {\n              var blockParamIndex = undefined;\n              if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {\n                blockParamIndex = this.blockParamIndex(val.parts[0]);\n              }\n              if (blockParamIndex) {\n                var blockParamChild = val.parts.slice(1).join('.');\n                this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);\n              } else {\n                value = val.original || value;\n                if (value.replace) {\n                  value = value.replace(/^this(?:\\.|$)/, '').replace(/^\\.\\//, '').replace(/^\\.$/, '');\n                }\n\n                this.opcode('pushId', val.type, value);\n              }\n            }\n            this.accept(val);\n          }\n        },\n\n        setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {\n          var params = sexpr.params;\n          this.pushParams(params);\n\n          this.opcode('pushProgram', program);\n          this.opcode('pushProgram', inverse);\n\n          if (sexpr.hash) {\n            this.accept(sexpr.hash);\n          } else {\n            this.opcode('emptyHash', omitEmpty);\n          }\n\n          return params;\n        },\n\n        blockParamIndex: function blockParamIndex(name) {\n          for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {\n            var blockParams = this.options.blockParams[depth],\n            param = blockParams && _utils.indexOf(blockParams, name);\n            if (blockParams && param >= 0) {\n              return [depth, param];\n            }\n          }\n        } };\n\n\n      function precompile(input, options, env) {\n        if (input == null || typeof input !== 'string' && input.type !== 'Program') {\n          throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);\n        }\n\n        options = options || {};\n        if (!('data' in options)) {\n          options.data = true;\n        }\n        if (options.compat) {\n          options.useDepths = true;\n        }\n\n        var ast = env.parse(input, options),\n        environment = new env.Compiler().compile(ast, options);\n        return new env.JavaScriptCompiler().compile(environment, options);\n      }\n\n      function compile(input, options, env) {\n        if (options === undefined) options = {};\n\n        if (input == null || typeof input !== 'string' && input.type !== 'Program') {\n          throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);\n        }\n\n        if (!('data' in options)) {\n          options.data = true;\n        }\n        if (options.compat) {\n          options.useDepths = true;\n        }\n\n        var compiled = undefined;\n\n        function compileInput() {\n          var ast = env.parse(input, options),\n          environment = new env.Compiler().compile(ast, options),\n          templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);\n          return env.template(templateSpec);\n        }\n\n        // Template is only compiled on first use and cached after that point.\n        function ret(context, execOptions) {\n          if (!compiled) {\n            compiled = compileInput();\n          }\n          return compiled.call(this, context, execOptions);\n        }\n        ret._setup = function (setupOptions) {\n          if (!compiled) {\n            compiled = compileInput();\n          }\n          return compiled._setup(setupOptions);\n        };\n        ret._child = function (i, data, blockParams, depths) {\n          if (!compiled) {\n            compiled = compileInput();\n          }\n          return compiled._child(i, data, blockParams, depths);\n        };\n        return ret;\n      }\n\n      function argEquals(a, b) {\n        if (a === b) {\n          return true;\n        }\n\n        if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {\n          for (var i = 0; i < a.length; i++) {\n            if (!argEquals(a[i], b[i])) {\n              return false;\n            }\n          }\n          return true;\n        }\n      }\n\n      function transformLiteralToPath(sexpr) {\n        if (!sexpr.path.parts) {\n          var literal = sexpr.path;\n          // Casting to string here to make false and 0 literal values play nicely with the rest\n          // of the system.\n          sexpr.path = {\n            type: 'PathExpression',\n            data: false,\n            depth: 0,\n            parts: [literal.original + ''],\n            original: literal.original + '',\n            loc: literal.loc };\n\n        }\n      }\n\n\n    }, { \"../exception\": 20, \"../utils\": 33, \"./ast\": 8 }], 12: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.SourceLocation = SourceLocation;\n      exports.id = id;\n      exports.stripFlags = stripFlags;\n      exports.stripComment = stripComment;\n      exports.preparePath = preparePath;\n      exports.prepareMustache = prepareMustache;\n      exports.prepareRawBlock = prepareRawBlock;\n      exports.prepareBlock = prepareBlock;\n      exports.prepareProgram = prepareProgram;\n      exports.preparePartialBlock = preparePartialBlock;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _exception = require('../exception');\n\n      var _exception2 = _interopRequireDefault(_exception);\n\n      function validateClose(open, close) {\n        close = close.path ? close.path.original : close;\n\n        if (open.path.original !== close) {\n          var errorNode = { loc: open.path.loc };\n\n          throw new _exception2['default'](open.path.original + \" doesn't match \" + close, errorNode);\n        }\n      }\n\n      function SourceLocation(source, locInfo) {\n        this.source = source;\n        this.start = {\n          line: locInfo.first_line,\n          column: locInfo.first_column };\n\n        this.end = {\n          line: locInfo.last_line,\n          column: locInfo.last_column };\n\n      }\n\n      function id(token) {\n        if (/^\\[.*\\]$/.test(token)) {\n          return token.substr(1, token.length - 2);\n        } else {\n          return token;\n        }\n      }\n\n      function stripFlags(open, close) {\n        return {\n          open: open.charAt(2) === '~',\n          close: close.charAt(close.length - 3) === '~' };\n\n      }\n\n      function stripComment(comment) {\n        return comment.replace(/^\\{\\{~?\\!-?-?/, '').replace(/-?-?~?\\}\\}$/, '');\n      }\n\n      function preparePath(data, parts, loc) {\n        loc = this.locInfo(loc);\n\n        var original = data ? '@' : '',\n        dig = [],\n        depth = 0,\n        depthString = '';\n\n        for (var i = 0, l = parts.length; i < l; i++) {\n          var part = parts[i].part,\n\n          // If we have [] syntax then we do not treat path references as operators,\n          // i.e. foo.[this] resolves to approximately context.foo['this']\n          isLiteral = parts[i].original !== part;\n          original += (parts[i].separator || '') + part;\n\n          if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {\n            if (dig.length > 0) {\n              throw new _exception2['default']('Invalid path: ' + original, { loc: loc });\n            } else if (part === '..') {\n              depth++;\n              depthString += '../';\n            }\n          } else {\n            dig.push(part);\n          }\n        }\n\n        return {\n          type: 'PathExpression',\n          data: data,\n          depth: depth,\n          parts: dig,\n          original: original,\n          loc: loc };\n\n      }\n\n      function prepareMustache(path, params, hash, open, strip, locInfo) {\n        // Must use charAt to support IE pre-10\n        var escapeFlag = open.charAt(3) || open.charAt(2),\n        escaped = escapeFlag !== '{' && escapeFlag !== '&';\n\n        var decorator = /\\*/.test(open);\n        return {\n          type: decorator ? 'Decorator' : 'MustacheStatement',\n          path: path,\n          params: params,\n          hash: hash,\n          escaped: escaped,\n          strip: strip,\n          loc: this.locInfo(locInfo) };\n\n      }\n\n      function prepareRawBlock(openRawBlock, contents, close, locInfo) {\n        validateClose(openRawBlock, close);\n\n        locInfo = this.locInfo(locInfo);\n        var program = {\n          type: 'Program',\n          body: contents,\n          strip: {},\n          loc: locInfo };\n\n\n        return {\n          type: 'BlockStatement',\n          path: openRawBlock.path,\n          params: openRawBlock.params,\n          hash: openRawBlock.hash,\n          program: program,\n          openStrip: {},\n          inverseStrip: {},\n          closeStrip: {},\n          loc: locInfo };\n\n      }\n\n      function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {\n        if (close && close.path) {\n          validateClose(openBlock, close);\n        }\n\n        var decorator = /\\*/.test(openBlock.open);\n\n        program.blockParams = openBlock.blockParams;\n\n        var inverse = undefined,\n        inverseStrip = undefined;\n\n        if (inverseAndProgram) {\n          if (decorator) {\n            throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);\n          }\n\n          if (inverseAndProgram.chain) {\n            inverseAndProgram.program.body[0].closeStrip = close.strip;\n          }\n\n          inverseStrip = inverseAndProgram.strip;\n          inverse = inverseAndProgram.program;\n        }\n\n        if (inverted) {\n          inverted = inverse;\n          inverse = program;\n          program = inverted;\n        }\n\n        return {\n          type: decorator ? 'DecoratorBlock' : 'BlockStatement',\n          path: openBlock.path,\n          params: openBlock.params,\n          hash: openBlock.hash,\n          program: program,\n          inverse: inverse,\n          openStrip: openBlock.strip,\n          inverseStrip: inverseStrip,\n          closeStrip: close && close.strip,\n          loc: this.locInfo(locInfo) };\n\n      }\n\n      function prepareProgram(statements, loc) {\n        if (!loc && statements.length) {\n          var firstLoc = statements[0].loc,\n          lastLoc = statements[statements.length - 1].loc;\n\n          /* istanbul ignore else */\n          if (firstLoc && lastLoc) {\n            loc = {\n              source: firstLoc.source,\n              start: {\n                line: firstLoc.start.line,\n                column: firstLoc.start.column },\n\n              end: {\n                line: lastLoc.end.line,\n                column: lastLoc.end.column } };\n\n\n          }\n        }\n\n        return {\n          type: 'Program',\n          body: statements,\n          strip: {},\n          loc: loc };\n\n      }\n\n      function preparePartialBlock(open, program, close, locInfo) {\n        validateClose(open, close);\n\n        return {\n          type: 'PartialBlockStatement',\n          name: open.path,\n          params: open.params,\n          hash: open.hash,\n          program: program,\n          openStrip: open.strip,\n          closeStrip: close && close.strip,\n          loc: this.locInfo(locInfo) };\n\n      }\n\n\n    }, { \"../exception\": 20 }], 13: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _base = require('../base');\n\n      var _exception = require('../exception');\n\n      var _exception2 = _interopRequireDefault(_exception);\n\n      var _utils = require('../utils');\n\n      var _codeGen = require('./code-gen');\n\n      var _codeGen2 = _interopRequireDefault(_codeGen);\n\n      function Literal(value) {\n        this.value = value;\n      }\n\n      function JavaScriptCompiler() {}\n\n      JavaScriptCompiler.prototype = {\n        // PUBLIC API: You can override these methods in a subclass to provide\n        // alternative compiled forms for name lookup and buffering semantics\n        nameLookup: function nameLookup(parent, name /* , type*/) {\n          if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {\n            return [parent, '.', name];\n          } else {\n            return [parent, '[', JSON.stringify(name), ']'];\n          }\n        },\n        depthedLookup: function depthedLookup(name) {\n          return [this.aliasable('container.lookup'), '(depths, \"', name, '\")'];\n        },\n\n        compilerInfo: function compilerInfo() {\n          var revision = _base.COMPILER_REVISION,\n          versions = _base.REVISION_CHANGES[revision];\n          return [revision, versions];\n        },\n\n        appendToBuffer: function appendToBuffer(source, location, explicit) {\n          // Force a source as this simplifies the merge logic.\n          if (!_utils.isArray(source)) {\n            source = [source];\n          }\n          source = this.source.wrap(source, location);\n\n          if (this.environment.isSimple) {\n            return ['return ', source, ';'];\n          } else if (explicit) {\n            // This is a case where the buffer operation occurs as a child of another\n            // construct, generally braces. We have to explicitly output these buffer\n            // operations to ensure that the emitted code goes in the correct location.\n            return ['buffer += ', source, ';'];\n          } else {\n            source.appendToBuffer = true;\n            return source;\n          }\n        },\n\n        initializeBuffer: function initializeBuffer() {\n          return this.quotedString('');\n        },\n        // END PUBLIC API\n\n        compile: function compile(environment, options, context, asObject) {\n          this.environment = environment;\n          this.options = options;\n          this.stringParams = this.options.stringParams;\n          this.trackIds = this.options.trackIds;\n          this.precompile = !asObject;\n\n          this.name = this.environment.name;\n          this.isChild = !!context;\n          this.context = context || {\n            decorators: [],\n            programs: [],\n            environments: [] };\n\n\n          this.preamble();\n\n          this.stackSlot = 0;\n          this.stackVars = [];\n          this.aliases = {};\n          this.registers = { list: [] };\n          this.hashes = [];\n          this.compileStack = [];\n          this.inlineStack = [];\n          this.blockParams = [];\n\n          this.compileChildren(environment, options);\n\n          this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;\n          this.useBlockParams = this.useBlockParams || environment.useBlockParams;\n\n          var opcodes = environment.opcodes,\n          opcode = undefined,\n          firstLoc = undefined,\n          i = undefined,\n          l = undefined;\n\n          for (i = 0, l = opcodes.length; i < l; i++) {\n            opcode = opcodes[i];\n\n            this.source.currentLocation = opcode.loc;\n            firstLoc = firstLoc || opcode.loc;\n            this[opcode.opcode].apply(this, opcode.args);\n          }\n\n          // Flush any trailing content that might be pending.\n          this.source.currentLocation = firstLoc;\n          this.pushSource('');\n\n          /* istanbul ignore next */\n          if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {\n            throw new _exception2['default']('Compile completed with content left on stack');\n          }\n\n          if (!this.decorators.isEmpty()) {\n            this.useDecorators = true;\n\n            this.decorators.prepend('var decorators = container.decorators;\\n');\n            this.decorators.push('return fn;');\n\n            if (asObject) {\n              this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);\n            } else {\n              this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\\n');\n              this.decorators.push('}\\n');\n              this.decorators = this.decorators.merge();\n            }\n          } else {\n            this.decorators = undefined;\n          }\n\n          var fn = this.createFunctionContext(asObject);\n          if (!this.isChild) {\n            var ret = {\n              compiler: this.compilerInfo(),\n              main: fn };\n\n\n            if (this.decorators) {\n              ret.main_d = this.decorators; // eslint-disable-line camelcase\n              ret.useDecorators = true;\n            }\n\n            var _context = this.context;\n            var programs = _context.programs;\n            var decorators = _context.decorators;\n\n            for (i = 0, l = programs.length; i < l; i++) {\n              if (programs[i]) {\n                ret[i] = programs[i];\n                if (decorators[i]) {\n                  ret[i + '_d'] = decorators[i];\n                  ret.useDecorators = true;\n                }\n              }\n            }\n\n            if (this.environment.usePartial) {\n              ret.usePartial = true;\n            }\n            if (this.options.data) {\n              ret.useData = true;\n            }\n            if (this.useDepths) {\n              ret.useDepths = true;\n            }\n            if (this.useBlockParams) {\n              ret.useBlockParams = true;\n            }\n            if (this.options.compat) {\n              ret.compat = true;\n            }\n\n            if (!asObject) {\n              ret.compiler = JSON.stringify(ret.compiler);\n\n              this.source.currentLocation = { start: { line: 1, column: 0 } };\n              ret = this.objectLiteral(ret);\n\n              if (options.srcName) {\n                ret = ret.toStringWithSourceMap({ file: options.destName });\n                ret.map = ret.map && ret.map.toString();\n              } else {\n                ret = ret.toString();\n              }\n            } else {\n              ret.compilerOptions = this.options;\n            }\n\n            return ret;\n          } else {\n            return fn;\n          }\n        },\n\n        preamble: function preamble() {\n          // track the last context pushed into place to allow skipping the\n          // getContext opcode when it would be a noop\n          this.lastContext = 0;\n          this.source = new _codeGen2['default'](this.options.srcName);\n          this.decorators = new _codeGen2['default'](this.options.srcName);\n        },\n\n        createFunctionContext: function createFunctionContext(asObject) {\n          var varDeclarations = '';\n\n          var locals = this.stackVars.concat(this.registers.list);\n          if (locals.length > 0) {\n            varDeclarations += ', ' + locals.join(', ');\n          }\n\n          // Generate minimizer alias mappings\n          //\n          // When using true SourceNodes, this will update all references to the given alias\n          // as the source nodes are reused in situ. For the non-source node compilation mode,\n          // aliases will not be used, but this case is already being run on the client and\n          // we aren't concern about minimizing the template size.\n          var aliasCount = 0;\n          for (var alias in this.aliases) {\n            // eslint-disable-line guard-for-in\n            var node = this.aliases[alias];\n\n            if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {\n              varDeclarations += ', alias' + ++aliasCount + '=' + alias;\n              node.children[0] = 'alias' + aliasCount;\n            }\n          }\n\n          var params = ['container', 'depth0', 'helpers', 'partials', 'data'];\n\n          if (this.useBlockParams || this.useDepths) {\n            params.push('blockParams');\n          }\n          if (this.useDepths) {\n            params.push('depths');\n          }\n\n          // Perform a second pass over the output to merge content when possible\n          var source = this.mergeSource(varDeclarations);\n\n          if (asObject) {\n            params.push(source);\n\n            return Function.apply(this, params);\n          } else {\n            return this.source.wrap(['function(', params.join(','), ') {\\n  ', source, '}']);\n          }\n        },\n        mergeSource: function mergeSource(varDeclarations) {\n          var isSimple = this.environment.isSimple,\n          appendOnly = !this.forceBuffer,\n          appendFirst = undefined,\n          sourceSeen = undefined,\n          bufferStart = undefined,\n          bufferEnd = undefined;\n          this.source.each(function (line) {\n            if (line.appendToBuffer) {\n              if (bufferStart) {\n                line.prepend('  + ');\n              } else {\n                bufferStart = line;\n              }\n              bufferEnd = line;\n            } else {\n              if (bufferStart) {\n                if (!sourceSeen) {\n                  appendFirst = true;\n                } else {\n                  bufferStart.prepend('buffer += ');\n                }\n                bufferEnd.add(';');\n                bufferStart = bufferEnd = undefined;\n              }\n\n              sourceSeen = true;\n              if (!isSimple) {\n                appendOnly = false;\n              }\n            }\n          });\n\n          if (appendOnly) {\n            if (bufferStart) {\n              bufferStart.prepend('return ');\n              bufferEnd.add(';');\n            } else if (!sourceSeen) {\n              this.source.push('return \"\";');\n            }\n          } else {\n            varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());\n\n            if (bufferStart) {\n              bufferStart.prepend('return buffer + ');\n              bufferEnd.add(';');\n            } else {\n              this.source.push('return buffer;');\n            }\n          }\n\n          if (varDeclarations) {\n            this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\\n'));\n          }\n\n          return this.source.merge();\n        },\n\n        // [blockValue]\n        //\n        // On stack, before: hash, inverse, program, value\n        // On stack, after: return value of blockHelperMissing\n        //\n        // The purpose of this opcode is to take a block of the form\n        // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and\n        // replace it on the stack with the result of properly\n        // invoking blockHelperMissing.\n        blockValue: function blockValue(name) {\n          var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),\n          params = [this.contextName(0)];\n          this.setupHelperArgs(name, 0, params);\n\n          var blockName = this.popStack();\n          params.splice(1, 0, blockName);\n\n          this.push(this.source.functionCall(blockHelperMissing, 'call', params));\n        },\n\n        // [ambiguousBlockValue]\n        //\n        // On stack, before: hash, inverse, program, value\n        // Compiler value, before: lastHelper=value of last found helper, if any\n        // On stack, after, if no lastHelper: same as [blockValue]\n        // On stack, after, if lastHelper: value\n        ambiguousBlockValue: function ambiguousBlockValue() {\n          // We're being a bit cheeky and reusing the options value from the prior exec\n          var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),\n          params = [this.contextName(0)];\n          this.setupHelperArgs('', 0, params, true);\n\n          this.flushInline();\n\n          var current = this.topStack();\n          params.splice(1, 0, current);\n\n          this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);\n        },\n\n        // [appendContent]\n        //\n        // On stack, before: ...\n        // On stack, after: ...\n        //\n        // Appends the string value of `content` to the current buffer\n        appendContent: function appendContent(content) {\n          if (this.pendingContent) {\n            content = this.pendingContent + content;\n          } else {\n            this.pendingLocation = this.source.currentLocation;\n          }\n\n          this.pendingContent = content;\n        },\n\n        // [append]\n        //\n        // On stack, before: value, ...\n        // On stack, after: ...\n        //\n        // Coerces `value` to a String and appends it to the current buffer.\n        //\n        // If `value` is truthy, or 0, it is coerced into a string and appended\n        // Otherwise, the empty string is appended\n        append: function append() {\n          if (this.isInline()) {\n            this.replaceStack(function (current) {\n              return [' != null ? ', current, ' : \"\"'];\n            });\n\n            this.pushSource(this.appendToBuffer(this.popStack()));\n          } else {\n            var local = this.popStack();\n            this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);\n            if (this.environment.isSimple) {\n              this.pushSource(['else { ', this.appendToBuffer(\"''\", undefined, true), ' }']);\n            }\n          }\n        },\n\n        // [appendEscaped]\n        //\n        // On stack, before: value, ...\n        // On stack, after: ...\n        //\n        // Escape `value` and append it to the buffer\n        appendEscaped: function appendEscaped() {\n          this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));\n        },\n\n        // [getContext]\n        //\n        // On stack, before: ...\n        // On stack, after: ...\n        // Compiler value, after: lastContext=depth\n        //\n        // Set the value of the `lastContext` compiler value to the depth\n        getContext: function getContext(depth) {\n          this.lastContext = depth;\n        },\n\n        // [pushContext]\n        //\n        // On stack, before: ...\n        // On stack, after: currentContext, ...\n        //\n        // Pushes the value of the current context onto the stack.\n        pushContext: function pushContext() {\n          this.pushStackLiteral(this.contextName(this.lastContext));\n        },\n\n        // [lookupOnContext]\n        //\n        // On stack, before: ...\n        // On stack, after: currentContext[name], ...\n        //\n        // Looks up the value of `name` on the current context and pushes\n        // it onto the stack.\n        lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {\n          var i = 0;\n\n          if (!scoped && this.options.compat && !this.lastContext) {\n            // The depthed query is expected to handle the undefined logic for the root level that\n            // is implemented below, so we evaluate that directly in compat mode\n            this.push(this.depthedLookup(parts[i++]));\n          } else {\n            this.pushContext();\n          }\n\n          this.resolvePath('context', parts, i, falsy, strict);\n        },\n\n        // [lookupBlockParam]\n        //\n        // On stack, before: ...\n        // On stack, after: blockParam[name], ...\n        //\n        // Looks up the value of `parts` on the given block param and pushes\n        // it onto the stack.\n        lookupBlockParam: function lookupBlockParam(blockParamId, parts) {\n          this.useBlockParams = true;\n\n          this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);\n          this.resolvePath('context', parts, 1);\n        },\n\n        // [lookupData]\n        //\n        // On stack, before: ...\n        // On stack, after: data, ...\n        //\n        // Push the data lookup operator\n        lookupData: function lookupData(depth, parts, strict) {\n          if (!depth) {\n            this.pushStackLiteral('data');\n          } else {\n            this.pushStackLiteral('container.data(data, ' + depth + ')');\n          }\n\n          this.resolvePath('data', parts, 0, true, strict);\n        },\n\n        resolvePath: function resolvePath(type, parts, i, falsy, strict) {\n          // istanbul ignore next\n\n          var _this = this;\n\n          if (this.options.strict || this.options.assumeObjects) {\n            this.push(strictLookup(this.options.strict && strict, this, parts, type));\n            return;\n          }\n\n          var len = parts.length;\n          for (; i < len; i++) {\n            /* eslint-disable no-loop-func */\n            this.replaceStack(function (current) {\n              var lookup = _this.nameLookup(current, parts[i], type);\n              // We want to ensure that zero and false are handled properly if the context (falsy flag)\n              // needs to have the special handling for these values.\n              if (!falsy) {\n                return [' != null ? ', lookup, ' : ', current];\n              } else {\n                // Otherwise we can use generic falsy handling\n                return [' && ', lookup];\n              }\n            });\n            /* eslint-enable no-loop-func */\n          }\n        },\n\n        // [resolvePossibleLambda]\n        //\n        // On stack, before: value, ...\n        // On stack, after: resolved value, ...\n        //\n        // If the `value` is a lambda, replace it on the stack by\n        // the return value of the lambda\n        resolvePossibleLambda: function resolvePossibleLambda() {\n          this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);\n        },\n\n        // [pushStringParam]\n        //\n        // On stack, before: ...\n        // On stack, after: string, currentContext, ...\n        //\n        // This opcode is designed for use in string mode, which\n        // provides the string value of a parameter along with its\n        // depth rather than resolving it immediately.\n        pushStringParam: function pushStringParam(string, type) {\n          this.pushContext();\n          this.pushString(type);\n\n          // If it's a subexpression, the string result\n          // will be pushed after this opcode.\n          if (type !== 'SubExpression') {\n            if (typeof string === 'string') {\n              this.pushString(string);\n            } else {\n              this.pushStackLiteral(string);\n            }\n          }\n        },\n\n        emptyHash: function emptyHash(omitEmpty) {\n          if (this.trackIds) {\n            this.push('{}'); // hashIds\n          }\n          if (this.stringParams) {\n            this.push('{}'); // hashContexts\n            this.push('{}'); // hashTypes\n          }\n          this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');\n        },\n        pushHash: function pushHash() {\n          if (this.hash) {\n            this.hashes.push(this.hash);\n          }\n          this.hash = { values: [], types: [], contexts: [], ids: [] };\n        },\n        popHash: function popHash() {\n          var hash = this.hash;\n          this.hash = this.hashes.pop();\n\n          if (this.trackIds) {\n            this.push(this.objectLiteral(hash.ids));\n          }\n          if (this.stringParams) {\n            this.push(this.objectLiteral(hash.contexts));\n            this.push(this.objectLiteral(hash.types));\n          }\n\n          this.push(this.objectLiteral(hash.values));\n        },\n\n        // [pushString]\n        //\n        // On stack, before: ...\n        // On stack, after: quotedString(string), ...\n        //\n        // Push a quoted version of `string` onto the stack\n        pushString: function pushString(string) {\n          this.pushStackLiteral(this.quotedString(string));\n        },\n\n        // [pushLiteral]\n        //\n        // On stack, before: ...\n        // On stack, after: value, ...\n        //\n        // Pushes a value onto the stack. This operation prevents\n        // the compiler from creating a temporary variable to hold\n        // it.\n        pushLiteral: function pushLiteral(value) {\n          this.pushStackLiteral(value);\n        },\n\n        // [pushProgram]\n        //\n        // On stack, before: ...\n        // On stack, after: program(guid), ...\n        //\n        // Push a program expression onto the stack. This takes\n        // a compile-time guid and converts it into a runtime-accessible\n        // expression.\n        pushProgram: function pushProgram(guid) {\n          if (guid != null) {\n            this.pushStackLiteral(this.programExpression(guid));\n          } else {\n            this.pushStackLiteral(null);\n          }\n        },\n\n        // [registerDecorator]\n        //\n        // On stack, before: hash, program, params..., ...\n        // On stack, after: ...\n        //\n        // Pops off the decorator's parameters, invokes the decorator,\n        // and inserts the decorator into the decorators list.\n        registerDecorator: function registerDecorator(paramSize, name) {\n          var foundDecorator = this.nameLookup('decorators', name, 'decorator'),\n          options = this.setupHelperArgs(name, paramSize);\n\n          this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);\n        },\n\n        // [invokeHelper]\n        //\n        // On stack, before: hash, inverse, program, params..., ...\n        // On stack, after: result of helper invocation\n        //\n        // Pops off the helper's parameters, invokes the helper,\n        // and pushes the helper's return value onto the stack.\n        //\n        // If the helper is not found, `helperMissing` is called.\n        invokeHelper: function invokeHelper(paramSize, name, isSimple) {\n          var nonHelper = this.popStack(),\n          helper = this.setupHelper(paramSize, name),\n          simple = isSimple ? [helper.name, ' || '] : '';\n\n          var lookup = ['('].concat(simple, nonHelper);\n          if (!this.options.strict) {\n            lookup.push(' || ', this.aliasable('helpers.helperMissing'));\n          }\n          lookup.push(')');\n\n          this.push(this.source.functionCall(lookup, 'call', helper.callParams));\n        },\n\n        // [invokeKnownHelper]\n        //\n        // On stack, before: hash, inverse, program, params..., ...\n        // On stack, after: result of helper invocation\n        //\n        // This operation is used when the helper is known to exist,\n        // so a `helperMissing` fallback is not required.\n        invokeKnownHelper: function invokeKnownHelper(paramSize, name) {\n          var helper = this.setupHelper(paramSize, name);\n          this.push(this.source.functionCall(helper.name, 'call', helper.callParams));\n        },\n\n        // [invokeAmbiguous]\n        //\n        // On stack, before: hash, inverse, program, params..., ...\n        // On stack, after: result of disambiguation\n        //\n        // This operation is used when an expression like `{{foo}}`\n        // is provided, but we don't know at compile-time whether it\n        // is a helper or a path.\n        //\n        // This operation emits more code than the other options,\n        // and can be avoided by passing the `knownHelpers` and\n        // `knownHelpersOnly` flags at compile-time.\n        invokeAmbiguous: function invokeAmbiguous(name, helperCall) {\n          this.useRegister('helper');\n\n          var nonHelper = this.popStack();\n\n          this.emptyHash();\n          var helper = this.setupHelper(0, name, helperCall);\n\n          var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');\n\n          var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];\n          if (!this.options.strict) {\n            lookup[0] = '(helper = ';\n            lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));\n          }\n\n          this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('\"function\"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);\n        },\n\n        // [invokePartial]\n        //\n        // On stack, before: context, ...\n        // On stack after: result of partial invocation\n        //\n        // This operation pops off a context, invokes a partial with that context,\n        // and pushes the result of the invocation back.\n        invokePartial: function invokePartial(isDynamic, name, indent) {\n          var params = [],\n          options = this.setupParams(name, 1, params);\n\n          if (isDynamic) {\n            name = this.popStack();\n            delete options.name;\n          }\n\n          if (indent) {\n            options.indent = JSON.stringify(indent);\n          }\n          options.helpers = 'helpers';\n          options.partials = 'partials';\n          options.decorators = 'container.decorators';\n\n          if (!isDynamic) {\n            params.unshift(this.nameLookup('partials', name, 'partial'));\n          } else {\n            params.unshift(name);\n          }\n\n          if (this.options.compat) {\n            options.depths = 'depths';\n          }\n          options = this.objectLiteral(options);\n          params.push(options);\n\n          this.push(this.source.functionCall('container.invokePartial', '', params));\n        },\n\n        // [assignToHash]\n        //\n        // On stack, before: value, ..., hash, ...\n        // On stack, after: ..., hash, ...\n        //\n        // Pops a value off the stack and assigns it to the current hash\n        assignToHash: function assignToHash(key) {\n          var value = this.popStack(),\n          context = undefined,\n          type = undefined,\n          id = undefined;\n\n          if (this.trackIds) {\n            id = this.popStack();\n          }\n          if (this.stringParams) {\n            type = this.popStack();\n            context = this.popStack();\n          }\n\n          var hash = this.hash;\n          if (context) {\n            hash.contexts[key] = context;\n          }\n          if (type) {\n            hash.types[key] = type;\n          }\n          if (id) {\n            hash.ids[key] = id;\n          }\n          hash.values[key] = value;\n        },\n\n        pushId: function pushId(type, name, child) {\n          if (type === 'BlockParam') {\n            this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));\n          } else if (type === 'PathExpression') {\n            this.pushString(name);\n          } else if (type === 'SubExpression') {\n            this.pushStackLiteral('true');\n          } else {\n            this.pushStackLiteral('null');\n          }\n        },\n\n        // HELPERS\n\n        compiler: JavaScriptCompiler,\n\n        compileChildren: function compileChildren(environment, options) {\n          var children = environment.children,\n          child = undefined,\n          compiler = undefined;\n\n          for (var i = 0, l = children.length; i < l; i++) {\n            child = children[i];\n            compiler = new this.compiler(); // eslint-disable-line new-cap\n\n            var existing = this.matchExistingProgram(child);\n\n            if (existing == null) {\n              this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children\n              var index = this.context.programs.length;\n              child.index = index;\n              child.name = 'program' + index;\n              this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);\n              this.context.decorators[index] = compiler.decorators;\n              this.context.environments[index] = child;\n\n              this.useDepths = this.useDepths || compiler.useDepths;\n              this.useBlockParams = this.useBlockParams || compiler.useBlockParams;\n              child.useDepths = this.useDepths;\n              child.useBlockParams = this.useBlockParams;\n            } else {\n              child.index = existing.index;\n              child.name = 'program' + existing.index;\n\n              this.useDepths = this.useDepths || existing.useDepths;\n              this.useBlockParams = this.useBlockParams || existing.useBlockParams;\n            }\n          }\n        },\n        matchExistingProgram: function matchExistingProgram(child) {\n          for (var i = 0, len = this.context.environments.length; i < len; i++) {\n            var environment = this.context.environments[i];\n            if (environment && environment.equals(child)) {\n              return environment;\n            }\n          }\n        },\n\n        programExpression: function programExpression(guid) {\n          var child = this.environment.children[guid],\n          programParams = [child.index, 'data', child.blockParams];\n\n          if (this.useBlockParams || this.useDepths) {\n            programParams.push('blockParams');\n          }\n          if (this.useDepths) {\n            programParams.push('depths');\n          }\n\n          return 'container.program(' + programParams.join(', ') + ')';\n        },\n\n        useRegister: function useRegister(name) {\n          if (!this.registers[name]) {\n            this.registers[name] = true;\n            this.registers.list.push(name);\n          }\n        },\n\n        push: function push(expr) {\n          if (!(expr instanceof Literal)) {\n            expr = this.source.wrap(expr);\n          }\n\n          this.inlineStack.push(expr);\n          return expr;\n        },\n\n        pushStackLiteral: function pushStackLiteral(item) {\n          this.push(new Literal(item));\n        },\n\n        pushSource: function pushSource(source) {\n          if (this.pendingContent) {\n            this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));\n            this.pendingContent = undefined;\n          }\n\n          if (source) {\n            this.source.push(source);\n          }\n        },\n\n        replaceStack: function replaceStack(callback) {\n          var prefix = ['('],\n          stack = undefined,\n          createdStack = undefined,\n          usedLiteral = undefined;\n\n          /* istanbul ignore next */\n          if (!this.isInline()) {\n            throw new _exception2['default']('replaceStack on non-inline');\n          }\n\n          // We want to merge the inline statement into the replacement statement via ','\n          var top = this.popStack(true);\n\n          if (top instanceof Literal) {\n            // Literals do not need to be inlined\n            stack = [top.value];\n            prefix = ['(', stack];\n            usedLiteral = true;\n          } else {\n            // Get or create the current stack name for use by the inline\n            createdStack = true;\n            var _name = this.incrStack();\n\n            prefix = ['((', this.push(_name), ' = ', top, ')'];\n            stack = this.topStack();\n          }\n\n          var item = callback.call(this, stack);\n\n          if (!usedLiteral) {\n            this.popStack();\n          }\n          if (createdStack) {\n            this.stackSlot--;\n          }\n          this.push(prefix.concat(item, ')'));\n        },\n\n        incrStack: function incrStack() {\n          this.stackSlot++;\n          if (this.stackSlot > this.stackVars.length) {\n            this.stackVars.push('stack' + this.stackSlot);\n          }\n          return this.topStackName();\n        },\n        topStackName: function topStackName() {\n          return 'stack' + this.stackSlot;\n        },\n        flushInline: function flushInline() {\n          var inlineStack = this.inlineStack;\n          this.inlineStack = [];\n          for (var i = 0, len = inlineStack.length; i < len; i++) {\n            var entry = inlineStack[i];\n            /* istanbul ignore if */\n            if (entry instanceof Literal) {\n              this.compileStack.push(entry);\n            } else {\n              var stack = this.incrStack();\n              this.pushSource([stack, ' = ', entry, ';']);\n              this.compileStack.push(stack);\n            }\n          }\n        },\n        isInline: function isInline() {\n          return this.inlineStack.length;\n        },\n\n        popStack: function popStack(wrapped) {\n          var inline = this.isInline(),\n          item = (inline ? this.inlineStack : this.compileStack).pop();\n\n          if (!wrapped && item instanceof Literal) {\n            return item.value;\n          } else {\n            if (!inline) {\n              /* istanbul ignore next */\n              if (!this.stackSlot) {\n                throw new _exception2['default']('Invalid stack pop');\n              }\n              this.stackSlot--;\n            }\n            return item;\n          }\n        },\n\n        topStack: function topStack() {\n          var stack = this.isInline() ? this.inlineStack : this.compileStack,\n          item = stack[stack.length - 1];\n\n          /* istanbul ignore if */\n          if (item instanceof Literal) {\n            return item.value;\n          } else {\n            return item;\n          }\n        },\n\n        contextName: function contextName(context) {\n          if (this.useDepths && context) {\n            return 'depths[' + context + ']';\n          } else {\n            return 'depth' + context;\n          }\n        },\n\n        quotedString: function quotedString(str) {\n          return this.source.quotedString(str);\n        },\n\n        objectLiteral: function objectLiteral(obj) {\n          return this.source.objectLiteral(obj);\n        },\n\n        aliasable: function aliasable(name) {\n          var ret = this.aliases[name];\n          if (ret) {\n            ret.referenceCount++;\n            return ret;\n          }\n\n          ret = this.aliases[name] = this.source.wrap(name);\n          ret.aliasable = true;\n          ret.referenceCount = 1;\n\n          return ret;\n        },\n\n        setupHelper: function setupHelper(paramSize, name, blockHelper) {\n          var params = [],\n          paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);\n          var foundHelper = this.nameLookup('helpers', name, 'helper'),\n          callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');\n\n          return {\n            params: params,\n            paramsInit: paramsInit,\n            name: foundHelper,\n            callParams: [callContext].concat(params) };\n\n        },\n\n        setupParams: function setupParams(helper, paramSize, params) {\n          var options = {},\n          contexts = [],\n          types = [],\n          ids = [],\n          objectArgs = !params,\n          param = undefined;\n\n          if (objectArgs) {\n            params = [];\n          }\n\n          options.name = this.quotedString(helper);\n          options.hash = this.popStack();\n\n          if (this.trackIds) {\n            options.hashIds = this.popStack();\n          }\n          if (this.stringParams) {\n            options.hashTypes = this.popStack();\n            options.hashContexts = this.popStack();\n          }\n\n          var inverse = this.popStack(),\n          program = this.popStack();\n\n          // Avoid setting fn and inverse if neither are set. This allows\n          // helpers to do a check for `if (options.fn)`\n          if (program || inverse) {\n            options.fn = program || 'container.noop';\n            options.inverse = inverse || 'container.noop';\n          }\n\n          // The parameters go on to the stack in order (making sure that they are evaluated in order)\n          // so we need to pop them off the stack in reverse order\n          var i = paramSize;\n          while (i--) {\n            param = this.popStack();\n            params[i] = param;\n\n            if (this.trackIds) {\n              ids[i] = this.popStack();\n            }\n            if (this.stringParams) {\n              types[i] = this.popStack();\n              contexts[i] = this.popStack();\n            }\n          }\n\n          if (objectArgs) {\n            options.args = this.source.generateArray(params);\n          }\n\n          if (this.trackIds) {\n            options.ids = this.source.generateArray(ids);\n          }\n          if (this.stringParams) {\n            options.types = this.source.generateArray(types);\n            options.contexts = this.source.generateArray(contexts);\n          }\n\n          if (this.options.data) {\n            options.data = 'data';\n          }\n          if (this.useBlockParams) {\n            options.blockParams = 'blockParams';\n          }\n          return options;\n        },\n\n        setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {\n          var options = this.setupParams(helper, paramSize, params);\n          options = this.objectLiteral(options);\n          if (useRegister) {\n            this.useRegister('options');\n            params.push('options');\n            return ['options=', options];\n          } else if (params) {\n            params.push(options);\n            return '';\n          } else {\n            return options;\n          }\n        } };\n\n\n      (function () {\n        var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');\n\n        var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};\n\n        for (var i = 0, l = reservedWords.length; i < l; i++) {\n          compilerWords[reservedWords[i]] = true;\n        }\n      })();\n\n      JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {\n        return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);\n      };\n\n      function strictLookup(requireTerminal, compiler, parts, type) {\n        var stack = compiler.popStack(),\n        i = 0,\n        len = parts.length;\n        if (requireTerminal) {\n          len--;\n        }\n\n        for (; i < len; i++) {\n          stack = compiler.nameLookup(stack, parts[i], type);\n        }\n\n        if (requireTerminal) {\n          return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];\n        } else {\n          return stack;\n        }\n      }\n\n      exports['default'] = JavaScriptCompiler;\n      module.exports = exports['default'];\n\n\n    }, { \"../base\": 7, \"../exception\": 20, \"../utils\": 33, \"./code-gen\": 10 }], 14: [function (require, module, exports) {\n      /* istanbul ignore next */\n      /* Jison generated parser */\n      \"use strict\";\n\n      var handlebars = function () {\n        var parser = { trace: function trace() {},\n          yy: {},\n          symbols_: { \"error\": 2, \"root\": 3, \"program\": 4, \"EOF\": 5, \"program_repetition0\": 6, \"statement\": 7, \"mustache\": 8, \"block\": 9, \"rawBlock\": 10, \"partial\": 11, \"partialBlock\": 12, \"content\": 13, \"COMMENT\": 14, \"CONTENT\": 15, \"openRawBlock\": 16, \"rawBlock_repetition_plus0\": 17, \"END_RAW_BLOCK\": 18, \"OPEN_RAW_BLOCK\": 19, \"helperName\": 20, \"openRawBlock_repetition0\": 21, \"openRawBlock_option0\": 22, \"CLOSE_RAW_BLOCK\": 23, \"openBlock\": 24, \"block_option0\": 25, \"closeBlock\": 26, \"openInverse\": 27, \"block_option1\": 28, \"OPEN_BLOCK\": 29, \"openBlock_repetition0\": 30, \"openBlock_option0\": 31, \"openBlock_option1\": 32, \"CLOSE\": 33, \"OPEN_INVERSE\": 34, \"openInverse_repetition0\": 35, \"openInverse_option0\": 36, \"openInverse_option1\": 37, \"openInverseChain\": 38, \"OPEN_INVERSE_CHAIN\": 39, \"openInverseChain_repetition0\": 40, \"openInverseChain_option0\": 41, \"openInverseChain_option1\": 42, \"inverseAndProgram\": 43, \"INVERSE\": 44, \"inverseChain\": 45, \"inverseChain_option0\": 46, \"OPEN_ENDBLOCK\": 47, \"OPEN\": 48, \"mustache_repetition0\": 49, \"mustache_option0\": 50, \"OPEN_UNESCAPED\": 51, \"mustache_repetition1\": 52, \"mustache_option1\": 53, \"CLOSE_UNESCAPED\": 54, \"OPEN_PARTIAL\": 55, \"partialName\": 56, \"partial_repetition0\": 57, \"partial_option0\": 58, \"openPartialBlock\": 59, \"OPEN_PARTIAL_BLOCK\": 60, \"openPartialBlock_repetition0\": 61, \"openPartialBlock_option0\": 62, \"param\": 63, \"sexpr\": 64, \"OPEN_SEXPR\": 65, \"sexpr_repetition0\": 66, \"sexpr_option0\": 67, \"CLOSE_SEXPR\": 68, \"hash\": 69, \"hash_repetition_plus0\": 70, \"hashSegment\": 71, \"ID\": 72, \"EQUALS\": 73, \"blockParams\": 74, \"OPEN_BLOCK_PARAMS\": 75, \"blockParams_repetition_plus0\": 76, \"CLOSE_BLOCK_PARAMS\": 77, \"path\": 78, \"dataName\": 79, \"STRING\": 80, \"NUMBER\": 81, \"BOOLEAN\": 82, \"UNDEFINED\": 83, \"NULL\": 84, \"DATA\": 85, \"pathSegments\": 86, \"SEP\": 87, \"$accept\": 0, \"$end\": 1 },\n          terminals_: { 2: \"error\", 5: \"EOF\", 14: \"COMMENT\", 15: \"CONTENT\", 18: \"END_RAW_BLOCK\", 19: \"OPEN_RAW_BLOCK\", 23: \"CLOSE_RAW_BLOCK\", 29: \"OPEN_BLOCK\", 33: \"CLOSE\", 34: \"OPEN_INVERSE\", 39: \"OPEN_INVERSE_CHAIN\", 44: \"INVERSE\", 47: \"OPEN_ENDBLOCK\", 48: \"OPEN\", 51: \"OPEN_UNESCAPED\", 54: \"CLOSE_UNESCAPED\", 55: \"OPEN_PARTIAL\", 60: \"OPEN_PARTIAL_BLOCK\", 65: \"OPEN_SEXPR\", 68: \"CLOSE_SEXPR\", 72: \"ID\", 73: \"EQUALS\", 75: \"OPEN_BLOCK_PARAMS\", 77: \"CLOSE_BLOCK_PARAMS\", 80: \"STRING\", 81: \"NUMBER\", 82: \"BOOLEAN\", 83: \"UNDEFINED\", 84: \"NULL\", 85: \"DATA\", 87: \"SEP\" },\n          productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],\n          performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$\n          /**/) {\n\n            var $0 = $$.length - 1;\n            switch (yystate) {\n              case 1:\n                return $$[$0 - 1];\n                break;\n              case 2:\n                this.$ = yy.prepareProgram($$[$0]);\n                break;\n              case 3:\n                this.$ = $$[$0];\n                break;\n              case 4:\n                this.$ = $$[$0];\n                break;\n              case 5:\n                this.$ = $$[$0];\n                break;\n              case 6:\n                this.$ = $$[$0];\n                break;\n              case 7:\n                this.$ = $$[$0];\n                break;\n              case 8:\n                this.$ = $$[$0];\n                break;\n              case 9:\n                this.$ = {\n                  type: 'CommentStatement',\n                  value: yy.stripComment($$[$0]),\n                  strip: yy.stripFlags($$[$0], $$[$0]),\n                  loc: yy.locInfo(this._$) };\n\n\n                break;\n              case 10:\n                this.$ = {\n                  type: 'ContentStatement',\n                  original: $$[$0],\n                  value: $$[$0],\n                  loc: yy.locInfo(this._$) };\n\n\n                break;\n              case 11:\n                this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);\n                break;\n              case 12:\n                this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };\n                break;\n              case 13:\n                this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);\n                break;\n              case 14:\n                this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);\n                break;\n              case 15:\n                this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                break;\n              case 16:\n                this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                break;\n              case 17:\n                this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                break;\n              case 18:\n                this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };\n                break;\n              case 19:\n                var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),\n                program = yy.prepareProgram([inverse], $$[$0 - 1].loc);\n                program.chained = true;\n\n                this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };\n\n                break;\n              case 20:\n                this.$ = $$[$0];\n                break;\n              case 21:\n                this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };\n                break;\n              case 22:\n                this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);\n                break;\n              case 23:\n                this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);\n                break;\n              case 24:\n                this.$ = {\n                  type: 'PartialStatement',\n                  name: $$[$0 - 3],\n                  params: $$[$0 - 2],\n                  hash: $$[$0 - 1],\n                  indent: '',\n                  strip: yy.stripFlags($$[$0 - 4], $$[$0]),\n                  loc: yy.locInfo(this._$) };\n\n\n                break;\n              case 25:\n                this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);\n                break;\n              case 26:\n                this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };\n                break;\n              case 27:\n                this.$ = $$[$0];\n                break;\n              case 28:\n                this.$ = $$[$0];\n                break;\n              case 29:\n                this.$ = {\n                  type: 'SubExpression',\n                  path: $$[$0 - 3],\n                  params: $$[$0 - 2],\n                  hash: $$[$0 - 1],\n                  loc: yy.locInfo(this._$) };\n\n\n                break;\n              case 30:\n                this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };\n                break;\n              case 31:\n                this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };\n                break;\n              case 32:\n                this.$ = yy.id($$[$0 - 1]);\n                break;\n              case 33:\n                this.$ = $$[$0];\n                break;\n              case 34:\n                this.$ = $$[$0];\n                break;\n              case 35:\n                this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };\n                break;\n              case 36:\n                this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };\n                break;\n              case 37:\n                this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };\n                break;\n              case 38:\n                this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };\n                break;\n              case 39:\n                this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };\n                break;\n              case 40:\n                this.$ = $$[$0];\n                break;\n              case 41:\n                this.$ = $$[$0];\n                break;\n              case 42:\n                this.$ = yy.preparePath(true, $$[$0], this._$);\n                break;\n              case 43:\n                this.$ = yy.preparePath(false, $$[$0], this._$);\n                break;\n              case 44:\n                $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];\n                break;\n              case 45:\n                this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];\n                break;\n              case 46:\n                this.$ = [];\n                break;\n              case 47:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 48:\n                this.$ = [$$[$0]];\n                break;\n              case 49:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 50:\n                this.$ = [];\n                break;\n              case 51:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 58:\n                this.$ = [];\n                break;\n              case 59:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 64:\n                this.$ = [];\n                break;\n              case 65:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 70:\n                this.$ = [];\n                break;\n              case 71:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 78:\n                this.$ = [];\n                break;\n              case 79:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 82:\n                this.$ = [];\n                break;\n              case 83:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 86:\n                this.$ = [];\n                break;\n              case 87:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 90:\n                this.$ = [];\n                break;\n              case 91:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 94:\n                this.$ = [];\n                break;\n              case 95:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 98:\n                this.$ = [$$[$0]];\n                break;\n              case 99:\n                $$[$0 - 1].push($$[$0]);\n                break;\n              case 100:\n                this.$ = [$$[$0]];\n                break;\n              case 101:\n                $$[$0 - 1].push($$[$0]);\n                break;}\n\n          },\n          table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],\n          defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },\n          parseError: function parseError(str, hash) {\n            throw new Error(str);\n          },\n          parse: function parse(input) {\n            var self = this,\n            stack = [0],\n            vstack = [null],\n            lstack = [],\n            table = this.table,\n            yytext = \"\",\n            yylineno = 0,\n            yyleng = 0,\n            recovering = 0,\n            TERROR = 2,\n            EOF = 1;\n            this.lexer.setInput(input);\n            this.lexer.yy = this.yy;\n            this.yy.lexer = this.lexer;\n            this.yy.parser = this;\n            if (typeof this.lexer.yylloc == \"undefined\") this.lexer.yylloc = {};\n            var yyloc = this.lexer.yylloc;\n            lstack.push(yyloc);\n            var ranges = this.lexer.options && this.lexer.options.ranges;\n            if (typeof this.yy.parseError === \"function\") this.parseError = this.yy.parseError;\n            function popStack(n) {\n              stack.length = stack.length - 2 * n;\n              vstack.length = vstack.length - n;\n              lstack.length = lstack.length - n;\n            }\n            function lex() {\n              var token;\n              token = self.lexer.lex() || 1;\n              if (typeof token !== \"number\") {\n                token = self.symbols_[token] || token;\n              }\n              return token;\n            }\n            var symbol,\n            preErrorSymbol,\n            state,\n            action,\n            a,\n            r,\n            yyval = {},\n            p,\n            len,\n            newState,\n            expected;\n            while (true) {\n              state = stack[stack.length - 1];\n              if (this.defaultActions[state]) {\n                action = this.defaultActions[state];\n              } else {\n                if (symbol === null || typeof symbol == \"undefined\") {\n                  symbol = lex();\n                }\n                action = table[state] && table[state][symbol];\n              }\n              if (typeof action === \"undefined\" || !action.length || !action[0]) {\n                var errStr = \"\";\n                if (!recovering) {\n                  expected = [];\n                  for (p in table[state]) {if (this.terminals_[p] && p > 2) {\n                      expected.push(\"'\" + this.terminals_[p] + \"'\");\n                    }}\n                  if (this.lexer.showPosition) {\n                    errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + this.lexer.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                  } else {\n                    errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == 1 ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                  }\n                  this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });\n                }\n              }\n              if (action[0] instanceof Array && action.length > 1) {\n                throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n              }\n              switch (action[0]) {\n                case 1:\n                  stack.push(symbol);\n                  vstack.push(this.lexer.yytext);\n                  lstack.push(this.lexer.yylloc);\n                  stack.push(action[1]);\n                  symbol = null;\n                  if (!preErrorSymbol) {\n                    yyleng = this.lexer.yyleng;\n                    yytext = this.lexer.yytext;\n                    yylineno = this.lexer.yylineno;\n                    yyloc = this.lexer.yylloc;\n                    if (recovering > 0) recovering--;\n                  } else {\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                  }\n                  break;\n                case 2:\n                  len = this.productions_[action[1]][1];\n                  yyval.$ = vstack[vstack.length - len];\n                  yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };\n                  if (ranges) {\n                    yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n                  }\n                  r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n                  if (typeof r !== \"undefined\") {\n                    return r;\n                  }\n                  if (len) {\n                    stack = stack.slice(0, -1 * len * 2);\n                    vstack = vstack.slice(0, -1 * len);\n                    lstack = lstack.slice(0, -1 * len);\n                  }\n                  stack.push(this.productions_[action[1]][0]);\n                  vstack.push(yyval.$);\n                  lstack.push(yyval._$);\n                  newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                  stack.push(newState);\n                  break;\n                case 3:\n                  return true;}\n\n            }\n            return true;\n          } };\n\n        /* Jison generated lexer */\n        var lexer = function () {\n          var lexer = { EOF: 1,\n            parseError: function parseError(str, hash) {\n              if (this.yy.parser) {\n                this.yy.parser.parseError(str, hash);\n              } else {\n                throw new Error(str);\n              }\n            },\n            setInput: function setInput(input) {\n              this._input = input;\n              this._more = this._less = this.done = false;\n              this.yylineno = this.yyleng = 0;\n              this.yytext = this.matched = this.match = '';\n              this.conditionStack = ['INITIAL'];\n              this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };\n              if (this.options.ranges) this.yylloc.range = [0, 0];\n              this.offset = 0;\n              return this;\n            },\n            input: function input() {\n              var ch = this._input[0];\n              this.yytext += ch;\n              this.yyleng++;\n              this.offset++;\n              this.match += ch;\n              this.matched += ch;\n              var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n              if (lines) {\n                this.yylineno++;\n                this.yylloc.last_line++;\n              } else {\n                this.yylloc.last_column++;\n              }\n              if (this.options.ranges) this.yylloc.range[1]++;\n\n              this._input = this._input.slice(1);\n              return ch;\n            },\n            unput: function unput(ch) {\n              var len = ch.length;\n              var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n              this._input = ch + this._input;\n              this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n              //this.yyleng -= len;\n              this.offset -= len;\n              var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n              this.match = this.match.substr(0, this.match.length - 1);\n              this.matched = this.matched.substr(0, this.matched.length - 1);\n\n              if (lines.length - 1) this.yylineno -= lines.length - 1;\n              var r = this.yylloc.range;\n\n              this.yylloc = { first_line: this.yylloc.first_line,\n                last_line: this.yylineno + 1,\n                first_column: this.yylloc.first_column,\n                last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len };\n\n\n              if (this.options.ranges) {\n                this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n              }\n              return this;\n            },\n            more: function more() {\n              this._more = true;\n              return this;\n            },\n            less: function less(n) {\n              this.unput(this.match.slice(n));\n            },\n            pastInput: function pastInput() {\n              var past = this.matched.substr(0, this.matched.length - this.match.length);\n              return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n            },\n            upcomingInput: function upcomingInput() {\n              var next = this.match;\n              if (next.length < 20) {\n                next += this._input.substr(0, 20 - next.length);\n              }\n              return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n            },\n            showPosition: function showPosition() {\n              var pre = this.pastInput();\n              var c = new Array(pre.length + 1).join(\"-\");\n              return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n            next: function next() {\n              if (this.done) {\n                return this.EOF;\n              }\n              if (!this._input) this.done = true;\n\n              var token, match, tempMatch, index, col, lines;\n              if (!this._more) {\n                this.yytext = '';\n                this.match = '';\n              }\n              var rules = this._currentRules();\n              for (var i = 0; i < rules.length; i++) {\n                tempMatch = this._input.match(this.rules[rules[i]]);\n                if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                  match = tempMatch;\n                  index = i;\n                  if (!this.options.flex) break;\n                }\n              }\n              if (match) {\n                lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) this.yylineno += lines.length;\n                this.yylloc = { first_line: this.yylloc.last_line,\n                  last_line: this.yylineno + 1,\n                  first_column: this.yylloc.last_column,\n                  last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length };\n                this.yytext += match[0];\n                this.match += match[0];\n                this.matches = match;\n                this.yyleng = this.yytext.length;\n                if (this.options.ranges) {\n                  this.yylloc.range = [this.offset, this.offset += this.yyleng];\n                }\n                this._more = false;\n                this._input = this._input.slice(match[0].length);\n                this.matched += match[0];\n                token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);\n                if (this.done && this._input) this.done = false;\n                if (token) return token;else return;\n              }\n              if (this._input === \"\") {\n                return this.EOF;\n              } else {\n                return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), { text: \"\", token: null, line: this.yylineno });\n              }\n            },\n            lex: function lex() {\n              var r = this.next();\n              if (typeof r !== 'undefined') {\n                return r;\n              } else {\n                return this.lex();\n              }\n            },\n            begin: function begin(condition) {\n              this.conditionStack.push(condition);\n            },\n            popState: function popState() {\n              return this.conditionStack.pop();\n            },\n            _currentRules: function _currentRules() {\n              return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n            },\n            topState: function topState() {\n              return this.conditionStack[this.conditionStack.length - 2];\n            },\n            pushState: function begin(condition) {\n              this.begin(condition);\n            } };\n          lexer.options = {};\n          lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START\n          /**/) {\n\n            function strip(start, end) {\n              return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);\n            }\n\n            var YYSTATE = YY_START;\n            switch ($avoiding_name_collisions) {\n              case 0:\n                if (yy_.yytext.slice(-2) === \"\\\\\\\\\") {\n                  strip(0, 1);\n                  this.begin(\"mu\");\n                } else if (yy_.yytext.slice(-1) === \"\\\\\") {\n                  strip(0, 1);\n                  this.begin(\"emu\");\n                } else {\n                  this.begin(\"mu\");\n                }\n                if (yy_.yytext) return 15;\n\n                break;\n              case 1:\n                return 15;\n                break;\n              case 2:\n                this.popState();\n                return 15;\n\n                break;\n              case 3:\n                this.begin('raw');return 15;\n                break;\n              case 4:\n                this.popState();\n                // Should be using `this.topState()` below, but it currently\n                // returns the second top instead of the first top. Opened an\n                // issue about it at https://github.com/zaach/jison/issues/291\n                if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {\n                  return 15;\n                } else {\n                  yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);\n                  return 'END_RAW_BLOCK';\n                }\n\n                break;\n              case 5:\n                return 15;\n                break;\n              case 6:\n                this.popState();\n                return 14;\n\n                break;\n              case 7:\n                return 65;\n                break;\n              case 8:\n                return 68;\n                break;\n              case 9:\n                return 19;\n                break;\n              case 10:\n                this.popState();\n                this.begin('raw');\n                return 23;\n\n                break;\n              case 11:\n                return 55;\n                break;\n              case 12:\n                return 60;\n                break;\n              case 13:\n                return 29;\n                break;\n              case 14:\n                return 47;\n                break;\n              case 15:\n                this.popState();return 44;\n                break;\n              case 16:\n                this.popState();return 44;\n                break;\n              case 17:\n                return 34;\n                break;\n              case 18:\n                return 39;\n                break;\n              case 19:\n                return 51;\n                break;\n              case 20:\n                return 48;\n                break;\n              case 21:\n                this.unput(yy_.yytext);\n                this.popState();\n                this.begin('com');\n\n                break;\n              case 22:\n                this.popState();\n                return 14;\n\n                break;\n              case 23:\n                return 48;\n                break;\n              case 24:\n                return 73;\n                break;\n              case 25:\n                return 72;\n                break;\n              case 26:\n                return 72;\n                break;\n              case 27:\n                return 87;\n                break;\n              case 28:\n                // ignore whitespace\n                break;\n              case 29:\n                this.popState();return 54;\n                break;\n              case 30:\n                this.popState();return 33;\n                break;\n              case 31:\n                yy_.yytext = strip(1, 2).replace(/\\\\\"/g, '\"');return 80;\n                break;\n              case 32:\n                yy_.yytext = strip(1, 2).replace(/\\\\'/g, \"'\");return 80;\n                break;\n              case 33:\n                return 85;\n                break;\n              case 34:\n                return 82;\n                break;\n              case 35:\n                return 82;\n                break;\n              case 36:\n                return 83;\n                break;\n              case 37:\n                return 84;\n                break;\n              case 38:\n                return 81;\n                break;\n              case 39:\n                return 75;\n                break;\n              case 40:\n                return 77;\n                break;\n              case 41:\n                return 72;\n                break;\n              case 42:\n                yy_.yytext = yy_.yytext.replace(/\\\\([\\\\\\]])/g, '$1');return 72;\n                break;\n              case 43:\n                return 'INVALID';\n                break;\n              case 44:\n                return 5;\n                break;}\n\n          };\n          lexer.rules = [/^(?:[^\\x00]*?(?=(\\{\\{)))/, /^(?:[^\\x00]+)/, /^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/, /^(?:\\{\\{\\{\\{(?=[^\\/]))/, /^(?:\\{\\{\\{\\{\\/[^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=[=}\\s\\/.])\\}\\}\\}\\})/, /^(?:[^\\x00]*?(?=(\\{\\{\\{\\{)))/, /^(?:[\\s\\S]*?--(~)?\\}\\})/, /^(?:\\()/, /^(?:\\))/, /^(?:\\{\\{\\{\\{)/, /^(?:\\}\\}\\}\\})/, /^(?:\\{\\{(~)?>)/, /^(?:\\{\\{(~)?#>)/, /^(?:\\{\\{(~)?#\\*?)/, /^(?:\\{\\{(~)?\\/)/, /^(?:\\{\\{(~)?\\^\\s*(~)?\\}\\})/, /^(?:\\{\\{(~)?\\s*else\\s*(~)?\\}\\})/, /^(?:\\{\\{(~)?\\^)/, /^(?:\\{\\{(~)?\\s*else\\b)/, /^(?:\\{\\{(~)?\\{)/, /^(?:\\{\\{(~)?&)/, /^(?:\\{\\{(~)?!--)/, /^(?:\\{\\{(~)?![\\s\\S]*?\\}\\})/, /^(?:\\{\\{(~)?\\*?)/, /^(?:=)/, /^(?:\\.\\.)/, /^(?:\\.(?=([=~}\\s\\/.)|])))/, /^(?:[\\/.])/, /^(?:\\s+)/, /^(?:\\}(~)?\\}\\})/, /^(?:(~)?\\}\\})/, /^(?:\"(\\\\[\"]|[^\"])*\")/, /^(?:'(\\\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\\s)])))/, /^(?:false(?=([~}\\s)])))/, /^(?:undefined(?=([~}\\s)])))/, /^(?:null(?=([~}\\s)])))/, /^(?:-?[0-9]+(?:\\.[0-9]+)?(?=([~}\\s)])))/, /^(?:as\\s+\\|)/, /^(?:\\|)/, /^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)|]))))/, /^(?:\\[(\\\\\\]|[^\\]])*\\])/, /^(?:.)/, /^(?:$)/];\n          lexer.conditions = { \"mu\": { \"rules\": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], \"inclusive\": false }, \"emu\": { \"rules\": [2], \"inclusive\": false }, \"com\": { \"rules\": [6], \"inclusive\": false }, \"raw\": { \"rules\": [3, 4, 5], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 44], \"inclusive\": true } };\n          return lexer;\n        }();\n        parser.lexer = lexer;\n        function Parser() {\n          this.yy = {};\n        }Parser.prototype = parser;parser.Parser = Parser;\n        return new Parser();\n      }();exports.__esModule = true;\n      exports['default'] = handlebars;\n\n\n    }, {}], 15: [function (require, module, exports) {\n      /* eslint-disable new-cap */\n      'use strict';\n\n      exports.__esModule = true;\n      exports.print = print;\n      exports.PrintVisitor = PrintVisitor;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _visitor = require('./visitor');\n\n      var _visitor2 = _interopRequireDefault(_visitor);\n\n      function print(ast) {\n        return new PrintVisitor().accept(ast);\n      }\n\n      function PrintVisitor() {\n        this.padding = 0;\n      }\n\n      PrintVisitor.prototype = new _visitor2['default']();\n\n      PrintVisitor.prototype.pad = function (string) {\n        var out = '';\n\n        for (var i = 0, l = this.padding; i < l; i++) {\n          out += '  ';\n        }\n\n        out += string + '\\n';\n        return out;\n      };\n\n      PrintVisitor.prototype.Program = function (program) {\n        var out = '',\n        body = program.body,\n        i = undefined,\n        l = undefined;\n\n        if (program.blockParams) {\n          var blockParams = 'BLOCK PARAMS: [';\n          for (i = 0, l = program.blockParams.length; i < l; i++) {\n            blockParams += ' ' + program.blockParams[i];\n          }\n          blockParams += ' ]';\n          out += this.pad(blockParams);\n        }\n\n        for (i = 0, l = body.length; i < l; i++) {\n          out += this.accept(body[i]);\n        }\n\n        this.padding--;\n\n        return out;\n      };\n\n      PrintVisitor.prototype.MustacheStatement = function (mustache) {\n        return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');\n      };\n      PrintVisitor.prototype.Decorator = function (mustache) {\n        return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');\n      };\n\n      PrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (block) {\n        var out = '';\n\n        out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');\n        this.padding++;\n        out += this.pad(this.SubExpression(block));\n        if (block.program) {\n          out += this.pad('PROGRAM:');\n          this.padding++;\n          out += this.accept(block.program);\n          this.padding--;\n        }\n        if (block.inverse) {\n          if (block.program) {\n            this.padding++;\n          }\n          out += this.pad('{{^}}');\n          this.padding++;\n          out += this.accept(block.inverse);\n          this.padding--;\n          if (block.program) {\n            this.padding--;\n          }\n        }\n        this.padding--;\n\n        return out;\n      };\n\n      PrintVisitor.prototype.PartialStatement = function (partial) {\n        var content = 'PARTIAL:' + partial.name.original;\n        if (partial.params[0]) {\n          content += ' ' + this.accept(partial.params[0]);\n        }\n        if (partial.hash) {\n          content += ' ' + this.accept(partial.hash);\n        }\n        return this.pad('{{> ' + content + ' }}');\n      };\n      PrintVisitor.prototype.PartialBlockStatement = function (partial) {\n        var content = 'PARTIAL BLOCK:' + partial.name.original;\n        if (partial.params[0]) {\n          content += ' ' + this.accept(partial.params[0]);\n        }\n        if (partial.hash) {\n          content += ' ' + this.accept(partial.hash);\n        }\n\n        content += ' ' + this.pad('PROGRAM:');\n        this.padding++;\n        content += this.accept(partial.program);\n        this.padding--;\n\n        return this.pad('{{> ' + content + ' }}');\n      };\n\n      PrintVisitor.prototype.ContentStatement = function (content) {\n        return this.pad(\"CONTENT[ '\" + content.value + \"' ]\");\n      };\n\n      PrintVisitor.prototype.CommentStatement = function (comment) {\n        return this.pad(\"{{! '\" + comment.value + \"' }}\");\n      };\n\n      PrintVisitor.prototype.SubExpression = function (sexpr) {\n        var params = sexpr.params,\n        paramStrings = [],\n        hash = undefined;\n\n        for (var i = 0, l = params.length; i < l; i++) {\n          paramStrings.push(this.accept(params[i]));\n        }\n\n        params = '[' + paramStrings.join(', ') + ']';\n\n        hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';\n\n        return this.accept(sexpr.path) + ' ' + params + hash;\n      };\n\n      PrintVisitor.prototype.PathExpression = function (id) {\n        var path = id.parts.join('/');\n        return (id.data ? '@' : '') + 'PATH:' + path;\n      };\n\n      PrintVisitor.prototype.StringLiteral = function (string) {\n        return '\"' + string.value + '\"';\n      };\n\n      PrintVisitor.prototype.NumberLiteral = function (number) {\n        return 'NUMBER{' + number.value + '}';\n      };\n\n      PrintVisitor.prototype.BooleanLiteral = function (bool) {\n        return 'BOOLEAN{' + bool.value + '}';\n      };\n\n      PrintVisitor.prototype.UndefinedLiteral = function () {\n        return 'UNDEFINED';\n      };\n\n      PrintVisitor.prototype.NullLiteral = function () {\n        return 'NULL';\n      };\n\n      PrintVisitor.prototype.Hash = function (hash) {\n        var pairs = hash.pairs,\n        joinedPairs = [];\n\n        for (var i = 0, l = pairs.length; i < l; i++) {\n          joinedPairs.push(this.accept(pairs[i]));\n        }\n\n        return 'HASH{' + joinedPairs.join(', ') + '}';\n      };\n      PrintVisitor.prototype.HashPair = function (pair) {\n        return pair.key + '=' + this.accept(pair.value);\n      };\n      /* eslint-enable new-cap */\n\n\n    }, { \"./visitor\": 16 }], 16: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _exception = require('../exception');\n\n      var _exception2 = _interopRequireDefault(_exception);\n\n      function Visitor() {\n        this.parents = [];\n      }\n\n      Visitor.prototype = {\n        constructor: Visitor,\n        mutating: false,\n\n        // Visits a given value. If mutating, will replace the value if necessary.\n        acceptKey: function acceptKey(node, name) {\n          var value = this.accept(node[name]);\n          if (this.mutating) {\n            // Hacky sanity check: This may have a few false positives for type for the helper\n            // methods but will generally do the right thing without a lot of overhead.\n            if (value && !Visitor.prototype[value.type]) {\n              throw new _exception2['default']('Unexpected node type \"' + value.type + '\" found when accepting ' + name + ' on ' + node.type);\n            }\n            node[name] = value;\n          }\n        },\n\n        // Performs an accept operation with added sanity check to ensure\n        // required keys are not removed.\n        acceptRequired: function acceptRequired(node, name) {\n          this.acceptKey(node, name);\n\n          if (!node[name]) {\n            throw new _exception2['default'](node.type + ' requires ' + name);\n          }\n        },\n\n        // Traverses a given array. If mutating, empty respnses will be removed\n        // for child elements.\n        acceptArray: function acceptArray(array) {\n          for (var i = 0, l = array.length; i < l; i++) {\n            this.acceptKey(array, i);\n\n            if (!array[i]) {\n              array.splice(i, 1);\n              i--;\n              l--;\n            }\n          }\n        },\n\n        accept: function accept(object) {\n          if (!object) {\n            return;\n          }\n\n          /* istanbul ignore next: Sanity code */\n          if (!this[object.type]) {\n            throw new _exception2['default']('Unknown type: ' + object.type, object);\n          }\n\n          if (this.current) {\n            this.parents.unshift(this.current);\n          }\n          this.current = object;\n\n          var ret = this[object.type](object);\n\n          this.current = this.parents.shift();\n\n          if (!this.mutating || ret) {\n            return ret;\n          } else if (ret !== false) {\n            return object;\n          }\n        },\n\n        Program: function Program(program) {\n          this.acceptArray(program.body);\n        },\n\n        MustacheStatement: visitSubExpression,\n        Decorator: visitSubExpression,\n\n        BlockStatement: visitBlock,\n        DecoratorBlock: visitBlock,\n\n        PartialStatement: visitPartial,\n        PartialBlockStatement: function PartialBlockStatement(partial) {\n          visitPartial.call(this, partial);\n\n          this.acceptKey(partial, 'program');\n        },\n\n        ContentStatement: function ContentStatement() /* content */{},\n        CommentStatement: function CommentStatement() /* comment */{},\n\n        SubExpression: visitSubExpression,\n\n        PathExpression: function PathExpression() /* path */{},\n\n        StringLiteral: function StringLiteral() /* string */{},\n        NumberLiteral: function NumberLiteral() /* number */{},\n        BooleanLiteral: function BooleanLiteral() /* bool */{},\n        UndefinedLiteral: function UndefinedLiteral() /* literal */{},\n        NullLiteral: function NullLiteral() /* literal */{},\n\n        Hash: function Hash(hash) {\n          this.acceptArray(hash.pairs);\n        },\n        HashPair: function HashPair(pair) {\n          this.acceptRequired(pair, 'value');\n        } };\n\n\n      function visitSubExpression(mustache) {\n        this.acceptRequired(mustache, 'path');\n        this.acceptArray(mustache.params);\n        this.acceptKey(mustache, 'hash');\n      }\n      function visitBlock(block) {\n        visitSubExpression.call(this, block);\n\n        this.acceptKey(block, 'program');\n        this.acceptKey(block, 'inverse');\n      }\n      function visitPartial(partial) {\n        this.acceptRequired(partial, 'name');\n        this.acceptArray(partial.params);\n        this.acceptKey(partial, 'hash');\n      }\n\n      exports['default'] = Visitor;\n      module.exports = exports['default'];\n\n\n    }, { \"../exception\": 20 }], 17: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _visitor = require('./visitor');\n\n      var _visitor2 = _interopRequireDefault(_visitor);\n\n      function WhitespaceControl() {\n        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        this.options = options;\n      }\n      WhitespaceControl.prototype = new _visitor2['default']();\n\n      WhitespaceControl.prototype.Program = function (program) {\n        var doStandalone = !this.options.ignoreStandalone;\n\n        var isRoot = !this.isRootSeen;\n        this.isRootSeen = true;\n\n        var body = program.body;\n        for (var i = 0, l = body.length; i < l; i++) {\n          var current = body[i],\n          strip = this.accept(current);\n\n          if (!strip) {\n            continue;\n          }\n\n          var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n          _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n          openStandalone = strip.openStandalone && _isPrevWhitespace,\n          closeStandalone = strip.closeStandalone && _isNextWhitespace,\n          inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n          if (strip.close) {\n            omitRight(body, i, true);\n          }\n          if (strip.open) {\n            omitLeft(body, i, true);\n          }\n\n          if (doStandalone && inlineStandalone) {\n            omitRight(body, i);\n\n            if (omitLeft(body, i)) {\n              // If we are on a standalone node, save the indent info for partials\n              if (current.type === 'PartialStatement') {\n                // Pull out the whitespace from the final line\n                current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n              }\n            }\n          }\n          if (doStandalone && openStandalone) {\n            omitRight((current.program || current.inverse).body);\n\n            // Strip out the previous content node if it's whitespace only\n            omitLeft(body, i);\n          }\n          if (doStandalone && closeStandalone) {\n            // Always strip the next node\n            omitRight(body, i);\n\n            omitLeft((current.inverse || current.program).body);\n          }\n        }\n\n        return program;\n      };\n\n      WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {\n        this.accept(block.program);\n        this.accept(block.inverse);\n\n        // Find the inverse program that is involed with whitespace stripping.\n        var program = block.program || block.inverse,\n        inverse = block.program && block.inverse,\n        firstInverse = inverse,\n        lastInverse = inverse;\n\n        if (inverse && inverse.chained) {\n          firstInverse = inverse.body[0].program;\n\n          // Walk the inverse chain to find the last inverse that is actually in the chain.\n          while (lastInverse.chained) {\n            lastInverse = lastInverse.body[lastInverse.body.length - 1].program;\n          }\n        }\n\n        var strip = {\n          open: block.openStrip.open,\n          close: block.closeStrip.close,\n\n          // Determine the standalone candiacy. Basically flag our content as being possibly standalone\n          // so our parent can determine if we actually are standalone\n          openStandalone: isNextWhitespace(program.body),\n          closeStandalone: isPrevWhitespace((firstInverse || program).body) };\n\n\n        if (block.openStrip.close) {\n          omitRight(program.body, null, true);\n        }\n\n        if (inverse) {\n          var inverseStrip = block.inverseStrip;\n\n          if (inverseStrip.open) {\n            omitLeft(program.body, null, true);\n          }\n\n          if (inverseStrip.close) {\n            omitRight(firstInverse.body, null, true);\n          }\n          if (block.closeStrip.open) {\n            omitLeft(lastInverse.body, null, true);\n          }\n\n          // Find standalone else statments\n          if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {\n            omitLeft(program.body);\n            omitRight(firstInverse.body);\n          }\n        } else if (block.closeStrip.open) {\n          omitLeft(program.body, null, true);\n        }\n\n        return strip;\n      };\n\n      WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {\n        return mustache.strip;\n      };\n\n      WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {\n        /* istanbul ignore next */\n        var strip = node.strip || {};\n        return {\n          inlineStandalone: true,\n          open: strip.open,\n          close: strip.close };\n\n      };\n\n      function isPrevWhitespace(body, i, isRoot) {\n        if (i === undefined) {\n          i = body.length;\n        }\n\n        // Nodes that end with newlines are considered whitespace (but are special\n        // cased for strip operations)\n        var prev = body[i - 1],\n        sibling = body[i - 2];\n        if (!prev) {\n          return isRoot;\n        }\n\n        if (prev.type === 'ContentStatement') {\n          return (sibling || !isRoot ? /\\r?\\n\\s*?$/ : /(^|\\r?\\n)\\s*?$/).test(prev.original);\n        }\n      }\n      function isNextWhitespace(body, i, isRoot) {\n        if (i === undefined) {\n          i = -1;\n        }\n\n        var next = body[i + 1],\n        sibling = body[i + 2];\n        if (!next) {\n          return isRoot;\n        }\n\n        if (next.type === 'ContentStatement') {\n          return (sibling || !isRoot ? /^\\s*?\\r?\\n/ : /^\\s*?(\\r?\\n|$)/).test(next.original);\n        }\n      }\n\n      // Marks the node to the right of the position as omitted.\n      // I.e. {{foo}}' ' will mark the ' ' node as omitted.\n      //\n      // If i is undefined, then the first child will be marked as such.\n      //\n      // If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n      // content is met.\n      function omitRight(body, i, multiple) {\n        var current = body[i == null ? 0 : i + 1];\n        if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {\n          return;\n        }\n\n        var original = current.value;\n        current.value = current.value.replace(multiple ? /^\\s+/ : /^[ \\t]*\\r?\\n?/, '');\n        current.rightStripped = current.value !== original;\n      }\n\n      // Marks the node to the left of the position as omitted.\n      // I.e. ' '{{foo}} will mark the ' ' node as omitted.\n      //\n      // If i is undefined then the last child will be marked as such.\n      //\n      // If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n      // content is met.\n      function omitLeft(body, i, multiple) {\n        var current = body[i == null ? body.length - 1 : i - 1];\n        if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {\n          return;\n        }\n\n        // We omit the last node if it's whitespace only and not preceeded by a non-content node.\n        var original = current.value;\n        current.value = current.value.replace(multiple ? /\\s+$/ : /[ \\t]+$/, '');\n        current.leftStripped = current.value !== original;\n        return current.leftStripped;\n      }\n\n      exports['default'] = WhitespaceControl;\n      module.exports = exports['default'];\n\n\n    }, { \"./visitor\": 16 }], 18: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.registerDefaultDecorators = registerDefaultDecorators;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _decoratorsInline = require('./decorators/inline');\n\n      var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);\n\n      function registerDefaultDecorators(instance) {\n        _decoratorsInline2['default'](instance);\n      }\n\n\n    }, { \"./decorators/inline\": 19 }], 19: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _utils = require('../utils');\n\n      exports['default'] = function (instance) {\n        instance.registerDecorator('inline', function (fn, props, container, options) {\n          var ret = fn;\n          if (!props.partials) {\n            props.partials = {};\n            ret = function ret(context, options) {\n              // Create a new partials stack frame prior to exec.\n              var original = container.partials;\n              container.partials = _utils.extend({}, original, props.partials);\n              var ret = fn(context, options);\n              container.partials = original;\n              return ret;\n            };\n          }\n\n          props.partials[options.args[0]] = options.fn;\n\n          return ret;\n        });\n      };\n\n      module.exports = exports['default'];\n\n\n    }, { \"../utils\": 33 }], 20: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];\n\n      function Exception(message, node) {\n        var loc = node && node.loc,\n        line = undefined,\n        column = undefined;\n        if (loc) {\n          line = loc.start.line;\n          column = loc.start.column;\n\n          message += ' - ' + line + ':' + column;\n        }\n\n        var tmp = Error.prototype.constructor.call(this, message);\n\n        // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n        for (var idx = 0; idx < errorProps.length; idx++) {\n          this[errorProps[idx]] = tmp[errorProps[idx]];\n        }\n\n        /* istanbul ignore else */\n        if (Error.captureStackTrace) {\n          Error.captureStackTrace(this, Exception);\n        }\n\n        try {\n          if (loc) {\n            this.lineNumber = line;\n\n            // Work around issue under safari where we can't directly set the column value\n            /* istanbul ignore next */\n            if (Object.defineProperty) {\n              Object.defineProperty(this, 'column', { value: column });\n            } else {\n              this.column = column;\n            }\n          }\n        } catch (nop) {\n          /* Ignore if the browser is very particular */\n        }\n      }\n\n      Exception.prototype = new Error();\n\n      exports['default'] = Exception;\n      module.exports = exports['default'];\n\n\n    }, {}], 21: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.registerDefaultHelpers = registerDefaultHelpers;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _helpersBlockHelperMissing = require('./helpers/block-helper-missing');\n\n      var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);\n\n      var _helpersEach = require('./helpers/each');\n\n      var _helpersEach2 = _interopRequireDefault(_helpersEach);\n\n      var _helpersHelperMissing = require('./helpers/helper-missing');\n\n      var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);\n\n      var _helpersIf = require('./helpers/if');\n\n      var _helpersIf2 = _interopRequireDefault(_helpersIf);\n\n      var _helpersLog = require('./helpers/log');\n\n      var _helpersLog2 = _interopRequireDefault(_helpersLog);\n\n      var _helpersLookup = require('./helpers/lookup');\n\n      var _helpersLookup2 = _interopRequireDefault(_helpersLookup);\n\n      var _helpersWith = require('./helpers/with');\n\n      var _helpersWith2 = _interopRequireDefault(_helpersWith);\n\n      function registerDefaultHelpers(instance) {\n        _helpersBlockHelperMissing2['default'](instance);\n        _helpersEach2['default'](instance);\n        _helpersHelperMissing2['default'](instance);\n        _helpersIf2['default'](instance);\n        _helpersLog2['default'](instance);\n        _helpersLookup2['default'](instance);\n        _helpersWith2['default'](instance);\n      }\n\n\n    }, { \"./helpers/block-helper-missing\": 22, \"./helpers/each\": 23, \"./helpers/helper-missing\": 24, \"./helpers/if\": 25, \"./helpers/log\": 26, \"./helpers/lookup\": 27, \"./helpers/with\": 28 }], 22: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _utils = require('../utils');\n\n      exports['default'] = function (instance) {\n        instance.registerHelper('blockHelperMissing', function (context, options) {\n          var inverse = options.inverse,\n          fn = options.fn;\n\n          if (context === true) {\n            return fn(this);\n          } else if (context === false || context == null) {\n            return inverse(this);\n          } else if (_utils.isArray(context)) {\n            if (context.length > 0) {\n              if (options.ids) {\n                options.ids = [options.name];\n              }\n\n              return instance.helpers.each(context, options);\n            } else {\n              return inverse(this);\n            }\n          } else {\n            if (options.data && options.ids) {\n              var data = _utils.createFrame(options.data);\n              data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n              options = { data: data };\n            }\n\n            return fn(context, options);\n          }\n        });\n      };\n\n      module.exports = exports['default'];\n\n\n    }, { \"../utils\": 33 }], 23: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _utils = require('../utils');\n\n      var _exception = require('../exception');\n\n      var _exception2 = _interopRequireDefault(_exception);\n\n      exports['default'] = function (instance) {\n        instance.registerHelper('each', function (context, options) {\n          if (!options) {\n            throw new _exception2['default']('Must pass iterator to #each');\n          }\n\n          var fn = options.fn,\n          inverse = options.inverse,\n          i = 0,\n          ret = '',\n          data = undefined,\n          contextPath = undefined;\n\n          if (options.data && options.ids) {\n            contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n          }\n\n          if (_utils.isFunction(context)) {\n            context = context.call(this);\n          }\n\n          if (options.data) {\n            data = _utils.createFrame(options.data);\n          }\n\n          function execIteration(field, index, last) {\n            if (data) {\n              data.key = field;\n              data.index = index;\n              data.first = index === 0;\n              data.last = !!last;\n\n              if (contextPath) {\n                data.contextPath = contextPath + field;\n              }\n            }\n\n            ret = ret + fn(context[field], {\n              data: data,\n              blockParams: _utils.blockParams([context[field], field], [contextPath + field, null]) });\n\n          }\n\n          if (context && (typeof context === \"undefined\" ? \"undefined\" : _typeof2(context)) === 'object') {\n            if (_utils.isArray(context)) {\n              for (var j = context.length; i < j; i++) {\n                if (i in context) {\n                  execIteration(i, i, i === context.length - 1);\n                }\n              }\n            } else {\n              var priorKey = undefined;\n\n              for (var key in context) {\n                if (context.hasOwnProperty(key)) {\n                  // We're running the iterations one step out of sync so we can detect\n                  // the last iteration without have to scan the object twice and create\n                  // an itermediate keys array.\n                  if (priorKey !== undefined) {\n                    execIteration(priorKey, i - 1);\n                  }\n                  priorKey = key;\n                  i++;\n                }\n              }\n              if (priorKey !== undefined) {\n                execIteration(priorKey, i - 1, true);\n              }\n            }\n          }\n\n          if (i === 0) {\n            ret = inverse(this);\n          }\n\n          return ret;\n        });\n      };\n\n      module.exports = exports['default'];\n\n\n    }, { \"../exception\": 20, \"../utils\": 33 }], 24: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      var _exception = require('../exception');\n\n      var _exception2 = _interopRequireDefault(_exception);\n\n      exports['default'] = function (instance) {\n        instance.registerHelper('helperMissing', function () /* [args, ]options */{\n          if (arguments.length === 1) {\n            // A missing field in a {{foo}} construct.\n            return undefined;\n          } else {\n            // Someone is actually trying to call something, blow up.\n            throw new _exception2['default']('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n          }\n        });\n      };\n\n      module.exports = exports['default'];\n\n\n    }, { \"../exception\": 20 }], 25: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _utils = require('../utils');\n\n      exports['default'] = function (instance) {\n        instance.registerHelper('if', function (conditional, options) {\n          if (_utils.isFunction(conditional)) {\n            conditional = conditional.call(this);\n          }\n\n          // Default behavior is to render the positive path if the value is truthy and not empty.\n          // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n          // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n          if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n            return options.inverse(this);\n          } else {\n            return options.fn(this);\n          }\n        });\n\n        instance.registerHelper('unless', function (conditional, options) {\n          return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });\n        });\n      };\n\n      module.exports = exports['default'];\n\n\n    }, { \"../utils\": 33 }], 26: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      exports['default'] = function (instance) {\n        instance.registerHelper('log', function () /* message, options */{\n          var args = [undefined],\n          options = arguments[arguments.length - 1];\n          for (var i = 0; i < arguments.length - 1; i++) {\n            args.push(arguments[i]);\n          }\n\n          var level = 1;\n          if (options.hash.level != null) {\n            level = options.hash.level;\n          } else if (options.data && options.data.level != null) {\n            level = options.data.level;\n          }\n          args[0] = level;\n\n          instance.log.apply(instance, args);\n        });\n      };\n\n      module.exports = exports['default'];\n\n\n    }, {}], 27: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      exports['default'] = function (instance) {\n        instance.registerHelper('lookup', function (obj, field) {\n          return obj && obj[field];\n        });\n      };\n\n      module.exports = exports['default'];\n\n\n    }, {}], 28: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _utils = require('../utils');\n\n      exports['default'] = function (instance) {\n        instance.registerHelper('with', function (context, options) {\n          if (_utils.isFunction(context)) {\n            context = context.call(this);\n          }\n\n          var fn = options.fn;\n\n          if (!_utils.isEmpty(context)) {\n            var data = options.data;\n            if (options.data && options.ids) {\n              data = _utils.createFrame(options.data);\n              data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);\n            }\n\n            return fn(context, {\n              data: data,\n              blockParams: _utils.blockParams([context], [data && data.contextPath]) });\n\n          } else {\n            return options.inverse(this);\n          }\n        });\n      };\n\n      module.exports = exports['default'];\n\n\n    }, { \"../utils\": 33 }], 29: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n\n      var _utils = require('./utils');\n\n      var logger = {\n        methodMap: ['debug', 'info', 'warn', 'error'],\n        level: 'info',\n\n        // Maps a given level value to the `methodMap` indexes above.\n        lookupLevel: function lookupLevel(level) {\n          if (typeof level === 'string') {\n            var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());\n            if (levelMap >= 0) {\n              level = levelMap;\n            } else {\n              level = parseInt(level, 10);\n            }\n          }\n\n          return level;\n        },\n\n        // Can be overridden in the host environment\n        log: function log(level) {\n          level = logger.lookupLevel(level);\n\n          if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n            var method = logger.methodMap[level];\n            if (!console[method]) {\n              // eslint-disable-line no-console\n              method = 'log';\n            }\n\n            for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              message[_key - 1] = arguments[_key];\n            }\n\n            console[method].apply(console, message); // eslint-disable-line no-console\n          }\n        } };\n\n\n      exports['default'] = logger;\n      module.exports = exports['default'];\n\n\n    }, { \"./utils\": 33 }], 30: [function (require, module, exports) {\n      (function (global) {\n        /* global window */\n        'use strict';\n\n        exports.__esModule = true;\n\n        exports['default'] = function (Handlebars) {\n          /* istanbul ignore next */\n          var root = typeof global !== 'undefined' ? global : window,\n          $Handlebars = root.Handlebars;\n          /* istanbul ignore next */\n          Handlebars.noConflict = function () {\n            if (root.Handlebars === Handlebars) {\n              root.Handlebars = $Handlebars;\n            }\n            return Handlebars;\n          };\n        };\n\n        module.exports = exports['default'];\n\n\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}], 31: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.checkRevision = checkRevision;\n      exports.template = template;\n      exports.wrapProgram = wrapProgram;\n      exports.resolvePartial = resolvePartial;\n      exports.invokePartial = invokePartial;\n      exports.noop = noop;\n      // istanbul ignore next\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}\n\n      // istanbul ignore next\n\n      function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj['default'] = obj;return newObj;}}\n\n      var _utils = require('./utils');\n\n      var Utils = _interopRequireWildcard(_utils);\n\n      var _exception = require('./exception');\n\n      var _exception2 = _interopRequireDefault(_exception);\n\n      var _base = require('./base');\n\n      function checkRevision(compilerInfo) {\n        var compilerRevision = compilerInfo && compilerInfo[0] || 1,\n        currentRevision = _base.COMPILER_REVISION;\n\n        if (compilerRevision !== currentRevision) {\n          if (compilerRevision < currentRevision) {\n            var runtimeVersions = _base.REVISION_CHANGES[currentRevision],\n            compilerVersions = _base.REVISION_CHANGES[compilerRevision];\n            throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');\n          } else {\n            // Use the embedded version info since the runtime doesn't know about this revision yet\n            throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');\n          }\n        }\n      }\n\n      function template(templateSpec, env) {\n        /* istanbul ignore next */\n        if (!env) {\n          throw new _exception2['default']('No environment passed to template');\n        }\n        if (!templateSpec || !templateSpec.main) {\n          throw new _exception2['default']('Unknown template object: ' + (typeof templateSpec === \"undefined\" ? \"undefined\" : _typeof2(templateSpec)));\n        }\n\n        templateSpec.main.decorator = templateSpec.main_d;\n\n        // Note: Using env.VM references rather than local var references throughout this section to allow\n        // for external users to override these as psuedo-supported APIs.\n        env.VM.checkRevision(templateSpec.compiler);\n\n        function invokePartialWrapper(partial, context, options) {\n          if (options.hash) {\n            context = Utils.extend({}, context, options.hash);\n            if (options.ids) {\n              options.ids[0] = true;\n            }\n          }\n\n          partial = env.VM.resolvePartial.call(this, partial, context, options);\n          var result = env.VM.invokePartial.call(this, partial, context, options);\n\n          if (result == null && env.compile) {\n            options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);\n            result = options.partials[options.name](context, options);\n          }\n          if (result != null) {\n            if (options.indent) {\n              var lines = result.split('\\n');\n              for (var i = 0, l = lines.length; i < l; i++) {\n                if (!lines[i] && i + 1 === l) {\n                  break;\n                }\n\n                lines[i] = options.indent + lines[i];\n              }\n              result = lines.join('\\n');\n            }\n            return result;\n          } else {\n            throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');\n          }\n        }\n\n        // Just add water\n        var container = {\n          strict: function strict(obj, name) {\n            if (!(name in obj)) {\n              throw new _exception2['default']('\"' + name + '\" not defined in ' + obj);\n            }\n            return obj[name];\n          },\n          lookup: function lookup(depths, name) {\n            var len = depths.length;\n            for (var i = 0; i < len; i++) {\n              if (depths[i] && depths[i][name] != null) {\n                return depths[i][name];\n              }\n            }\n          },\n          lambda: function lambda(current, context) {\n            return typeof current === 'function' ? current.call(context) : current;\n          },\n\n          escapeExpression: Utils.escapeExpression,\n          invokePartial: invokePartialWrapper,\n\n          fn: function fn(i) {\n            var ret = templateSpec[i];\n            ret.decorator = templateSpec[i + '_d'];\n            return ret;\n          },\n\n          programs: [],\n          program: function program(i, data, declaredBlockParams, blockParams, depths) {\n            var programWrapper = this.programs[i],\n            fn = this.fn(i);\n            if (data || depths || blockParams || declaredBlockParams) {\n              programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);\n            } else if (!programWrapper) {\n              programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n            }\n            return programWrapper;\n          },\n\n          data: function data(value, depth) {\n            while (value && depth--) {\n              value = value._parent;\n            }\n            return value;\n          },\n          merge: function merge(param, common) {\n            var obj = param || common;\n\n            if (param && common && param !== common) {\n              obj = Utils.extend({}, common, param);\n            }\n\n            return obj;\n          },\n\n          noop: env.VM.noop,\n          compilerInfo: templateSpec.compiler };\n\n\n        function ret(context) {\n          var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n          var data = options.data;\n\n          ret._setup(options);\n          if (!options.partial && templateSpec.useData) {\n            data = initData(context, data);\n          }\n          var depths = undefined,\n          blockParams = templateSpec.useBlockParams ? [] : undefined;\n          if (templateSpec.useDepths) {\n            if (options.depths) {\n              depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;\n            } else {\n              depths = [context];\n            }\n          }\n\n          function main(context /*, options*/) {\n            return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);\n          }\n          main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);\n          return main(context, options);\n        }\n        ret.isTop = true;\n\n        ret._setup = function (options) {\n          if (!options.partial) {\n            container.helpers = container.merge(options.helpers, env.helpers);\n\n            if (templateSpec.usePartial) {\n              container.partials = container.merge(options.partials, env.partials);\n            }\n            if (templateSpec.usePartial || templateSpec.useDecorators) {\n              container.decorators = container.merge(options.decorators, env.decorators);\n            }\n          } else {\n            container.helpers = options.helpers;\n            container.partials = options.partials;\n            container.decorators = options.decorators;\n          }\n        };\n\n        ret._child = function (i, data, blockParams, depths) {\n          if (templateSpec.useBlockParams && !blockParams) {\n            throw new _exception2['default']('must pass block params');\n          }\n          if (templateSpec.useDepths && !depths) {\n            throw new _exception2['default']('must pass parent depths');\n          }\n\n          return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);\n        };\n        return ret;\n      }\n\n      function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {\n        function prog(context) {\n          var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n          var currentDepths = depths;\n          if (depths && context != depths[0]) {\n            currentDepths = [context].concat(depths);\n          }\n\n          return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);\n        }\n\n        prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n        prog.program = i;\n        prog.depth = depths ? depths.length : 0;\n        prog.blockParams = declaredBlockParams || 0;\n        return prog;\n      }\n\n      function resolvePartial(partial, context, options) {\n        if (!partial) {\n          if (options.name === '@partial-block') {\n            var data = options.data;\n            while (data['partial-block'] === noop) {\n              data = data._parent;\n            }\n            partial = data['partial-block'];\n            data['partial-block'] = noop;\n          } else {\n            partial = options.partials[options.name];\n          }\n        } else if (!partial.call && !options.name) {\n          // This is a dynamic partial that returned a string\n          options.name = partial;\n          partial = options.partials[partial];\n        }\n        return partial;\n      }\n\n      function invokePartial(partial, context, options) {\n        options.partial = true;\n        if (options.ids) {\n          options.data.contextPath = options.ids[0] || options.data.contextPath;\n        }\n\n        var partialBlock = undefined;\n        if (options.fn && options.fn !== noop) {\n          options.data = _base.createFrame(options.data);\n          partialBlock = options.data['partial-block'] = options.fn;\n\n          if (partialBlock.partials) {\n            options.partials = Utils.extend({}, options.partials, partialBlock.partials);\n          }\n        }\n\n        if (partial === undefined && partialBlock) {\n          partial = partialBlock;\n        }\n\n        if (partial === undefined) {\n          throw new _exception2['default']('The partial ' + options.name + ' could not be found');\n        } else if (partial instanceof Function) {\n          return partial(context, options);\n        }\n      }\n\n      function noop() {\n        return '';\n      }\n\n      function initData(context, data) {\n        if (!data || !('root' in data)) {\n          data = data ? _base.createFrame(data) : {};\n          data.root = context;\n        }\n        return data;\n      }\n\n      function executeDecorators(fn, prog, container, depths, data, blockParams) {\n        if (fn.decorator) {\n          var props = {};\n          prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);\n          Utils.extend(prog, props);\n        }\n        return prog;\n      }\n\n\n    }, { \"./base\": 7, \"./exception\": 20, \"./utils\": 33 }], 32: [function (require, module, exports) {\n      // Build out our basic SafeString type\n      'use strict';\n\n      exports.__esModule = true;\n      function SafeString(string) {\n        this.string = string;\n      }\n\n      SafeString.prototype.toString = SafeString.prototype.toHTML = function () {\n        return '' + this.string;\n      };\n\n      exports['default'] = SafeString;\n      module.exports = exports['default'];\n\n\n    }, {}], 33: [function (require, module, exports) {\n      'use strict';\n\n      exports.__esModule = true;\n      exports.extend = extend;\n      exports.indexOf = indexOf;\n      exports.escapeExpression = escapeExpression;\n      exports.isEmpty = isEmpty;\n      exports.createFrame = createFrame;\n      exports.blockParams = blockParams;\n      exports.appendContextPath = appendContextPath;\n      var escape = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#x27;',\n        '`': '&#x60;',\n        '=': '&#x3D;' };\n\n\n      var badChars = /[&<>\"'`=]/g,\n      possible = /[&<>\"'`=]/;\n\n      function escapeChar(chr) {\n        return escape[chr];\n      }\n\n      function extend(obj /* , ...source */) {\n        for (var i = 1; i < arguments.length; i++) {\n          for (var key in arguments[i]) {\n            if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n              obj[key] = arguments[i][key];\n            }\n          }\n        }\n\n        return obj;\n      }\n\n      var toString = Object.prototype.toString;\n\n      exports.toString = toString;\n      // Sourced from lodash\n      // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n      /* eslint-disable func-style */\n      var isFunction = function isFunction(value) {\n        return typeof value === 'function';\n      };\n      // fallback for older versions of Chrome and Safari\n      /* istanbul ignore next */\n      if (isFunction(/x/)) {\n        exports.isFunction = isFunction = function isFunction(value) {\n          return typeof value === 'function' && toString.call(value) === '[object Function]';\n        };\n      }\n      exports.isFunction = isFunction;\n\n      /* eslint-enable func-style */\n\n      /* istanbul ignore next */\n      var isArray = Array.isArray || function (value) {\n        return value && (typeof value === \"undefined\" ? \"undefined\" : _typeof2(value)) === 'object' ? toString.call(value) === '[object Array]' : false;\n      };\n\n      exports.isArray = isArray;\n      // Older IE versions do not directly support indexOf so we must implement our own, sadly.\n\n      function indexOf(array, value) {\n        for (var i = 0, len = array.length; i < len; i++) {\n          if (array[i] === value) {\n            return i;\n          }\n        }\n        return -1;\n      }\n\n      function escapeExpression(string) {\n        if (typeof string !== 'string') {\n          // don't escape SafeStrings, since they're already safe\n          if (string && string.toHTML) {\n            return string.toHTML();\n          } else if (string == null) {\n            return '';\n          } else if (!string) {\n            return string + '';\n          }\n\n          // Force a string conversion as this will be done by the append regardless and\n          // the regex test will do this transparently behind the scenes, causing issues if\n          // an object's to string has escaped characters in it.\n          string = '' + string;\n        }\n\n        if (!possible.test(string)) {\n          return string;\n        }\n        return string.replace(badChars, escapeChar);\n      }\n\n      function isEmpty(value) {\n        if (!value && value !== 0) {\n          return true;\n        } else if (isArray(value) && value.length === 0) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n\n      function createFrame(object) {\n        var frame = extend({}, object);\n        frame._parent = object;\n        return frame;\n      }\n\n      function blockParams(params, ids) {\n        params.path = ids;\n        return params;\n      }\n\n      function appendContextPath(contextPath, id) {\n        return (contextPath ? contextPath + '.' : '') + id;\n      }\n\n\n    }, {}], 34: [function (require, module, exports) {\n      // USAGE:\n      // var handlebars = require('handlebars');\n      /* eslint-disable no-var */\n\n      // var local = handlebars.create();\n\n      var handlebars = require('../dist/cjs/handlebars')['default'];\n\n      var printer = require('../dist/cjs/handlebars/compiler/printer');\n      handlebars.PrintVisitor = printer.PrintVisitor;\n      handlebars.print = printer.print;\n\n      module.exports = handlebars;\n\n      // Publish a Node.js require() handler for .handlebars and .hbs files\n      function extension(module, filename) {\n        var fs = require('fs');\n        var templateString = fs.readFileSync(filename, 'utf8');\n        module.exports = handlebars.compile(templateString);\n      }\n      /* istanbul ignore else */\n      if (typeof require !== 'undefined' && require.extensions) {\n        require.extensions['.handlebars'] = extension;\n        require.extensions['.hbs'] = extension;\n      }\n\n    }, { \"../dist/cjs/handlebars\": 5, \"../dist/cjs/handlebars/compiler/printer\": 15, \"fs\": 63 }], 35: [function (require, module, exports) {\n      // Create a simple path alias to allow browserify to resolve\n      // the runtime on a supported path.\n      module.exports = require('./dist/cjs/handlebars.runtime')['default'];\n\n    }, { \"./dist/cjs/handlebars.runtime\": 6 }], 36: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true });\n\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      require('whatwg-fetch');\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      require('es6-promise').polyfill(); // needed for fetch\n\n      var Handlebars = require('handlebars');\n      /**\n                                               * Makes sure that a path is converted to an array.\n                                               * @param paths\n                                               * @returns {*}\n                                               */\n      var ensurePathArray = function ensurePathArray(paths) {\n        if (!paths) {\n          paths = [];\n        } else if (typeof paths === 'string') {\n          paths = [paths];\n        }\n        return paths;\n      };\n\n      /**\n          The Resource Manager.\n          @class ResourceManager\n          @description Represents a manager that loads any CSS and Javascript Resources on the fly.\n          */\n\n      var ResourceManager = function () {\n\n        /**\n                                          * Upon initialization.\n                                          * @memberOf ResourceManager\n                                          */\n        function ResourceManager() {\n          _classCallCheck(this, ResourceManager);\n\n          this._head = document.getElementsByTagName('head')[0];\n          this._cssPaths = {};\n          this._scriptMaps = {};\n          this._dataPromises = {};\n        }\n\n        /**\n           * Loads a javascript file.\n           * @param {string|Array} paths - The path to the view's js file\n           * @memberOf ResourceManager\n           * @return {Promise} Returns a promise that resolves when all scripts have been loaded\n           */\n\n\n        _createClass(ResourceManager, [{\n          key: 'loadScript',\n          value: function loadScript(paths) {\n            var script,\n            map,\n            loadPromises = [];\n            paths = ensurePathArray(paths);\n            paths.forEach(function (path) {\n              map = this._scriptMaps[path] = this._scriptMaps[path] || {};\n              if (!map.promise) {\n                map.path = path;\n                map.promise = new Promise(function (resolve) {\n                  script = this.createScriptElement();\n                  script.setAttribute('type', 'text/javascript');\n                  script.src = path;\n                  script.addEventListener('load', resolve);\n                  this._head.appendChild(script);\n                }.bind(this));\n              }\n              loadPromises.push(map.promise);\n            }.bind(this));\n            return Promise.all(loadPromises);\n          }\n\n          /**\n             * Removes a script that has the specified path from the head of the document.\n             * @param {string|Array} paths - The paths of the scripts to unload\n             * @memberOf ResourceManager\n             */ },\n\n        {\n          key: 'unloadScript',\n          value: function unloadScript(paths) {\n            var file;\n            return new Promise(function (resolve) {\n              paths = ensurePathArray(paths);\n              paths.forEach(function (path) {\n                file = this._head.querySelectorAll('script[src=\"' + path + '\"]')[0];\n                if (file) {\n                  this._head.removeChild(file);\n                  delete this._scriptMaps[path];\n                }\n              }.bind(this));\n              resolve();\n            }.bind(this));\n          }\n\n          /**\n             * Creates a new script element.\n             * @returns {HTMLElement}\n             */ },\n\n        {\n          key: 'createScriptElement',\n          value: function createScriptElement() {\n            return document.createElement('script');\n          }\n\n          /**\n             * Makes a request to get data and caches it.\n             * @param {string} url - The url to fetch data from\n             * @param [reqOptions] - options to be passed to fetch call\n             * @returns {*}\n             */ },\n\n        {\n          key: 'fetchData',\n          value: function fetchData(url) {\n            var _this = this;\n\n            var reqOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            var cacheId = url + JSON.stringify(reqOptions);\n\n            reqOptions.cache = reqOptions.cache === undefined ? true : reqOptions.cache;\n\n            if (!url) {\n              return Promise.resolve();\n            }\n            if (!this._dataPromises[cacheId] || !reqOptions.cache) {\n              this._dataPromises[cacheId] = fetch(url, reqOptions).catch(function (e) {\n                // if failure, remove cache so that subsequent\n                // requests will trigger new ajax call\n                _this._dataPromises[cacheId] = null;\n                throw e;\n              });\n            }\n            return this._dataPromises[cacheId];\n          }\n\n          /**\n             * Loads css files.\n             * @param {Array|String} paths - An array of css paths files to load\n             * @memberOf ResourceManager\n             * @return {Promise}\n             */ },\n\n        {\n          key: 'loadCss',\n          value: function loadCss(paths) {\n            return new Promise(function (resolve) {\n              paths = ensurePathArray(paths);\n              paths.forEach(function (path) {\n                // TODO: figure out a way to find out when css is guaranteed to be loaded,\n                // and make this return a truely asynchronous promise\n                if (!this._cssPaths[path]) {\n                  var el = document.createElement('link');\n                  el.setAttribute('rel', 'stylesheet');\n                  el.setAttribute('href', path);\n                  this._head.appendChild(el);\n                  this._cssPaths[path] = el;\n                }\n              }.bind(this));\n              resolve();\n            }.bind(this));\n          }\n\n          /**\n             * Unloads css paths.\n             * @param {string|Array} paths - The css paths to unload\n             * @memberOf ResourceManager\n             * @return {Promise}\n             */ },\n\n        {\n          key: 'unloadCss',\n          value: function unloadCss(paths) {\n            var el;\n            return new Promise(function (resolve) {\n              paths = ensurePathArray(paths);\n              paths.forEach(function (path) {\n                el = this._cssPaths[path];\n                if (el) {\n                  this._head.removeChild(el);\n                  this._cssPaths[path] = null;\n                }\n              }.bind(this));\n              resolve();\n            }.bind(this));\n          }\n\n          /**\n             * Parses a template into a DOM element, then returns element back to you.\n             * @param {string} path - The path to the template\n             * @param {HTMLElement} [el] - The element to attach template to\n             * @param {Object|Array} [hbsData] - The data to use for the handlebar template (if applicable)\n             * @returns {Promise} Returns a promise that resolves with contents of template file\n             */ },\n\n        {\n          key: 'loadTemplate',\n          value: function loadTemplate(path, el, hbsData) {\n\n            var isHandlebarFile = function isHandlebarFile(filePath) {\n              if (filePath) {\n                var frags = filePath.split('.');\n                var ext = frags[frags.length - 1];\n                return ext === 'hbs';\n              }\n            };\n\n            if (!path) {\n              return Promise.resolve();\n            }\n\n            return fetch(path).then(function (resp) {\n              return resp.text().then(function (contents) {\n                if (isHandlebarFile(path)) {\n                  contents = Handlebars.compile(contents)(hbsData || {});\n                }\n                if (el) {\n                  el.innerHTML = contents;\n                  contents = el;\n                }\n                return contents;\n              });\n            });\n          }\n\n          /**\n             * Removes all cached resources.\n             * @memberOf ResourceManager\n             */ },\n\n        {\n          key: 'flush',\n          value: function flush() {\n            this.unloadCss(Object.getOwnPropertyNames(this._cssPaths));\n            this._cssPaths = {};\n            for (var s in this._scriptMaps) {\n              if (this._scriptMaps.hasOwnProperty(s)) {\n                var map = this._scriptMaps[s];\n                this.unloadScript(map.path);\n              }\n            }\n            this._scriptMaps = {};\n            this._dataPromises = {};\n          } }]);\n\n\n        return ResourceManager;\n      }();\n\n      exports.default = new ResourceManager();\n\n    }, { \"es6-promise\": 4, \"handlebars\": 34, \"whatwg-fetch\": 57 }], 37: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true });\n\n\n      var _typeof = typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\" ? function (obj) {return typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);} : function (obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof2(obj);};\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      var _resourceManagerJs = require('resource-manager-js');\n\n      var _resourceManagerJs2 = _interopRequireDefault(_resourceManagerJs);\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      var Promise = require('es6-promise').Promise;\n      var runtime = require('handlebars/runtime');\n\n      /**\n                                                    * Takes a value and separates the number and unit into a key/value map.\n                                                    * @param v - The value\n                                                    * @returns {{num: Number, unit: string}} Returns the map\n                                                    * @private\n                                                    */\n      var getCssPropUnitMap = function getCssPropUnitMap(v) {\n        v.trim();\n        var num = v.match('[0-9\\.]+'),\n        unit = 'ms';\n\n        num = num ? num[0] : '';\n        if (num) {\n          unit = v.split(num)[1];\n          num = Number(num);\n        }\n        return {\n          num: num,\n          unit: unit };\n\n      };\n\n      /**\n          * Converts a css timing unit value into milliseconds.\n          * @param {string} val - The value string\n          * @returns {string} Returns the timing unit value in milliseconds\n          */\n      var convertCssTimeValueToMilliseconds = function convertCssTimeValueToMilliseconds(val) {\n        var number = getCssPropUnitMap(val).num,\n        unit = val.replace(number, '');\n        if (unit === 's') {\n          val = number * 1000;\n        } else {\n          val = number;\n        }\n        return val + 'ms';\n      };\n\n      /**\n          * Takes a css property name and returns the javascript version of it.\n          * @param {string} cssProp - The css property\n          * @returns {string} Returns the javascript version\n          * @private\n          */\n      var getJsPropName = function getJsPropName(cssProp) {\n        // convert to camelCase\n        return cssProp.replace(/-([a-z])/g, function (letter) {\n          return letter[1].toUpperCase();\n        });\n      };\n\n      /**\n          * Bubbles up each parent node of the element, triggering the callback on each element until traversal\n          * either runs out of parent nodes, reaches the document element, or if callback returns a falsy value\n          * @param {Function} callback - A callback that fires which gets passed the current element\n          * @param {HTMLElement} [startEl] - The element where traversal will begin (including the passed element), defaults to current el\n          */\n      var traverseEachParent = function traverseEachParent(callback, startEl) {\n        var parentNode = startEl;\n        var predicate = null;\n        // check if the node has classname property, if not, we know we're at the #document element\n        while (parentNode && typeof parentNode.className === 'string') {\n          predicate = callback(parentNode);\n          if (predicate !== undefined && !predicate) {\n            break;\n          }\n          parentNode = parentNode.parentNode;\n        }\n      };\n\n      /**\n          * A function that fires when the module's load() method is called\n          * @callback Module~onLoad\n          * @return {*} May return a promise when done\n          */\n\n      /**\n              * A function that fires when the module's show() method is called\n              * which can be overridden by subclass custom implementations.\n              * @callback Module~onShow\n              * @return {*} May return a promise when done\n              */\n\n      /**\n                  * A function that fires when the module's hide() method is called\n                  * which can be overridden by subclass custom implementations.\n                  * @callback Module~onHide\n                  */\n\n      /**\n                      * A function that fires when the module's enable() method is called\n                      * @callback Module~onEnable\n                      */\n\n      /**\n                          * A function that fires when the module's disable() method is called\n                          * @callback Module~onDisable\n                          */\n\n      /**\n                              * A function that fires when the error() method is called\n                              * @callback Module~onError\n                              * @param {Object} [e] - The error object that was triggered\n                              */\n\n      /**\n                                  * @class Module\n                                  * @description Base class that represents all modules of an App.\n                                  */\n\n      var Module = function () {\n\n        /**\n                                 * Initialization.\n                                 * @param {HTMLElement} el - The module element\n                                 * @param {Object} [options] - An object of options\n                                 * @param {string} [options.loadedClass] - The class that will be applied to the module element when it is loaded\n                                 * @param {string} [options.activeClass] - The class that will be applied to the module element when it is shown\n                                 * @param {string} [options.disabledClass] - The class that will be applied to the module element when disabled\n                                 * @param {string} [options.errorClass] - The class that will be applied to the module element when it has a load error\n                                 * @param {Array|string} [options.styles] - Array of stylesheet urls or single url\n                                 * @param {string|HTMLTemplateElement|HTMLElement} [options.template] - The template to load (can be url to html or handlebars file or html template, just an element, or an html string)\n                                 * @param {Object|string} [options.data] - The data or url to the module's data\n                                 * @param {Object} [options.requestOptions] - The request options to use when running the fetch method to get data\n                                 * @param {Module~onLoad} [options.onLoad] - A function that fires when module's load() method is called\n                                 * @param {Module~onShow} [options.onShow] - A function that fires when module is shown\n                                 * @param {Module~onHide} [options.onHide] - A function that fires when module is hidden\n                                 * @param {Module~onEnable} [options.onEnable] - A function that fires when module is enabled\n                                 * @param {Module~onDisable} [options.onDisable] - A function that fires when module is disabled\n                                 * @param {Module~onError} [options.onError] - A function that fires when module goes into error state\n                                 * @param {Object} [options.helpers] - An object containing a mapping of handlebar helper ids (keys) to their functions (values) to use when handlebar compiling\n                                 */\n        function Module(el, options) {\n          _classCallCheck(this, Module);\n\n          options = options || {};\n\n          if (!el) {\n            console.error(\"Module error: No element was passed to constructor\");\n          }\n\n          this.el = el;\n\n          var defaultOptions = {\n            loadedClass: 'module-loaded',\n            activeClass: 'module-active',\n            disabledClass: 'module-disabled',\n            errorClass: 'module-error',\n            styles: [],\n            template: \"\",\n            data: null,\n            requestOptions: null,\n            onLoad: function onLoad() {},\n            onShow: function onShow() {},\n            onHide: function onHide() {},\n            onEnable: function onEnable() {},\n            onDisable: function onDisable() {},\n            onError: function onError() {},\n            helpers: {} };\n\n\n          // we are adding default options to passed custom options\n          // to ensure all expected options exist when instantiating sub classes\n          for (var name in defaultOptions) {\n            if (defaultOptions.hasOwnProperty(name)) {\n              if (!options[name]) {\n                options[name] = defaultOptions[name];\n              }\n            }\n          }\n\n          this.options = options;\n\n          // setup helpers\n          for (var _name in options.helpers) {\n            if (options.helpers.hasOwnProperty(_name)) {\n              runtime.registerHelper(_name, options.helpers[_name]);\n            }\n          }\n\n          this._handleElementInitialState();\n\n          this.subModules = {};\n          this.active = false;\n          this.loaded = false;\n          this._elChildren = [];\n          this.loadStatus = 'notLoaded';\n        }\n\n        /**\n           * Loads the module's styles, template, and data and applies loaded css classes and state.\n           * @return {Promise}\n           */\n\n\n        _createClass(Module, [{\n          key: 'load',\n          value: function load() {\n            var _this = this;\n\n            if (!this.loaded) {\n              this.loadStatus = 'loading';\n              // load all subModules\n              var loadPromises = [];\n              for (var key in this.subModules) {\n                if (this.subModules.hasOwnProperty(key)) {\n                  var view = this.subModules[key];\n                  loadPromises.push(view.load());\n                }\n              }\n              return Promise.all(loadPromises).then(function () {\n                return _this.getStyles(_this.options.styles).then(function () {\n                  return _this.fetchData(_this.options.data, _this.options.requestOptions).then(function (data) {\n                    return _this.getTemplate(data).then(function (nodes) {\n                      nodes = nodes || [];\n                      var frag = document.createDocumentFragment();\n                      // hold reference to children to remove them later\n                      while (nodes.length) {\n                        // order matters here so we always start from the first node\n                        var node = nodes[0];\n                        _this._elChildren.push(node);\n                        // appending child changes length of nodes array\n                        frag.appendChild(node);\n                      }\n                      _this.el.appendChild(frag);\n                      _this.loaded = true;\n                      _this.loadStatus = 'loaded';\n                      if (_this.el) {\n                        _this.el.classList.add(_this.options.loadedClass);\n                      }\n                      _this.options.onLoad();\n                    });\n                  });\n                });\n              }).catch(function (e) {\n                _this.error(e);\n                // throw error to reject promise\n                throw e;\n              });\n            } else {\n              return Promise.resolve();\n            }\n          }\n\n          /**\n             * Makes a request to get the data for the module.\n             * @param {string|Object} url - The url to fetch data from or data object\n             * @param [options] - fetch options\n             * @returns {*}\n             */ },\n\n        {\n          key: 'fetchData',\n          value: function fetchData(url, options) {\n            if (typeof url !== 'string') {\n              return Promise.resolve(url);\n            }\n            return _resourceManagerJs2.default.fetchData(url, options);\n          }\n\n          /**\n             * Gets the css files for the module.\n             * @param cssUrl\n             * @return {Promise}\n             */ },\n\n        {\n          key: 'getStyles',\n          value: function getStyles(cssUrl) {\n            return _resourceManagerJs2.default.loadCss(cssUrl);\n          }\n\n          /**\n             * Gets the html template for the module.\n             * @param {Object} [data] - The data to inject (if template is a handlebar file)\n             * @returns {Promise} Returns a document fragment containing the contents of the template with the data injected\n             */ },\n\n        {\n          key: 'getTemplate',\n          value: function getTemplate(data) {\n            var template = this.options.template || '';\n\n            if (!template) {\n              return Promise.resolve();\n            }\n\n            var isHandlebarFile = function isHandlebarFile(filePath) {\n              if (filePath) {\n                var frags = filePath.split('.');\n                var ext = frags[frags.length - 1];\n                return ext === 'hbs';\n              }\n            };\n\n            if (this._isHTMLTemplate(template)) {\n              // template element\n              // TODO: update to accommodate situations where the user wants to adoptNode instead of cloning it\n              var tpl = document.importNode(template.content, true);\n              return Promise.resolve(tpl.childNodes);\n            } else if (template instanceof HTMLElement) {\n              // already an html element\n              var frag = document.createDocumentFragment();\n              frag.appendChild(template);\n              return Promise.resolve(frag.childNodes);\n            } else {\n              var _ret = function () {\n                // html or handlebar file\n                var tempDiv = document.createElement('div');\n                return {\n                  v: _resourceManagerJs2.default.loadTemplate(template, tempDiv, data).then(function (html) {\n                    return tempDiv.childNodes;\n                  }) };\n\n              }();\n\n              if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n            }\n          }\n\n          /**\n             * Checks if the provided template argument is indeed an html template element.\n             * This is mainly for testing purposes where phantom is not aware of HTMLTemplateElement\n             * @param template\n             * @returns {boolean}\n             * @private\n             */ },\n\n        {\n          key: '_isHTMLTemplate',\n          value: function _isHTMLTemplate(template) {\n            return template instanceof HTMLTemplateElement;\n          }\n\n          /**\n             * Triggers a load error on the module.\n             * @param {Object} [err] - The error object to trigger\n             * @return {Promise} Returns a promise when erroring operation is complete\n             */ },\n\n        {\n          key: 'error',\n          value: function error(err) {\n            var e = err || new Error();\n\n            this.el.classList.add(this.options.errorClass);\n\n            this.errored = true;\n            this.loaded = false;\n            this.loadStatus = 'notLoaded';\n\n            this.options.onError(e);\n            return this.waitForTransition().then(function () {\n              return e;\n            });\n          }\n\n          /**\n             * Enables the module.\n             * @return {Promise}\n             */ },\n\n        {\n          key: 'enable',\n          value: function enable() {\n            var el = this.el;\n            if (el) {\n              el.classList.remove(this.options.disabledClass);\n            }\n            this.disabled = false;\n            this.options.onEnable();\n            return this.waitForTransition();\n          }\n\n          /**\n             * Disables the module.\n             * @return {Promise}\n             */ },\n\n        {\n          key: 'disable',\n          value: function disable() {\n            var el = this.el;\n            if (el) {\n              el.classList.add(this.options.disabledClass);\n            }\n            this.disabled = true;\n\n            this.options.onDisable();\n            return this.waitForTransition();\n          }\n\n          /**\n             * Shows the module.\n             * @return {Promise}\n             */ },\n\n        {\n          key: 'show',\n          value: function show() {\n            var el = this.el;\n            if (el) {\n              el.classList.add(this.options.activeClass);\n            }\n            this.active = true;\n            this.options.onShow();\n            return this.waitForTransition();\n          }\n\n          /**\n             * Hides the module.\n             * @return {Promise}\n             */ },\n\n        {\n          key: 'hide',\n          value: function hide() {\n            var el = this.el;\n            if (el) {\n              el.classList.remove(this.options.activeClass);\n            }\n            this.active = false;\n            this.options.onHide();\n            return this.waitForTransition();\n          }\n\n          /**\n             * Sets up element internally by evaluating its initial state.\n             * @private\n             */ },\n\n        {\n          key: '_handleElementInitialState',\n          value: function _handleElementInitialState() {\n            var el = this.el;\n            if (!el) {\n              return;\n            }\n            if (el.classList.contains(this.options.disabledClass)) {\n              this._origDisabled = true;\n              this.disable();\n            }\n\n            if (el.classList.contains(this.options.errorClass)) {\n              this._origError = true;\n              this.error(new Error());\n            }\n          }\n\n          /**\n             * Restores the elements classes back to the way they were before instantiation.\n             * @private\n             */ },\n\n        {\n          key: '_resetElementInitialState',\n          value: function _resetElementInitialState() {\n            var options = this.options,\n            disabledClass = options.disabledClass,\n            errorClass = options.errorClass;\n\n            if (!this.el) {\n              return;\n            }\n            if (this._origDisabled) {\n              this.el.classList.add(disabledClass);\n            } else {\n              this.el.classList.remove(disabledClass);\n            }\n\n            if (!this._origError) {\n              this.el.classList.remove(errorClass);\n            } else {\n              this.el.classList.add(errorClass);\n            }\n          }\n\n          /**\n             * Builds a transition promise that waits to resolve until the module el's CSS transition is completed (if applicable).\n             * @returns {Promise} Returns a promise that resolves when the element has finished animating\n             */ },\n\n        {\n          key: 'waitForTransition',\n          value: function waitForTransition() {\n            var _this2 = this;\n\n            var duration = this.getTransitionDuration();\n            return new Promise(function (resolve) {\n              if (duration > 0) {\n                setTimeout(resolve.bind(_this2, _this2.el), duration);\n              } else {\n                resolve(_this2.el);\n              }\n            });\n          }\n\n          /**\n             * Gets the time is takes for the element to transition to its show state.\n             * @returns {Number} Returns the total CSS transition time in milliseconds\n             */ },\n\n        {\n          key: 'getTransitionDuration',\n          value: function getTransitionDuration() {\n            var delayProp = this.getCssComputedProperty('transition-delay') || '0ms',\n            durationProp = this.getCssComputedProperty('transition-duration') || '0ms',\n            times = Array.isArray(durationProp) ? durationProp : [durationProp],\n            delay = Array.isArray(delayProp) ? delayProp : [delayProp],\n            highest = 0,\n            map;\n\n            times.push.apply(times, delay); // account for delay\n\n            // calculate highest number of time\n            times.forEach(function (value) {\n              value.split(',').forEach(function (v) {\n                v = convertCssTimeValueToMilliseconds(v);\n                map = getCssPropUnitMap(v);\n                if (map.num > highest) {\n                  highest = map.num;\n                }\n              });\n            });\n\n            return highest;\n          }\n\n          /**\n             * Gets the computed property of the element.\n             * @param {string} prop - The name of the property to get\n             * @returns {string} Returns the value of the property\n             */ },\n\n        {\n          key: 'getCssComputedProperty',\n          value: function getCssComputedProperty(prop) {\n            var style = window.getComputedStyle(this.el);\n            return style.getPropertyValue(prop) || this.el.style[getJsPropName(prop)];\n          }\n\n          /**\n             * Gets the closest ancestor element that has a css class.\n             * @param {string} className - The class name that the ancestor must have to match\n             * @param {Element} startTarget - The element the method should start from\n             */ },\n\n        {\n          key: 'getClosestAncestorElementByClassName',\n          value: function getClosestAncestorElementByClassName(className, startTarget) {\n            var result = null;\n            traverseEachParent(function (parent) {\n              if (parent.classList.contains(className)) {\n                result = parent;\n                return false;\n              }\n            }, startTarget || this.el.parentNode || this.el);\n            return result;\n          }\n\n          /**\n             * Destroys all nested views and cleans up.\n             */ },\n\n        {\n          key: 'destroy',\n          value: function destroy() {\n            var _this3 = this;\n\n            var subModules = this.subModules;\n\n            for (var key in subModules) {\n              if (subModules.hasOwnProperty(key) && subModules[key]) {\n                subModules[key].destroy();\n              }\n            }\n            this.subModules = {};\n            this.active = false;\n            this.loaded = false;\n            this.errored = false;\n            this.loadStatus = 'notLoaded';\n\n            this.el.classList.remove(this.options.loadedClass);\n            this.el.classList.remove(this.options.activeClass);\n\n            this._resetElementInitialState();\n\n            this._elChildren.forEach(function (el) {\n              if (_this3.el.contains(el)) {\n                _this3.el.removeChild(el);\n              }\n            });\n            this._elChildren = [];\n          } }]);\n\n\n        return Module;\n      }();\n\n      exports.default = Module;\n\n    }, { \"es6-promise\": 4, \"handlebars/runtime\": 35, \"resource-manager-js\": 36 }], 38: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = require('./lib');\n\n    }, { \"./lib\": 43 }], 39: [function (require, module, exports) {\n      'use strict';\n\n      var asap = require('asap/raw');\n\n      function noop() {}\n\n      // States:\n      //\n      // 0 - pending\n      // 1 - fulfilled with _value\n      // 2 - rejected with _value\n      // 3 - adopted the state of another promise, _value\n      //\n      // once the state is no longer pending (0) it is immutable\n\n      // All `_` prefixed properties will be reduced to `_{random number}`\n      // at build time to obfuscate them and discourage their use.\n      // We don't use symbols or Object.defineProperty to fully hide them\n      // because the performance isn't good enough.\n\n\n      // to avoid using try/catch inside critical functions, we\n      // extract them to here.\n      var LAST_ERROR = null;\n      var IS_ERROR = {};\n      function getThen(obj) {\n        try {\n          return obj.then;\n        } catch (ex) {\n          LAST_ERROR = ex;\n          return IS_ERROR;\n        }\n      }\n\n      function tryCallOne(fn, a) {\n        try {\n          return fn(a);\n        } catch (ex) {\n          LAST_ERROR = ex;\n          return IS_ERROR;\n        }\n      }\n      function tryCallTwo(fn, a, b) {\n        try {\n          fn(a, b);\n        } catch (ex) {\n          LAST_ERROR = ex;\n          return IS_ERROR;\n        }\n      }\n\n      module.exports = Promise;\n\n      function Promise(fn) {\n        if (_typeof2(this) !== 'object') {\n          throw new TypeError('Promises must be constructed via new');\n        }\n        if (typeof fn !== 'function') {\n          throw new TypeError('not a function');\n        }\n        this._45 = 0;\n        this._81 = 0;\n        this._65 = null;\n        this._54 = null;\n        if (fn === noop) return;\n        doResolve(fn, this);\n      }\n      Promise._10 = null;\n      Promise._97 = null;\n      Promise._61 = noop;\n\n      Promise.prototype.then = function (onFulfilled, onRejected) {\n        if (this.constructor !== Promise) {\n          return safeThen(this, onFulfilled, onRejected);\n        }\n        var res = new Promise(noop);\n        handle(this, new Handler(onFulfilled, onRejected, res));\n        return res;\n      };\n\n      function safeThen(self, onFulfilled, onRejected) {\n        return new self.constructor(function (resolve, reject) {\n          var res = new Promise(noop);\n          res.then(resolve, reject);\n          handle(self, new Handler(onFulfilled, onRejected, res));\n        });\n      };\n      function handle(self, deferred) {\n        while (self._81 === 3) {\n          self = self._65;\n        }\n        if (Promise._10) {\n          Promise._10(self);\n        }\n        if (self._81 === 0) {\n          if (self._45 === 0) {\n            self._45 = 1;\n            self._54 = deferred;\n            return;\n          }\n          if (self._45 === 1) {\n            self._45 = 2;\n            self._54 = [self._54, deferred];\n            return;\n          }\n          self._54.push(deferred);\n          return;\n        }\n        handleResolved(self, deferred);\n      }\n\n      function handleResolved(self, deferred) {\n        asap(function () {\n          var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;\n          if (cb === null) {\n            if (self._81 === 1) {\n              resolve(deferred.promise, self._65);\n            } else {\n              reject(deferred.promise, self._65);\n            }\n            return;\n          }\n          var ret = tryCallOne(cb, self._65);\n          if (ret === IS_ERROR) {\n            reject(deferred.promise, LAST_ERROR);\n          } else {\n            resolve(deferred.promise, ret);\n          }\n        });\n      }\n      function resolve(self, newValue) {\n        // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n        if (newValue === self) {\n          return reject(\n          self,\n          new TypeError('A promise cannot be resolved with itself.'));\n\n        }\n        if (\n        newValue && (\n        (typeof newValue === \"undefined\" ? \"undefined\" : _typeof2(newValue)) === 'object' || typeof newValue === 'function'))\n        {\n          var then = getThen(newValue);\n          if (then === IS_ERROR) {\n            return reject(self, LAST_ERROR);\n          }\n          if (\n          then === self.then &&\n          newValue instanceof Promise)\n          {\n            self._81 = 3;\n            self._65 = newValue;\n            finale(self);\n            return;\n          } else if (typeof then === 'function') {\n            doResolve(then.bind(newValue), self);\n            return;\n          }\n        }\n        self._81 = 1;\n        self._65 = newValue;\n        finale(self);\n      }\n\n      function reject(self, newValue) {\n        self._81 = 2;\n        self._65 = newValue;\n        if (Promise._97) {\n          Promise._97(self, newValue);\n        }\n        finale(self);\n      }\n      function finale(self) {\n        if (self._45 === 1) {\n          handle(self, self._54);\n          self._54 = null;\n        }\n        if (self._45 === 2) {\n          for (var i = 0; i < self._54.length; i++) {\n            handle(self, self._54[i]);\n          }\n          self._54 = null;\n        }\n      }\n\n      function Handler(onFulfilled, onRejected, promise) {\n        this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n        this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n        this.promise = promise;\n      }\n\n      /**\n         * Take a potentially misbehaving resolver function and make sure\n         * onFulfilled and onRejected are only called once.\n         *\n         * Makes no guarantees about asynchrony.\n         */\n      function doResolve(fn, promise) {\n        var done = false;\n        var res = tryCallTwo(fn, function (value) {\n          if (done) return;\n          done = true;\n          resolve(promise, value);\n        }, function (reason) {\n          if (done) return;\n          done = true;\n          reject(promise, reason);\n        });\n        if (!done && res === IS_ERROR) {\n          done = true;\n          reject(promise, LAST_ERROR);\n        }\n      }\n\n    }, { \"asap/raw\": 3 }], 40: [function (require, module, exports) {\n      'use strict';\n\n      var Promise = require('./core.js');\n\n      module.exports = Promise;\n      Promise.prototype.done = function (onFulfilled, onRejected) {\n        var self = arguments.length ? this.then.apply(this, arguments) : this;\n        self.then(null, function (err) {\n          setTimeout(function () {\n            throw err;\n          }, 0);\n        });\n      };\n\n    }, { \"./core.js\": 39 }], 41: [function (require, module, exports) {\n      'use strict';\n\n      //This file contains the ES6 extensions to the core Promises/A+ API\n\n      var Promise = require('./core.js');\n\n      module.exports = Promise;\n\n      /* Static Functions */\n\n      var TRUE = valuePromise(true);\n      var FALSE = valuePromise(false);\n      var NULL = valuePromise(null);\n      var UNDEFINED = valuePromise(undefined);\n      var ZERO = valuePromise(0);\n      var EMPTYSTRING = valuePromise('');\n\n      function valuePromise(value) {\n        var p = new Promise(Promise._61);\n        p._81 = 1;\n        p._65 = value;\n        return p;\n      }\n      Promise.resolve = function (value) {\n        if (value instanceof Promise) return value;\n\n        if (value === null) return NULL;\n        if (value === undefined) return UNDEFINED;\n        if (value === true) return TRUE;\n        if (value === false) return FALSE;\n        if (value === 0) return ZERO;\n        if (value === '') return EMPTYSTRING;\n\n        if ((typeof value === \"undefined\" ? \"undefined\" : _typeof2(value)) === 'object' || typeof value === 'function') {\n          try {\n            var then = value.then;\n            if (typeof then === 'function') {\n              return new Promise(then.bind(value));\n            }\n          } catch (ex) {\n            return new Promise(function (resolve, reject) {\n              reject(ex);\n            });\n          }\n        }\n        return valuePromise(value);\n      };\n\n      Promise.all = function (arr) {\n        var args = Array.prototype.slice.call(arr);\n\n        return new Promise(function (resolve, reject) {\n          if (args.length === 0) return resolve([]);\n          var remaining = args.length;\n          function res(i, val) {\n            if (val && ((typeof val === \"undefined\" ? \"undefined\" : _typeof2(val)) === 'object' || typeof val === 'function')) {\n              if (val instanceof Promise && val.then === Promise.prototype.then) {\n                while (val._81 === 3) {\n                  val = val._65;\n                }\n                if (val._81 === 1) return res(i, val._65);\n                if (val._81 === 2) reject(val._65);\n                val.then(function (val) {\n                  res(i, val);\n                }, reject);\n                return;\n              } else {\n                var then = val.then;\n                if (typeof then === 'function') {\n                  var p = new Promise(then.bind(val));\n                  p.then(function (val) {\n                    res(i, val);\n                  }, reject);\n                  return;\n                }\n              }\n            }\n            args[i] = val;\n            if (--remaining === 0) {\n              resolve(args);\n            }\n          }\n          for (var i = 0; i < args.length; i++) {\n            res(i, args[i]);\n          }\n        });\n      };\n\n      Promise.reject = function (value) {\n        return new Promise(function (resolve, reject) {\n          reject(value);\n        });\n      };\n\n      Promise.race = function (values) {\n        return new Promise(function (resolve, reject) {\n          values.forEach(function (value) {\n            Promise.resolve(value).then(resolve, reject);\n          });\n        });\n      };\n\n      /* Prototype Methods */\n\n      Promise.prototype['catch'] = function (onRejected) {\n        return this.then(null, onRejected);\n      };\n\n    }, { \"./core.js\": 39 }], 42: [function (require, module, exports) {\n      'use strict';\n\n      var Promise = require('./core.js');\n\n      module.exports = Promise;\n      Promise.prototype['finally'] = function (f) {\n        return this.then(function (value) {\n          return Promise.resolve(f()).then(function () {\n            return value;\n          });\n        }, function (err) {\n          return Promise.resolve(f()).then(function () {\n            throw err;\n          });\n        });\n      };\n\n    }, { \"./core.js\": 39 }], 43: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = require('./core.js');\n      require('./done.js');\n      require('./finally.js');\n      require('./es6-extensions.js');\n      require('./node-extensions.js');\n      require('./synchronous.js');\n\n    }, { \"./core.js\": 39, \"./done.js\": 40, \"./es6-extensions.js\": 41, \"./finally.js\": 42, \"./node-extensions.js\": 44, \"./synchronous.js\": 45 }], 44: [function (require, module, exports) {\n      'use strict';\n\n      // This file contains then/promise specific extensions that are only useful\n      // for node.js interop\n\n      var Promise = require('./core.js');\n      var asap = require('asap');\n\n      module.exports = Promise;\n\n      /* Static Functions */\n\n      Promise.denodeify = function (fn, argumentCount) {\n        if (\n        typeof argumentCount === 'number' && argumentCount !== Infinity)\n        {\n          return denodeifyWithCount(fn, argumentCount);\n        } else {\n          return denodeifyWithoutCount(fn);\n        }\n      };\n\n      var callbackFn =\n      'function (err, res) {' +\n      'if (err) { rj(err); } else { rs(res); }' +\n      '}';\n\n      function denodeifyWithCount(fn, argumentCount) {\n        var args = [];\n        for (var i = 0; i < argumentCount; i++) {\n          args.push('a' + i);\n        }\n        var body = [\n        'return function (' + args.join(',') + ') {',\n        'var self = this;',\n        'return new Promise(function (rs, rj) {',\n        'var res = fn.call(',\n        ['self'].concat(args).concat([callbackFn]).join(','),\n        ');',\n        'if (res &&',\n        '(typeof res === \"object\" || typeof res === \"function\") &&',\n        'typeof res.then === \"function\"',\n        ') {rs(res);}',\n        '});',\n        '};'].\n        join('');\n        return Function(['Promise', 'fn'], body)(Promise, fn);\n      }\n      function denodeifyWithoutCount(fn) {\n        var fnLength = Math.max(fn.length - 1, 3);\n        var args = [];\n        for (var i = 0; i < fnLength; i++) {\n          args.push('a' + i);\n        }\n        var body = [\n        'return function (' + args.join(',') + ') {',\n        'var self = this;',\n        'var args;',\n        'var argLength = arguments.length;',\n        'if (arguments.length > ' + fnLength + ') {',\n        'args = new Array(arguments.length + 1);',\n        'for (var i = 0; i < arguments.length; i++) {',\n        'args[i] = arguments[i];',\n        '}',\n        '}',\n        'return new Promise(function (rs, rj) {',\n        'var cb = ' + callbackFn + ';',\n        'var res;',\n        'switch (argLength) {',\n        args.concat(['extra']).map(function (_, index) {\n          return (\n            'case ' + index + ':' +\n            'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +\n            'break;');\n\n        }).join(''),\n        'default:',\n        'args[argLength] = cb;',\n        'res = fn.apply(self, args);',\n        '}',\n\n        'if (res &&',\n        '(typeof res === \"object\" || typeof res === \"function\") &&',\n        'typeof res.then === \"function\"',\n        ') {rs(res);}',\n        '});',\n        '};'].\n        join('');\n\n        return Function(\n        ['Promise', 'fn'],\n        body)(\n        Promise, fn);\n      }\n\n      Promise.nodeify = function (fn) {\n        return function () {\n          var args = Array.prototype.slice.call(arguments);\n          var callback =\n          typeof args[args.length - 1] === 'function' ? args.pop() : null;\n          var ctx = this;\n          try {\n            return fn.apply(this, arguments).nodeify(callback, ctx);\n          } catch (ex) {\n            if (callback === null || typeof callback == 'undefined') {\n              return new Promise(function (resolve, reject) {\n                reject(ex);\n              });\n            } else {\n              asap(function () {\n                callback.call(ctx, ex);\n              });\n            }\n          }\n        };\n      };\n\n      Promise.prototype.nodeify = function (callback, ctx) {\n        if (typeof callback != 'function') return this;\n\n        this.then(function (value) {\n          asap(function () {\n            callback.call(ctx, null, value);\n          });\n        }, function (err) {\n          asap(function () {\n            callback.call(ctx, err);\n          });\n        });\n      };\n\n    }, { \"./core.js\": 39, \"asap\": 2 }], 45: [function (require, module, exports) {\n      'use strict';\n\n      var Promise = require('./core.js');\n\n      module.exports = Promise;\n      Promise.enableSynchronous = function () {\n        Promise.prototype.isPending = function () {\n          return this.getState() == 0;\n        };\n\n        Promise.prototype.isFulfilled = function () {\n          return this.getState() == 1;\n        };\n\n        Promise.prototype.isRejected = function () {\n          return this.getState() == 2;\n        };\n\n        Promise.prototype.getValue = function () {\n          if (this._81 === 3) {\n            return this._65.getValue();\n          }\n\n          if (!this.isFulfilled()) {\n            throw new Error('Cannot get a value of an unfulfilled promise.');\n          }\n\n          return this._65;\n        };\n\n        Promise.prototype.getReason = function () {\n          if (this._81 === 3) {\n            return this._65.getReason();\n          }\n\n          if (!this.isRejected()) {\n            throw new Error('Cannot get a rejection reason of a non-rejected promise.');\n          }\n\n          return this._65;\n        };\n\n        Promise.prototype.getState = function () {\n          if (this._81 === 3) {\n            return this._65.getState();\n          }\n          if (this._81 === -1 || this._81 === -2) {\n            return 0;\n          }\n\n          return this._81;\n        };\n      };\n\n      Promise.disableSynchronous = function () {\n        Promise.prototype.isPending = undefined;\n        Promise.prototype.isFulfilled = undefined;\n        Promise.prototype.isRejected = undefined;\n        Promise.prototype.getValue = undefined;\n        Promise.prototype.getReason = undefined;\n        Promise.prototype.getState = undefined;\n      };\n\n    }, { \"./core.js\": 39 }], 46: [function (require, module, exports) {\n      /*\n                                                                        * Copyright 2009-2011 Mozilla Foundation and contributors\n                                                                        * Licensed under the New BSD license. See LICENSE.txt or:\n                                                                        * http://opensource.org/licenses/BSD-3-Clause\n                                                                        */\n      exports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;\n      exports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;\n      exports.SourceNode = require('./source-map/source-node').SourceNode;\n\n    }, { \"./source-map/source-map-consumer\": 53, \"./source-map/source-map-generator\": 54, \"./source-map/source-node\": 55 }], 47: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        var util = require('./util');\n\n        /**\n                                       * A data structure which is a combination of an array and a set. Adding a new\n                                       * member is O(1), testing for membership is O(1), and finding the index of an\n                                       * element is O(1). Removing elements from the set is not supported. Only\n                                       * strings are supported for membership.\n                                       */\n        function ArraySet() {\n          this._array = [];\n          this._set = {};\n        }\n\n        /**\n           * Static method for creating ArraySet instances from an existing array.\n           */\n        ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n          var set = new ArraySet();\n          for (var i = 0, len = aArray.length; i < len; i++) {\n            set.add(aArray[i], aAllowDuplicates);\n          }\n          return set;\n        };\n\n        /**\n            * Return how many unique items are in this ArraySet. If duplicates have been\n            * added, than those do not count towards the size.\n            *\n            * @returns Number\n            */\n        ArraySet.prototype.size = function ArraySet_size() {\n          return Object.getOwnPropertyNames(this._set).length;\n        };\n\n        /**\n            * Add the given string to this set.\n            *\n            * @param String aStr\n            */\n        ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n          var isDuplicate = this.has(aStr);\n          var idx = this._array.length;\n          if (!isDuplicate || aAllowDuplicates) {\n            this._array.push(aStr);\n          }\n          if (!isDuplicate) {\n            this._set[util.toSetString(aStr)] = idx;\n          }\n        };\n\n        /**\n            * Is the given string a member of this set?\n            *\n            * @param String aStr\n            */\n        ArraySet.prototype.has = function ArraySet_has(aStr) {\n          return Object.prototype.hasOwnProperty.call(this._set,\n          util.toSetString(aStr));\n        };\n\n        /**\n            * What is the index of the given string in the array?\n            *\n            * @param String aStr\n            */\n        ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n          if (this.has(aStr)) {\n            return this._set[util.toSetString(aStr)];\n          }\n          throw new Error('\"' + aStr + '\" is not in the set.');\n        };\n\n        /**\n            * What is the element at the given index?\n            *\n            * @param Number aIdx\n            */\n        ArraySet.prototype.at = function ArraySet_at(aIdx) {\n          if (aIdx >= 0 && aIdx < this._array.length) {\n            return this._array[aIdx];\n          }\n          throw new Error('No element indexed by ' + aIdx);\n        };\n\n        /**\n            * Returns the array representation of this set (which has the proper indices\n            * indicated by indexOf). Note that this is a copy of the internal array used\n            * for storing the members so that no one can mess with internal state.\n            */\n        ArraySet.prototype.toArray = function ArraySet_toArray() {\n          return this._array.slice();\n        };\n\n        exports.ArraySet = ArraySet;\n\n      });\n\n    }, { \"./util\": 56, \"amdefine\": 1 }], 48: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   *\n                                                   * Based on the Base 64 VLQ implementation in Closure Compiler:\n                                                   * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n                                                   *\n                                                   * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n                                                   * Redistribution and use in source and binary forms, with or without\n                                                   * modification, are permitted provided that the following conditions are\n                                                   * met:\n                                                   *\n                                                   *  * Redistributions of source code must retain the above copyright\n                                                   *    notice, this list of conditions and the following disclaimer.\n                                                   *  * Redistributions in binary form must reproduce the above\n                                                   *    copyright notice, this list of conditions and the following\n                                                   *    disclaimer in the documentation and/or other materials provided\n                                                   *    with the distribution.\n                                                   *  * Neither the name of Google Inc. nor the names of its\n                                                   *    contributors may be used to endorse or promote products derived\n                                                   *    from this software without specific prior written permission.\n                                                   *\n                                                   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n                                                   * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n                                                   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n                                                   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n                                                   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n                                                   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n                                                   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n                                                   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n                                                   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n                                                   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n                                                   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        var base64 = require('./base64');\n\n        // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n        // length quantities we use in the source map spec, the first bit is the sign,\n        // the next four bits are the actual value, and the 6th bit is the\n        // continuation bit. The continuation bit tells us whether there are more\n        // digits in this value following this digit.\n        //\n        //   Continuation\n        //   |    Sign\n        //   |    |\n        //   V    V\n        //   101011\n\n        var VLQ_BASE_SHIFT = 5;\n\n        // binary: 100000\n        var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n        // binary: 011111\n        var VLQ_BASE_MASK = VLQ_BASE - 1;\n\n        // binary: 100000\n        var VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n        /**\n                                              * Converts from a two-complement value to a value where the sign bit is\n                                              * placed in the least significant bit.  For example, as decimals:\n                                              *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n                                              *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n                                              */\n        function toVLQSigned(aValue) {\n          return aValue < 0 ?\n          (-aValue << 1) + 1 :\n          (aValue << 1) + 0;\n        }\n\n        /**\n           * Converts to a two-complement value from a value where the sign bit is\n           * placed in the least significant bit.  For example, as decimals:\n           *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n           *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n           */\n        function fromVLQSigned(aValue) {\n          var isNegative = (aValue & 1) === 1;\n          var shifted = aValue >> 1;\n          return isNegative ?\n          -shifted :\n          shifted;\n        }\n\n        /**\n           * Returns the base 64 VLQ encoded value.\n           */\n        exports.encode = function base64VLQ_encode(aValue) {\n          var encoded = \"\";\n          var digit;\n\n          var vlq = toVLQSigned(aValue);\n\n          do {\n            digit = vlq & VLQ_BASE_MASK;\n            vlq >>>= VLQ_BASE_SHIFT;\n            if (vlq > 0) {\n              // There are still more digits in this value, so we must make sure the\n              // continuation bit is marked.\n              digit |= VLQ_CONTINUATION_BIT;\n            }\n            encoded += base64.encode(digit);\n          } while (vlq > 0);\n\n          return encoded;\n        };\n\n        /**\n            * Decodes the next base 64 VLQ value from the given string and returns the\n            * value and the rest of the string via the out parameter.\n            */\n        exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n          var strLen = aStr.length;\n          var result = 0;\n          var shift = 0;\n          var continuation, digit;\n\n          do {\n            if (aIndex >= strLen) {\n              throw new Error(\"Expected more digits in base 64 VLQ value.\");\n            }\n\n            digit = base64.decode(aStr.charCodeAt(aIndex++));\n            if (digit === -1) {\n              throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n            }\n\n            continuation = !!(digit & VLQ_CONTINUATION_BIT);\n            digit &= VLQ_BASE_MASK;\n            result = result + (digit << shift);\n            shift += VLQ_BASE_SHIFT;\n          } while (continuation);\n\n          aOutParam.value = fromVLQSigned(result);\n          aOutParam.rest = aIndex;\n        };\n\n      });\n\n    }, { \"./base64\": 49, \"amdefine\": 1 }], 49: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n        /**\n                                                                                                          * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n                                                                                                          */\n        exports.encode = function (number) {\n          if (0 <= number && number < intToCharMap.length) {\n            return intToCharMap[number];\n          }\n          throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n        };\n\n        /**\n            * Decode a single base 64 character code digit to an integer. Returns -1 on\n            * failure.\n            */\n        exports.decode = function (charCode) {\n          var bigA = 65; // 'A'\n          var bigZ = 90; // 'Z'\n\n          var littleA = 97; // 'a'\n          var littleZ = 122; // 'z'\n\n          var zero = 48; // '0'\n          var nine = 57; // '9'\n\n          var plus = 43; // '+'\n          var slash = 47; // '/'\n\n          var littleOffset = 26;\n          var numberOffset = 52;\n\n          // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n          if (bigA <= charCode && charCode <= bigZ) {\n            return charCode - bigA;\n          }\n\n          // 26 - 51: abcdefghijklmnopqrstuvwxyz\n          if (littleA <= charCode && charCode <= littleZ) {\n            return charCode - littleA + littleOffset;\n          }\n\n          // 52 - 61: 0123456789\n          if (zero <= charCode && charCode <= nine) {\n            return charCode - zero + numberOffset;\n          }\n\n          // 62: +\n          if (charCode == plus) {\n            return 62;\n          }\n\n          // 63: /\n          if (charCode == slash) {\n            return 63;\n          }\n\n          // Invalid base64 digit.\n          return -1;\n        };\n\n      });\n\n    }, { \"amdefine\": 1 }], 50: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        exports.GREATEST_LOWER_BOUND = 1;\n        exports.LEAST_UPPER_BOUND = 2;\n\n        /**\n                                        * Recursive implementation of binary search.\n                                        *\n                                        * @param aLow Indices here and lower do not contain the needle.\n                                        * @param aHigh Indices here and higher do not contain the needle.\n                                        * @param aNeedle The element being searched for.\n                                        * @param aHaystack The non-empty array being searched.\n                                        * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n                                        * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n                                        *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n                                        *     closest element that is smaller than or greater than the one we are\n                                        *     searching for, respectively, if the exact element cannot be found.\n                                        */\n        function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n          // This function terminates when one of the following is true:\n          //\n          //   1. We find the exact element we are looking for.\n          //\n          //   2. We did not find the exact element, but we can return the index of\n          //      the next-closest element.\n          //\n          //   3. We did not find the exact element, and there is no next-closest\n          //      element than the one we are searching for, so we return -1.\n          var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n          var cmp = aCompare(aNeedle, aHaystack[mid], true);\n          if (cmp === 0) {\n            // Found the element we are looking for.\n            return mid;\n          } else\n          if (cmp > 0) {\n            // Our needle is greater than aHaystack[mid].\n            if (aHigh - mid > 1) {\n              // The element is in the upper half.\n              return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n            }\n\n            // The exact needle element was not found in this haystack. Determine if\n            // we are in termination case (3) or (2) and return the appropriate thing.\n            if (aBias == exports.LEAST_UPPER_BOUND) {\n              return aHigh < aHaystack.length ? aHigh : -1;\n            } else {\n              return mid;\n            }\n          } else\n          {\n            // Our needle is less than aHaystack[mid].\n            if (mid - aLow > 1) {\n              // The element is in the lower half.\n              return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n            }\n\n            // we are in termination case (3) or (2) and return the appropriate thing.\n            if (aBias == exports.LEAST_UPPER_BOUND) {\n              return mid;\n            } else {\n              return aLow < 0 ? -1 : aLow;\n            }\n          }\n        }\n\n        /**\n           * This is an implementation of binary search which will always try and return\n           * the index of the closest element if there is no exact hit. This is because\n           * mappings between original and generated line/col pairs are single points,\n           * and there is an implicit region between each of them, so a miss just means\n           * that you aren't on the very start of a region.\n           *\n           * @param aNeedle The element you are looking for.\n           * @param aHaystack The array that is being searched.\n           * @param aCompare A function which takes the needle and an element in the\n           *     array and returns -1, 0, or 1 depending on whether the needle is less\n           *     than, equal to, or greater than the element, respectively.\n           * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n           *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n           *     closest element that is smaller than or greater than the one we are\n           *     searching for, respectively, if the exact element cannot be found.\n           *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n           */\n        exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n          if (aHaystack.length === 0) {\n            return -1;\n          }\n\n          var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n          aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n          if (index < 0) {\n            return -1;\n          }\n\n          // We have found either the exact element, or the next-closest element than\n          // the one we are searching for. However, there may be more than one such\n          // element. Make sure we always return the smallest of these.\n          while (index - 1 >= 0) {\n            if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n              break;\n            }\n            --index;\n          }\n\n          return index;\n        };\n\n      });\n\n    }, { \"amdefine\": 1 }], 51: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2014 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        var util = require('./util');\n\n        /**\n                                       * Determine whether mappingB is after mappingA with respect to generated\n                                       * position.\n                                       */\n        function generatedPositionAfter(mappingA, mappingB) {\n          // Optimized for most common case\n          var lineA = mappingA.generatedLine;\n          var lineB = mappingB.generatedLine;\n          var columnA = mappingA.generatedColumn;\n          var columnB = mappingB.generatedColumn;\n          return lineB > lineA || lineB == lineA && columnB >= columnA ||\n          util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n        }\n\n        /**\n           * A data structure to provide a sorted view of accumulated mappings in a\n           * performance conscious manner. It trades a neglibable overhead in general\n           * case for a large speedup in case of mappings being added in order.\n           */\n        function MappingList() {\n          this._array = [];\n          this._sorted = true;\n          // Serves as infimum\n          this._last = { generatedLine: -1, generatedColumn: 0 };\n        }\n\n        /**\n           * Iterate through internal items. This method takes the same arguments that\n           * `Array.prototype.forEach` takes.\n           *\n           * NOTE: The order of the mappings is NOT guaranteed.\n           */\n        MappingList.prototype.unsortedForEach =\n        function MappingList_forEach(aCallback, aThisArg) {\n          this._array.forEach(aCallback, aThisArg);\n        };\n\n        /**\n            * Add the given source mapping.\n            *\n            * @param Object aMapping\n            */\n        MappingList.prototype.add = function MappingList_add(aMapping) {\n          var mapping;\n          if (generatedPositionAfter(this._last, aMapping)) {\n            this._last = aMapping;\n            this._array.push(aMapping);\n          } else {\n            this._sorted = false;\n            this._array.push(aMapping);\n          }\n        };\n\n        /**\n            * Returns the flat, sorted array of mappings. The mappings are sorted by\n            * generated position.\n            *\n            * WARNING: This method returns internal data without copying, for\n            * performance. The return value must NOT be mutated, and should be treated as\n            * an immutable borrow. If you want to take ownership, you must make your own\n            * copy.\n            */\n        MappingList.prototype.toArray = function MappingList_toArray() {\n          if (!this._sorted) {\n            this._array.sort(util.compareByGeneratedPositionsInflated);\n            this._sorted = true;\n          }\n          return this._array;\n        };\n\n        exports.MappingList = MappingList;\n\n      });\n\n    }, { \"./util\": 56, \"amdefine\": 1 }], 52: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        // It turns out that some (most?) JavaScript engines don't self-host\n        // `Array.prototype.sort`. This makes sense because C++ will likely remain\n        // faster than JS when doing raw CPU-intensive sorting. However, when using a\n        // custom comparator function, calling back and forth between the VM's C++ and\n        // JIT'd JS is rather slow *and* loses JIT type information, resulting in\n        // worse generated code for the comparator function than would be optimal. In\n        // fact, when sorting with a comparator, these costs outweigh the benefits of\n        // sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n        // a ~3500ms mean speed-up in `bench/bench.html`.\n\n        /**\n         * Swap the elements indexed by `x` and `y` in the array `ary`.\n         *\n         * @param {Array} ary\n         *        The array.\n         * @param {Number} x\n         *        The index of the first item.\n         * @param {Number} y\n         *        The index of the second item.\n         */\n        function swap(ary, x, y) {\n          var temp = ary[x];\n          ary[x] = ary[y];\n          ary[y] = temp;\n        }\n\n        /**\n           * Returns a random integer within the range `low .. high` inclusive.\n           *\n           * @param {Number} low\n           *        The lower bound on the range.\n           * @param {Number} high\n           *        The upper bound on the range.\n           */\n        function randomIntInRange(low, high) {\n          return Math.round(low + Math.random() * (high - low));\n        }\n\n        /**\n           * The Quick Sort algorithm.\n           *\n           * @param {Array} ary\n           *        An array to sort.\n           * @param {function} comparator\n           *        Function to use to compare two items.\n           * @param {Number} p\n           *        Start index of the array\n           * @param {Number} r\n           *        End index of the array\n           */\n        function doQuickSort(ary, comparator, p, r) {\n          // If our lower bound is less than our upper bound, we (1) partition the\n          // array into two pieces and (2) recurse on each half. If it is not, this is\n          // the empty array and our base case.\n\n          if (p < r) {\n            // (1) Partitioning.\n            //\n            // The partitioning chooses a pivot between `p` and `r` and moves all\n            // elements that are less than or equal to the pivot to the before it, and\n            // all the elements that are greater than it after it. The effect is that\n            // once partition is done, the pivot is in the exact place it will be when\n            // the array is put in sorted order, and it will not need to be moved\n            // again. This runs in O(n) time.\n\n            // Always choose a random pivot so that an input array which is reverse\n            // sorted does not cause O(n^2) running time.\n            var pivotIndex = randomIntInRange(p, r);\n            var i = p - 1;\n\n            swap(ary, pivotIndex, r);\n            var pivot = ary[r];\n\n            // Immediately after `j` is incremented in this loop, the following hold\n            // true:\n            //\n            //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n            //\n            //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n            for (var j = p; j < r; j++) {\n              if (comparator(ary[j], pivot) <= 0) {\n                i += 1;\n                swap(ary, i, j);\n              }\n            }\n\n            swap(ary, i + 1, j);\n            var q = i + 1;\n\n            // (2) Recurse on each half.\n\n            doQuickSort(ary, comparator, p, q - 1);\n            doQuickSort(ary, comparator, q + 1, r);\n          }\n        }\n\n        /**\n           * Sort the given array in-place with the given comparator function.\n           *\n           * @param {Array} ary\n           *        An array to sort.\n           * @param {function} comparator\n           *        Function to use to compare two items.\n           */\n        exports.quickSort = function (ary, comparator) {\n          doQuickSort(ary, comparator, 0, ary.length - 1);\n        };\n\n      });\n\n    }, { \"amdefine\": 1 }], 53: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        var util = require('./util');\n        var binarySearch = require('./binary-search');\n        var ArraySet = require('./array-set').ArraySet;\n        var base64VLQ = require('./base64-vlq');\n        var quickSort = require('./quick-sort').quickSort;\n\n        function SourceMapConsumer(aSourceMap) {\n          var sourceMap = aSourceMap;\n          if (typeof aSourceMap === 'string') {\n            sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n          }\n\n          return sourceMap.sections != null ?\n          new IndexedSourceMapConsumer(sourceMap) :\n          new BasicSourceMapConsumer(sourceMap);\n        }\n\n        SourceMapConsumer.fromSourceMap = function (aSourceMap) {\n          return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n        };\n\n        /**\n            * The version of the source mapping spec that we are consuming.\n            */\n        SourceMapConsumer.prototype._version = 3;\n\n        // `__generatedMappings` and `__originalMappings` are arrays that hold the\n        // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n        // are lazily instantiated, accessed via the `_generatedMappings` and\n        // `_originalMappings` getters respectively, and we only parse the mappings\n        // and create these arrays once queried for a source location. We jump through\n        // these hoops because there can be many thousands of mappings, and parsing\n        // them is expensive, so we only want to do it if we must.\n        //\n        // Each object in the arrays is of the form:\n        //\n        //     {\n        //       generatedLine: The line number in the generated code,\n        //       generatedColumn: The column number in the generated code,\n        //       source: The path to the original source file that generated this\n        //               chunk of code,\n        //       originalLine: The line number in the original source that\n        //                     corresponds to this chunk of generated code,\n        //       originalColumn: The column number in the original source that\n        //                       corresponds to this chunk of generated code,\n        //       name: The name of the original symbol which generated this chunk of\n        //             code.\n        //     }\n        //\n        // All properties except for `generatedLine` and `generatedColumn` can be\n        // `null`.\n        //\n        // `_generatedMappings` is ordered by the generated positions.\n        //\n        // `_originalMappings` is ordered by the original positions.\n\n        SourceMapConsumer.prototype.__generatedMappings = null;\n        Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n          get: function get() {\n            if (!this.__generatedMappings) {\n              this._parseMappings(this._mappings, this.sourceRoot);\n            }\n\n            return this.__generatedMappings;\n          } });\n\n\n        SourceMapConsumer.prototype.__originalMappings = null;\n        Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n          get: function get() {\n            if (!this.__originalMappings) {\n              this._parseMappings(this._mappings, this.sourceRoot);\n            }\n\n            return this.__originalMappings;\n          } });\n\n\n        SourceMapConsumer.prototype._charIsMappingSeparator =\n        function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n          var c = aStr.charAt(index);\n          return c === \";\" || c === \",\";\n        };\n\n        /**\n            * Parse the mappings in a string in to a data structure which we can easily\n            * query (the ordered arrays in the `this.__generatedMappings` and\n            * `this.__originalMappings` properties).\n            */\n        SourceMapConsumer.prototype._parseMappings =\n        function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n          throw new Error(\"Subclasses must implement _parseMappings\");\n        };\n\n        SourceMapConsumer.GENERATED_ORDER = 1;\n        SourceMapConsumer.ORIGINAL_ORDER = 2;\n\n        SourceMapConsumer.GREATEST_LOWER_BOUND = 1;\n        SourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n        /**\n                                                  * Iterate over each mapping between an original source/line/column and a\n                                                  * generated line/column in this source map.\n                                                  *\n                                                  * @param Function aCallback\n                                                  *        The function that is called with each mapping.\n                                                  * @param Object aContext\n                                                  *        Optional. If specified, this object will be the value of `this` every\n                                                  *        time that `aCallback` is called.\n                                                  * @param aOrder\n                                                  *        Either `SourceMapConsumer.GENERATED_ORDER` or\n                                                  *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n                                                  *        iterate over the mappings sorted by the generated file's line/column\n                                                  *        order or the original's source/line/column order, respectively. Defaults to\n                                                  *        `SourceMapConsumer.GENERATED_ORDER`.\n                                                  */\n        SourceMapConsumer.prototype.eachMapping =\n        function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n          var context = aContext || null;\n          var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n          var mappings;\n          switch (order) {\n            case SourceMapConsumer.GENERATED_ORDER:\n              mappings = this._generatedMappings;\n              break;\n            case SourceMapConsumer.ORIGINAL_ORDER:\n              mappings = this._originalMappings;\n              break;\n            default:\n              throw new Error(\"Unknown order of iteration.\");}\n\n\n          var sourceRoot = this.sourceRoot;\n          mappings.map(function (mapping) {\n            var source = mapping.source === null ? null : this._sources.at(mapping.source);\n            if (source != null && sourceRoot != null) {\n              source = util.join(sourceRoot, source);\n            }\n            return {\n              source: source,\n              generatedLine: mapping.generatedLine,\n              generatedColumn: mapping.generatedColumn,\n              originalLine: mapping.originalLine,\n              originalColumn: mapping.originalColumn,\n              name: mapping.name === null ? null : this._names.at(mapping.name) };\n\n          }, this).forEach(aCallback, context);\n        };\n\n        /**\n            * Returns all generated line and column information for the original source,\n            * line, and column provided. If no column is provided, returns all mappings\n            * corresponding to a either the line we are searching for or the next\n            * closest line that has any mappings. Otherwise, returns all mappings\n            * corresponding to the given line and either the column we are searching for\n            * or the next closest column that has any offsets.\n            *\n            * The only argument is an object with the following properties:\n            *\n            *   - source: The filename of the original source.\n            *   - line: The line number in the original source.\n            *   - column: Optional. the column number in the original source.\n            *\n            * and an array of objects is returned, each with the following properties:\n            *\n            *   - line: The line number in the generated source, or null.\n            *   - column: The column number in the generated source, or null.\n            */\n        SourceMapConsumer.prototype.allGeneratedPositionsFor =\n        function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n          var line = util.getArg(aArgs, 'line');\n\n          // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n          // returns the index of the closest mapping less than the needle. By\n          // setting needle.originalColumn to 0, we thus find the last mapping for\n          // the given line, provided such a mapping exists.\n          var needle = {\n            source: util.getArg(aArgs, 'source'),\n            originalLine: line,\n            originalColumn: util.getArg(aArgs, 'column', 0) };\n\n\n          if (this.sourceRoot != null) {\n            needle.source = util.relative(this.sourceRoot, needle.source);\n          }\n          if (!this._sources.has(needle.source)) {\n            return [];\n          }\n          needle.source = this._sources.indexOf(needle.source);\n\n          var mappings = [];\n\n          var index = this._findMapping(needle,\n          this._originalMappings,\n          \"originalLine\",\n          \"originalColumn\",\n          util.compareByOriginalPositions,\n          binarySearch.LEAST_UPPER_BOUND);\n          if (index >= 0) {\n            var mapping = this._originalMappings[index];\n\n            if (aArgs.column === undefined) {\n              var originalLine = mapping.originalLine;\n\n              // Iterate until either we run out of mappings, or we run into\n              // a mapping for a different line than the one we found. Since\n              // mappings are sorted, this is guaranteed to find all mappings for\n              // the line we found.\n              while (mapping && mapping.originalLine === originalLine) {\n                mappings.push({\n                  line: util.getArg(mapping, 'generatedLine', null),\n                  column: util.getArg(mapping, 'generatedColumn', null),\n                  lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null) });\n\n\n                mapping = this._originalMappings[++index];\n              }\n            } else {\n              var originalColumn = mapping.originalColumn;\n\n              // Iterate until either we run out of mappings, or we run into\n              // a mapping for a different line than the one we were searching for.\n              // Since mappings are sorted, this is guaranteed to find all mappings for\n              // the line we are searching for.\n              while (mapping &&\n              mapping.originalLine === line &&\n              mapping.originalColumn == originalColumn) {\n                mappings.push({\n                  line: util.getArg(mapping, 'generatedLine', null),\n                  column: util.getArg(mapping, 'generatedColumn', null),\n                  lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null) });\n\n\n                mapping = this._originalMappings[++index];\n              }\n            }\n          }\n\n          return mappings;\n        };\n\n        exports.SourceMapConsumer = SourceMapConsumer;\n\n        /**\n                                                        * A BasicSourceMapConsumer instance represents a parsed source map which we can\n                                                        * query for information about the original file positions by giving it a file\n                                                        * position in the generated source.\n                                                        *\n                                                        * The only parameter is the raw source map (either as a JSON string, or\n                                                        * already parsed to an object). According to the spec, source maps have the\n                                                        * following attributes:\n                                                        *\n                                                        *   - version: Which version of the source map spec this map is following.\n                                                        *   - sources: An array of URLs to the original source files.\n                                                        *   - names: An array of identifiers which can be referrenced by individual mappings.\n                                                        *   - sourceRoot: Optional. The URL root from which all sources are relative.\n                                                        *   - sourcesContent: Optional. An array of contents of the original source files.\n                                                        *   - mappings: A string of base64 VLQs which contain the actual mappings.\n                                                        *   - file: Optional. The generated file this source map is associated with.\n                                                        *\n                                                        * Here is an example source map, taken from the source map spec[0]:\n                                                        *\n                                                        *     {\n                                                        *       version : 3,\n                                                        *       file: \"out.js\",\n                                                        *       sourceRoot : \"\",\n                                                        *       sources: [\"foo.js\", \"bar.js\"],\n                                                        *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n                                                        *       mappings: \"AA,AB;;ABCDE;\"\n                                                        *     }\n                                                        *\n                                                        * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n                                                        */\n        function BasicSourceMapConsumer(aSourceMap) {\n          var sourceMap = aSourceMap;\n          if (typeof aSourceMap === 'string') {\n            sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n          }\n\n          var version = util.getArg(sourceMap, 'version');\n          var sources = util.getArg(sourceMap, 'sources');\n          // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n          // requires the array) to play nice here.\n          var names = util.getArg(sourceMap, 'names', []);\n          var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n          var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n          var mappings = util.getArg(sourceMap, 'mappings');\n          var file = util.getArg(sourceMap, 'file', null);\n\n          // Once again, Sass deviates from the spec and supplies the version as a\n          // string rather than a number, so we use loose equality checking here.\n          if (version != this._version) {\n            throw new Error('Unsupported version: ' + version);\n          }\n\n          // Some source maps produce relative source paths like \"./foo.js\" instead of\n          // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n          // See bugzil.la/1090768.\n          sources = sources.map(util.normalize);\n\n          // Pass `true` below to allow duplicate names and sources. While source maps\n          // are intended to be compressed and deduplicated, the TypeScript compiler\n          // sometimes generates source maps with duplicates in them. See Github issue\n          // #72 and bugzil.la/889492.\n          this._names = ArraySet.fromArray(names, true);\n          this._sources = ArraySet.fromArray(sources, true);\n\n          this.sourceRoot = sourceRoot;\n          this.sourcesContent = sourcesContent;\n          this._mappings = mappings;\n          this.file = file;\n        }\n\n        BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n        BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n        /**\n                                                                        * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n                                                                        *\n                                                                        * @param SourceMapGenerator aSourceMap\n                                                                        *        The source map that will be consumed.\n                                                                        * @returns BasicSourceMapConsumer\n                                                                        */\n        BasicSourceMapConsumer.fromSourceMap =\n        function SourceMapConsumer_fromSourceMap(aSourceMap) {\n          var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n          var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n          var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n          smc.sourceRoot = aSourceMap._sourceRoot;\n          smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n          smc.sourceRoot);\n          smc.file = aSourceMap._file;\n\n          // Because we are modifying the entries (by converting string sources and\n          // names to indices into the sources and names ArraySets), we have to make\n          // a copy of the entry or else bad things happen. Shared mutable state\n          // strikes again! See github issue #191.\n\n          var generatedMappings = aSourceMap._mappings.toArray().slice();\n          var destGeneratedMappings = smc.__generatedMappings = [];\n          var destOriginalMappings = smc.__originalMappings = [];\n\n          for (var i = 0, length = generatedMappings.length; i < length; i++) {\n            var srcMapping = generatedMappings[i];\n            var destMapping = new Mapping();\n            destMapping.generatedLine = srcMapping.generatedLine;\n            destMapping.generatedColumn = srcMapping.generatedColumn;\n\n            if (srcMapping.source) {\n              destMapping.source = sources.indexOf(srcMapping.source);\n              destMapping.originalLine = srcMapping.originalLine;\n              destMapping.originalColumn = srcMapping.originalColumn;\n\n              if (srcMapping.name) {\n                destMapping.name = names.indexOf(srcMapping.name);\n              }\n\n              destOriginalMappings.push(destMapping);\n            }\n\n            destGeneratedMappings.push(destMapping);\n          }\n\n          quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n          return smc;\n        };\n\n        /**\n            * The version of the source mapping spec that we are consuming.\n            */\n        BasicSourceMapConsumer.prototype._version = 3;\n\n        /**\n                                                        * The list of original sources.\n                                                        */\n        Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n          get: function get() {\n            return this._sources.toArray().map(function (s) {\n              return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n            }, this);\n          } });\n\n\n        /**\n                 * Provide the JIT with a nice shape / hidden class.\n                 */\n        function Mapping() {\n          this.generatedLine = 0;\n          this.generatedColumn = 0;\n          this.source = null;\n          this.originalLine = null;\n          this.originalColumn = null;\n          this.name = null;\n        }\n\n        /**\n           * Parse the mappings in a string in to a data structure which we can easily\n           * query (the ordered arrays in the `this.__generatedMappings` and\n           * `this.__originalMappings` properties).\n           */\n        BasicSourceMapConsumer.prototype._parseMappings =\n        function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n          var generatedLine = 1;\n          var previousGeneratedColumn = 0;\n          var previousOriginalLine = 0;\n          var previousOriginalColumn = 0;\n          var previousSource = 0;\n          var previousName = 0;\n          var length = aStr.length;\n          var index = 0;\n          var cachedSegments = {};\n          var temp = {};\n          var originalMappings = [];\n          var generatedMappings = [];\n          var mapping, str, segment, end, value;\n\n          while (index < length) {\n            if (aStr.charAt(index) === ';') {\n              generatedLine++;\n              index++;\n              previousGeneratedColumn = 0;\n            } else\n            if (aStr.charAt(index) === ',') {\n              index++;\n            } else\n            {\n              mapping = new Mapping();\n              mapping.generatedLine = generatedLine;\n\n              // Because each offset is encoded relative to the previous one,\n              // many segments often have the same encoding. We can exploit this\n              // fact by caching the parsed variable length fields of each segment,\n              // allowing us to avoid a second parse if we encounter the same\n              // segment again.\n              for (end = index; end < length; end++) {\n                if (this._charIsMappingSeparator(aStr, end)) {\n                  break;\n                }\n              }\n              str = aStr.slice(index, end);\n\n              segment = cachedSegments[str];\n              if (segment) {\n                index += str.length;\n              } else {\n                segment = [];\n                while (index < end) {\n                  base64VLQ.decode(aStr, index, temp);\n                  value = temp.value;\n                  index = temp.rest;\n                  segment.push(value);\n                }\n\n                if (segment.length === 2) {\n                  throw new Error('Found a source, but no line and column');\n                }\n\n                if (segment.length === 3) {\n                  throw new Error('Found a source and line, but no column');\n                }\n\n                cachedSegments[str] = segment;\n              }\n\n              // Generated column.\n              mapping.generatedColumn = previousGeneratedColumn + segment[0];\n              previousGeneratedColumn = mapping.generatedColumn;\n\n              if (segment.length > 1) {\n                // Original source.\n                mapping.source = previousSource + segment[1];\n                previousSource += segment[1];\n\n                // Original line.\n                mapping.originalLine = previousOriginalLine + segment[2];\n                previousOriginalLine = mapping.originalLine;\n                // Lines are stored 0-based\n                mapping.originalLine += 1;\n\n                // Original column.\n                mapping.originalColumn = previousOriginalColumn + segment[3];\n                previousOriginalColumn = mapping.originalColumn;\n\n                if (segment.length > 4) {\n                  // Original name.\n                  mapping.name = previousName + segment[4];\n                  previousName += segment[4];\n                }\n              }\n\n              generatedMappings.push(mapping);\n              if (typeof mapping.originalLine === 'number') {\n                originalMappings.push(mapping);\n              }\n            }\n          }\n\n          quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n          this.__generatedMappings = generatedMappings;\n\n          quickSort(originalMappings, util.compareByOriginalPositions);\n          this.__originalMappings = originalMappings;\n        };\n\n        /**\n            * Find the mapping that best matches the hypothetical \"needle\" mapping that\n            * we are searching for in the given \"haystack\" of mappings.\n            */\n        BasicSourceMapConsumer.prototype._findMapping =\n        function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n        aColumnName, aComparator, aBias) {\n          // To return the position we are searching for, we must first find the\n          // mapping for the given position and then return the opposite position it\n          // points to. Because the mappings are sorted, we can use binary search to\n          // find the best mapping.\n\n          if (aNeedle[aLineName] <= 0) {\n            throw new TypeError('Line must be greater than or equal to 1, got ' +\n            aNeedle[aLineName]);\n          }\n          if (aNeedle[aColumnName] < 0) {\n            throw new TypeError('Column must be greater than or equal to 0, got ' +\n            aNeedle[aColumnName]);\n          }\n\n          return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n        };\n\n        /**\n            * Compute the last column for each generated mapping. The last column is\n            * inclusive.\n            */\n        BasicSourceMapConsumer.prototype.computeColumnSpans =\n        function SourceMapConsumer_computeColumnSpans() {\n          for (var index = 0; index < this._generatedMappings.length; ++index) {\n            var mapping = this._generatedMappings[index];\n\n            // Mappings do not contain a field for the last generated columnt. We\n            // can come up with an optimistic estimate, however, by assuming that\n            // mappings are contiguous (i.e. given two consecutive mappings, the\n            // first mapping ends where the second one starts).\n            if (index + 1 < this._generatedMappings.length) {\n              var nextMapping = this._generatedMappings[index + 1];\n\n              if (mapping.generatedLine === nextMapping.generatedLine) {\n                mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n                continue;\n              }\n            }\n\n            // The last mapping for each line spans the entire line.\n            mapping.lastGeneratedColumn = Infinity;\n          }\n        };\n\n        /**\n            * Returns the original source, line, and column information for the generated\n            * source's line and column positions provided. The only argument is an object\n            * with the following properties:\n            *\n            *   - line: The line number in the generated source.\n            *   - column: The column number in the generated source.\n            *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n            *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n            *     closest element that is smaller than or greater than the one we are\n            *     searching for, respectively, if the exact element cannot be found.\n            *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n            *\n            * and an object is returned with the following properties:\n            *\n            *   - source: The original source file, or null.\n            *   - line: The line number in the original source, or null.\n            *   - column: The column number in the original source, or null.\n            *   - name: The original identifier, or null.\n            */\n        BasicSourceMapConsumer.prototype.originalPositionFor =\n        function SourceMapConsumer_originalPositionFor(aArgs) {\n          var needle = {\n            generatedLine: util.getArg(aArgs, 'line'),\n            generatedColumn: util.getArg(aArgs, 'column') };\n\n\n          var index = this._findMapping(\n          needle,\n          this._generatedMappings,\n          \"generatedLine\",\n          \"generatedColumn\",\n          util.compareByGeneratedPositionsDeflated,\n          util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n\n          if (index >= 0) {\n            var mapping = this._generatedMappings[index];\n\n            if (mapping.generatedLine === needle.generatedLine) {\n              var source = util.getArg(mapping, 'source', null);\n              if (source !== null) {\n                source = this._sources.at(source);\n                if (this.sourceRoot != null) {\n                  source = util.join(this.sourceRoot, source);\n                }\n              }\n              var name = util.getArg(mapping, 'name', null);\n              if (name !== null) {\n                name = this._names.at(name);\n              }\n              return {\n                source: source,\n                line: util.getArg(mapping, 'originalLine', null),\n                column: util.getArg(mapping, 'originalColumn', null),\n                name: name };\n\n            }\n          }\n\n          return {\n            source: null,\n            line: null,\n            column: null,\n            name: null };\n\n        };\n\n        /**\n            * Return true if we have the source content for every source in the source\n            * map, false otherwise.\n            */\n        BasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n        function BasicSourceMapConsumer_hasContentsOfAllSources() {\n          if (!this.sourcesContent) {\n            return false;\n          }\n          return this.sourcesContent.length >= this._sources.size() &&\n          !this.sourcesContent.some(function (sc) {return sc == null;});\n        };\n\n        /**\n            * Returns the original source content. The only argument is the url of the\n            * original source file. Returns null if no original source content is\n            * availible.\n            */\n        BasicSourceMapConsumer.prototype.sourceContentFor =\n        function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n          if (!this.sourcesContent) {\n            return null;\n          }\n\n          if (this.sourceRoot != null) {\n            aSource = util.relative(this.sourceRoot, aSource);\n          }\n\n          if (this._sources.has(aSource)) {\n            return this.sourcesContent[this._sources.indexOf(aSource)];\n          }\n\n          var url;\n          if (this.sourceRoot != null && (\n          url = util.urlParse(this.sourceRoot))) {\n            // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n            // many users. We can help them out when they expect file:// URIs to\n            // behave like it would if they were running a local HTTP server. See\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n            var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n            if (url.scheme == \"file\" &&\n            this._sources.has(fileUriAbsPath)) {\n              return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n            }\n\n            if ((!url.path || url.path == \"/\") &&\n            this._sources.has(\"/\" + aSource)) {\n              return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n            }\n          }\n\n          // This function is used recursively from\n          // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n          // don't want to throw if we can't find the source - we just want to\n          // return null, so we provide a flag to exit gracefully.\n          if (nullOnMissing) {\n            return null;\n          } else\n          {\n            throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n          }\n        };\n\n        /**\n            * Returns the generated line and column information for the original source,\n            * line, and column positions provided. The only argument is an object with\n            * the following properties:\n            *\n            *   - source: The filename of the original source.\n            *   - line: The line number in the original source.\n            *   - column: The column number in the original source.\n            *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n            *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n            *     closest element that is smaller than or greater than the one we are\n            *     searching for, respectively, if the exact element cannot be found.\n            *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n            *\n            * and an object is returned with the following properties:\n            *\n            *   - line: The line number in the generated source, or null.\n            *   - column: The column number in the generated source, or null.\n            */\n        BasicSourceMapConsumer.prototype.generatedPositionFor =\n        function SourceMapConsumer_generatedPositionFor(aArgs) {\n          var source = util.getArg(aArgs, 'source');\n          if (this.sourceRoot != null) {\n            source = util.relative(this.sourceRoot, source);\n          }\n          if (!this._sources.has(source)) {\n            return {\n              line: null,\n              column: null,\n              lastColumn: null };\n\n          }\n          source = this._sources.indexOf(source);\n\n          var needle = {\n            source: source,\n            originalLine: util.getArg(aArgs, 'line'),\n            originalColumn: util.getArg(aArgs, 'column') };\n\n\n          var index = this._findMapping(\n          needle,\n          this._originalMappings,\n          \"originalLine\",\n          \"originalColumn\",\n          util.compareByOriginalPositions,\n          util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n\n\n          if (index >= 0) {\n            var mapping = this._originalMappings[index];\n\n            if (mapping.source === needle.source) {\n              return {\n                line: util.getArg(mapping, 'generatedLine', null),\n                column: util.getArg(mapping, 'generatedColumn', null),\n                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null) };\n\n            }\n          }\n\n          return {\n            line: null,\n            column: null,\n            lastColumn: null };\n\n        };\n\n        exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n        /**\n                                                                  * An IndexedSourceMapConsumer instance represents a parsed source map which\n                                                                  * we can query for information. It differs from BasicSourceMapConsumer in\n                                                                  * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n                                                                  * input.\n                                                                  *\n                                                                  * The only parameter is a raw source map (either as a JSON string, or already\n                                                                  * parsed to an object). According to the spec for indexed source maps, they\n                                                                  * have the following attributes:\n                                                                  *\n                                                                  *   - version: Which version of the source map spec this map is following.\n                                                                  *   - file: Optional. The generated file this source map is associated with.\n                                                                  *   - sections: A list of section definitions.\n                                                                  *\n                                                                  * Each value under the \"sections\" field has two fields:\n                                                                  *   - offset: The offset into the original specified at which this section\n                                                                  *       begins to apply, defined as an object with a \"line\" and \"column\"\n                                                                  *       field.\n                                                                  *   - map: A source map definition. This source map could also be indexed,\n                                                                  *       but doesn't have to be.\n                                                                  *\n                                                                  * Instead of the \"map\" field, it's also possible to have a \"url\" field\n                                                                  * specifying a URL to retrieve a source map from, but that's currently\n                                                                  * unsupported.\n                                                                  *\n                                                                  * Here's an example source map, taken from the source map spec[0], but\n                                                                  * modified to omit a section which uses the \"url\" field.\n                                                                  *\n                                                                  *  {\n                                                                  *    version : 3,\n                                                                  *    file: \"app.js\",\n                                                                  *    sections: [{\n                                                                  *      offset: {line:100, column:10},\n                                                                  *      map: {\n                                                                  *        version : 3,\n                                                                  *        file: \"section.js\",\n                                                                  *        sources: [\"foo.js\", \"bar.js\"],\n                                                                  *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n                                                                  *        mappings: \"AAAA,E;;ABCDE;\"\n                                                                  *      }\n                                                                  *    }],\n                                                                  *  }\n                                                                  *\n                                                                  * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n                                                                  */\n        function IndexedSourceMapConsumer(aSourceMap) {\n          var sourceMap = aSourceMap;\n          if (typeof aSourceMap === 'string') {\n            sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n          }\n\n          var version = util.getArg(sourceMap, 'version');\n          var sections = util.getArg(sourceMap, 'sections');\n\n          if (version != this._version) {\n            throw new Error('Unsupported version: ' + version);\n          }\n\n          this._sources = new ArraySet();\n          this._names = new ArraySet();\n\n          var lastOffset = {\n            line: -1,\n            column: 0 };\n\n          this._sections = sections.map(function (s) {\n            if (s.url) {\n              // The url field will require support for asynchronicity.\n              // See https://github.com/mozilla/source-map/issues/16\n              throw new Error('Support for url field in sections not implemented.');\n            }\n            var offset = util.getArg(s, 'offset');\n            var offsetLine = util.getArg(offset, 'line');\n            var offsetColumn = util.getArg(offset, 'column');\n\n            if (offsetLine < lastOffset.line ||\n            offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n              throw new Error('Section offsets must be ordered and non-overlapping.');\n            }\n            lastOffset = offset;\n\n            return {\n              generatedOffset: {\n                // The offset fields are 0-based, but we use 1-based indices when\n                // encoding/decoding from VLQ.\n                generatedLine: offsetLine + 1,\n                generatedColumn: offsetColumn + 1 },\n\n              consumer: new SourceMapConsumer(util.getArg(s, 'map')) };\n\n          });\n        }\n\n        IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n        IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n        /**\n                                                                             * The version of the source mapping spec that we are consuming.\n                                                                             */\n        IndexedSourceMapConsumer.prototype._version = 3;\n\n        /**\n                                                          * The list of original sources.\n                                                          */\n        Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n          get: function get() {\n            var sources = [];\n            for (var i = 0; i < this._sections.length; i++) {\n              for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n                sources.push(this._sections[i].consumer.sources[j]);\n              }\n            };\n            return sources;\n          } });\n\n\n        /**\n                 * Returns the original source, line, and column information for the generated\n                 * source's line and column positions provided. The only argument is an object\n                 * with the following properties:\n                 *\n                 *   - line: The line number in the generated source.\n                 *   - column: The column number in the generated source.\n                 *\n                 * and an object is returned with the following properties:\n                 *\n                 *   - source: The original source file, or null.\n                 *   - line: The line number in the original source, or null.\n                 *   - column: The column number in the original source, or null.\n                 *   - name: The original identifier, or null.\n                 */\n        IndexedSourceMapConsumer.prototype.originalPositionFor =\n        function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n          var needle = {\n            generatedLine: util.getArg(aArgs, 'line'),\n            generatedColumn: util.getArg(aArgs, 'column') };\n\n\n          // Find the section containing the generated position we're trying to map\n          // to an original position.\n          var sectionIndex = binarySearch.search(needle, this._sections,\n          function (needle, section) {\n            var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n            if (cmp) {\n              return cmp;\n            }\n\n            return needle.generatedColumn -\n            section.generatedOffset.generatedColumn;\n          });\n          var section = this._sections[sectionIndex];\n\n          if (!section) {\n            return {\n              source: null,\n              line: null,\n              column: null,\n              name: null };\n\n          }\n\n          return section.consumer.originalPositionFor({\n            line: needle.generatedLine - (\n            section.generatedOffset.generatedLine - 1),\n            column: needle.generatedColumn - (\n            section.generatedOffset.generatedLine === needle.generatedLine ?\n            section.generatedOffset.generatedColumn - 1 :\n            0),\n            bias: aArgs.bias });\n\n        };\n\n        /**\n            * Return true if we have the source content for every source in the source\n            * map, false otherwise.\n            */\n        IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n        function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n          return this._sections.every(function (s) {\n            return s.consumer.hasContentsOfAllSources();\n          });\n        };\n\n        /**\n            * Returns the original source content. The only argument is the url of the\n            * original source file. Returns null if no original source content is\n            * available.\n            */\n        IndexedSourceMapConsumer.prototype.sourceContentFor =\n        function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n          for (var i = 0; i < this._sections.length; i++) {\n            var section = this._sections[i];\n\n            var content = section.consumer.sourceContentFor(aSource, true);\n            if (content) {\n              return content;\n            }\n          }\n          if (nullOnMissing) {\n            return null;\n          } else\n          {\n            throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n          }\n        };\n\n        /**\n            * Returns the generated line and column information for the original source,\n            * line, and column positions provided. The only argument is an object with\n            * the following properties:\n            *\n            *   - source: The filename of the original source.\n            *   - line: The line number in the original source.\n            *   - column: The column number in the original source.\n            *\n            * and an object is returned with the following properties:\n            *\n            *   - line: The line number in the generated source, or null.\n            *   - column: The column number in the generated source, or null.\n            */\n        IndexedSourceMapConsumer.prototype.generatedPositionFor =\n        function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n          for (var i = 0; i < this._sections.length; i++) {\n            var section = this._sections[i];\n\n            // Only consider this section if the requested source is in the list of\n            // sources of the consumer.\n            if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n              continue;\n            }\n            var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n            if (generatedPosition) {\n              var ret = {\n                line: generatedPosition.line + (\n                section.generatedOffset.generatedLine - 1),\n                column: generatedPosition.column + (\n                section.generatedOffset.generatedLine === generatedPosition.line ?\n                section.generatedOffset.generatedColumn - 1 :\n                0) };\n\n              return ret;\n            }\n          }\n\n          return {\n            line: null,\n            column: null };\n\n        };\n\n        /**\n            * Parse the mappings in a string in to a data structure which we can easily\n            * query (the ordered arrays in the `this.__generatedMappings` and\n            * `this.__originalMappings` properties).\n            */\n        IndexedSourceMapConsumer.prototype._parseMappings =\n        function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n          this.__generatedMappings = [];\n          this.__originalMappings = [];\n          for (var i = 0; i < this._sections.length; i++) {\n            var section = this._sections[i];\n            var sectionMappings = section.consumer._generatedMappings;\n            for (var j = 0; j < sectionMappings.length; j++) {\n              var mapping = sectionMappings[i];\n\n              var source = section.consumer._sources.at(mapping.source);\n              if (section.consumer.sourceRoot !== null) {\n                source = util.join(section.consumer.sourceRoot, source);\n              }\n              this._sources.add(source);\n              source = this._sources.indexOf(source);\n\n              var name = section.consumer._names.at(mapping.name);\n              this._names.add(name);\n              name = this._names.indexOf(name);\n\n              // The mappings coming from the consumer for the section have\n              // generated positions relative to the start of the section, so we\n              // need to offset them to be relative to the start of the concatenated\n              // generated file.\n              var adjustedMapping = {\n                source: source,\n                generatedLine: mapping.generatedLine + (\n                section.generatedOffset.generatedLine - 1),\n                generatedColumn: mapping.column + (\n                section.generatedOffset.generatedLine === mapping.generatedLine) ?\n                section.generatedOffset.generatedColumn - 1 :\n                0,\n                originalLine: mapping.originalLine,\n                originalColumn: mapping.originalColumn,\n                name: name };\n\n\n              this.__generatedMappings.push(adjustedMapping);\n              if (typeof adjustedMapping.originalLine === 'number') {\n                this.__originalMappings.push(adjustedMapping);\n              }\n            };\n          };\n\n          quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n          quickSort(this.__originalMappings, util.compareByOriginalPositions);\n        };\n\n        exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n      });\n\n    }, { \"./array-set\": 47, \"./base64-vlq\": 48, \"./binary-search\": 50, \"./quick-sort\": 52, \"./util\": 56, \"amdefine\": 1 }], 54: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        var base64VLQ = require('./base64-vlq');\n        var util = require('./util');\n        var ArraySet = require('./array-set').ArraySet;\n        var MappingList = require('./mapping-list').MappingList;\n\n        /**\n                                                                  * An instance of the SourceMapGenerator represents a source map which is\n                                                                  * being built incrementally. You may pass an object with the following\n                                                                  * properties:\n                                                                  *\n                                                                  *   - file: The filename of the generated source.\n                                                                  *   - sourceRoot: A root for all relative URLs in this source map.\n                                                                  */\n        function SourceMapGenerator(aArgs) {\n          if (!aArgs) {\n            aArgs = {};\n          }\n          this._file = util.getArg(aArgs, 'file', null);\n          this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n          this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n          this._sources = new ArraySet();\n          this._names = new ArraySet();\n          this._mappings = new MappingList();\n          this._sourcesContents = null;\n        }\n\n        SourceMapGenerator.prototype._version = 3;\n\n        /**\n                                                    * Creates a new SourceMapGenerator based on a SourceMapConsumer\n                                                    *\n                                                    * @param aSourceMapConsumer The SourceMap.\n                                                    */\n        SourceMapGenerator.fromSourceMap =\n        function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n          var sourceRoot = aSourceMapConsumer.sourceRoot;\n          var generator = new SourceMapGenerator({\n            file: aSourceMapConsumer.file,\n            sourceRoot: sourceRoot });\n\n          aSourceMapConsumer.eachMapping(function (mapping) {\n            var newMapping = {\n              generated: {\n                line: mapping.generatedLine,\n                column: mapping.generatedColumn } };\n\n\n\n            if (mapping.source != null) {\n              newMapping.source = mapping.source;\n              if (sourceRoot != null) {\n                newMapping.source = util.relative(sourceRoot, newMapping.source);\n              }\n\n              newMapping.original = {\n                line: mapping.originalLine,\n                column: mapping.originalColumn };\n\n\n              if (mapping.name != null) {\n                newMapping.name = mapping.name;\n              }\n            }\n\n            generator.addMapping(newMapping);\n          });\n          aSourceMapConsumer.sources.forEach(function (sourceFile) {\n            var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n            if (content != null) {\n              generator.setSourceContent(sourceFile, content);\n            }\n          });\n          return generator;\n        };\n\n        /**\n            * Add a single mapping from original source line and column to the generated\n            * source's line and column for this source map being created. The mapping\n            * object should have the following properties:\n            *\n            *   - generated: An object with the generated line and column positions.\n            *   - original: An object with the original line and column positions.\n            *   - source: The original source file (relative to the sourceRoot).\n            *   - name: An optional original token name for this mapping.\n            */\n        SourceMapGenerator.prototype.addMapping =\n        function SourceMapGenerator_addMapping(aArgs) {\n          var generated = util.getArg(aArgs, 'generated');\n          var original = util.getArg(aArgs, 'original', null);\n          var source = util.getArg(aArgs, 'source', null);\n          var name = util.getArg(aArgs, 'name', null);\n\n          if (!this._skipValidation) {\n            this._validateMapping(generated, original, source, name);\n          }\n\n          if (source != null && !this._sources.has(source)) {\n            this._sources.add(source);\n          }\n\n          if (name != null && !this._names.has(name)) {\n            this._names.add(name);\n          }\n\n          this._mappings.add({\n            generatedLine: generated.line,\n            generatedColumn: generated.column,\n            originalLine: original != null && original.line,\n            originalColumn: original != null && original.column,\n            source: source,\n            name: name });\n\n        };\n\n        /**\n            * Set the source content for a source file.\n            */\n        SourceMapGenerator.prototype.setSourceContent =\n        function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n          var source = aSourceFile;\n          if (this._sourceRoot != null) {\n            source = util.relative(this._sourceRoot, source);\n          }\n\n          if (aSourceContent != null) {\n            // Add the source content to the _sourcesContents map.\n            // Create a new _sourcesContents map if the property is null.\n            if (!this._sourcesContents) {\n              this._sourcesContents = {};\n            }\n            this._sourcesContents[util.toSetString(source)] = aSourceContent;\n          } else if (this._sourcesContents) {\n            // Remove the source file from the _sourcesContents map.\n            // If the _sourcesContents map is empty, set the property to null.\n            delete this._sourcesContents[util.toSetString(source)];\n            if (Object.keys(this._sourcesContents).length === 0) {\n              this._sourcesContents = null;\n            }\n          }\n        };\n\n        /**\n            * Applies the mappings of a sub-source-map for a specific source file to the\n            * source map being generated. Each mapping to the supplied source file is\n            * rewritten using the supplied source map. Note: The resolution for the\n            * resulting mappings is the minimium of this map and the supplied map.\n            *\n            * @param aSourceMapConsumer The source map to be applied.\n            * @param aSourceFile Optional. The filename of the source file.\n            *        If omitted, SourceMapConsumer's file property will be used.\n            * @param aSourceMapPath Optional. The dirname of the path to the source map\n            *        to be applied. If relative, it is relative to the SourceMapConsumer.\n            *        This parameter is needed when the two source maps aren't in the same\n            *        directory, and the source map to be applied contains relative source\n            *        paths. If so, those relative source paths need to be rewritten\n            *        relative to the SourceMapGenerator.\n            */\n        SourceMapGenerator.prototype.applySourceMap =\n        function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n          var sourceFile = aSourceFile;\n          // If aSourceFile is omitted, we will use the file property of the SourceMap\n          if (aSourceFile == null) {\n            if (aSourceMapConsumer.file == null) {\n              throw new Error(\n              'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n              'or the source map\\'s \"file\" property. Both were omitted.');\n\n            }\n            sourceFile = aSourceMapConsumer.file;\n          }\n          var sourceRoot = this._sourceRoot;\n          // Make \"sourceFile\" relative if an absolute Url is passed.\n          if (sourceRoot != null) {\n            sourceFile = util.relative(sourceRoot, sourceFile);\n          }\n          // Applying the SourceMap can add and remove items from the sources and\n          // the names array.\n          var newSources = new ArraySet();\n          var newNames = new ArraySet();\n\n          // Find mappings for the \"sourceFile\"\n          this._mappings.unsortedForEach(function (mapping) {\n            if (mapping.source === sourceFile && mapping.originalLine != null) {\n              // Check if it can be mapped by the source map, then update the mapping.\n              var original = aSourceMapConsumer.originalPositionFor({\n                line: mapping.originalLine,\n                column: mapping.originalColumn });\n\n              if (original.source != null) {\n                // Copy mapping\n                mapping.source = original.source;\n                if (aSourceMapPath != null) {\n                  mapping.source = util.join(aSourceMapPath, mapping.source);\n                }\n                if (sourceRoot != null) {\n                  mapping.source = util.relative(sourceRoot, mapping.source);\n                }\n                mapping.originalLine = original.line;\n                mapping.originalColumn = original.column;\n                if (original.name != null) {\n                  mapping.name = original.name;\n                }\n              }\n            }\n\n            var source = mapping.source;\n            if (source != null && !newSources.has(source)) {\n              newSources.add(source);\n            }\n\n            var name = mapping.name;\n            if (name != null && !newNames.has(name)) {\n              newNames.add(name);\n            }\n\n          }, this);\n          this._sources = newSources;\n          this._names = newNames;\n\n          // Copy sourcesContents of applied map.\n          aSourceMapConsumer.sources.forEach(function (sourceFile) {\n            var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n            if (content != null) {\n              if (aSourceMapPath != null) {\n                sourceFile = util.join(aSourceMapPath, sourceFile);\n              }\n              if (sourceRoot != null) {\n                sourceFile = util.relative(sourceRoot, sourceFile);\n              }\n              this.setSourceContent(sourceFile, content);\n            }\n          }, this);\n        };\n\n        /**\n            * A mapping can have one of the three levels of data:\n            *\n            *   1. Just the generated position.\n            *   2. The Generated position, original position, and original source.\n            *   3. Generated and original position, original source, as well as a name\n            *      token.\n            *\n            * To maintain consistency, we validate that any new mapping being added falls\n            * in to one of these categories.\n            */\n        SourceMapGenerator.prototype._validateMapping =\n        function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n        aName) {\n          if (aGenerated && 'line' in aGenerated && 'column' in aGenerated &&\n          aGenerated.line > 0 && aGenerated.column >= 0 &&\n          !aOriginal && !aSource && !aName) {\n            // Case 1.\n            return;\n          } else\n          if (aGenerated && 'line' in aGenerated && 'column' in aGenerated &&\n          aOriginal && 'line' in aOriginal && 'column' in aOriginal &&\n          aGenerated.line > 0 && aGenerated.column >= 0 &&\n          aOriginal.line > 0 && aOriginal.column >= 0 &&\n          aSource) {\n            // Cases 2 and 3.\n            return;\n          } else\n          {\n            throw new Error('Invalid mapping: ' + JSON.stringify({\n              generated: aGenerated,\n              source: aSource,\n              original: aOriginal,\n              name: aName }));\n\n          }\n        };\n\n        /**\n            * Serialize the accumulated mappings in to the stream of base 64 VLQs\n            * specified by the source map format.\n            */\n        SourceMapGenerator.prototype._serializeMappings =\n        function SourceMapGenerator_serializeMappings() {\n          var previousGeneratedColumn = 0;\n          var previousGeneratedLine = 1;\n          var previousOriginalColumn = 0;\n          var previousOriginalLine = 0;\n          var previousName = 0;\n          var previousSource = 0;\n          var result = '';\n          var mapping;\n\n          var mappings = this._mappings.toArray();\n          for (var i = 0, len = mappings.length; i < len; i++) {\n            mapping = mappings[i];\n\n            if (mapping.generatedLine !== previousGeneratedLine) {\n              previousGeneratedColumn = 0;\n              while (mapping.generatedLine !== previousGeneratedLine) {\n                result += ';';\n                previousGeneratedLine++;\n              }\n            } else\n            {\n              if (i > 0) {\n                if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n                  continue;\n                }\n                result += ',';\n              }\n            }\n\n            result += base64VLQ.encode(mapping.generatedColumn -\n            previousGeneratedColumn);\n            previousGeneratedColumn = mapping.generatedColumn;\n\n            if (mapping.source != null) {\n              result += base64VLQ.encode(this._sources.indexOf(mapping.source) -\n              previousSource);\n              previousSource = this._sources.indexOf(mapping.source);\n\n              // lines are stored 0-based in SourceMap spec version 3\n              result += base64VLQ.encode(mapping.originalLine - 1 -\n              previousOriginalLine);\n              previousOriginalLine = mapping.originalLine - 1;\n\n              result += base64VLQ.encode(mapping.originalColumn -\n              previousOriginalColumn);\n              previousOriginalColumn = mapping.originalColumn;\n\n              if (mapping.name != null) {\n                result += base64VLQ.encode(this._names.indexOf(mapping.name) -\n                previousName);\n                previousName = this._names.indexOf(mapping.name);\n              }\n            }\n          }\n\n          return result;\n        };\n\n        SourceMapGenerator.prototype._generateSourcesContent =\n        function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n          return aSources.map(function (source) {\n            if (!this._sourcesContents) {\n              return null;\n            }\n            if (aSourceRoot != null) {\n              source = util.relative(aSourceRoot, source);\n            }\n            var key = util.toSetString(source);\n            return Object.prototype.hasOwnProperty.call(this._sourcesContents,\n            key) ?\n            this._sourcesContents[key] :\n            null;\n          }, this);\n        };\n\n        /**\n            * Externalize the source map.\n            */\n        SourceMapGenerator.prototype.toJSON =\n        function SourceMapGenerator_toJSON() {\n          var map = {\n            version: this._version,\n            sources: this._sources.toArray(),\n            names: this._names.toArray(),\n            mappings: this._serializeMappings() };\n\n          if (this._file != null) {\n            map.file = this._file;\n          }\n          if (this._sourceRoot != null) {\n            map.sourceRoot = this._sourceRoot;\n          }\n          if (this._sourcesContents) {\n            map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n          }\n\n          return map;\n        };\n\n        /**\n            * Render the source map being generated to a string.\n            */\n        SourceMapGenerator.prototype.toString =\n        function SourceMapGenerator_toString() {\n          return JSON.stringify(this.toJSON());\n        };\n\n        exports.SourceMapGenerator = SourceMapGenerator;\n\n      });\n\n    }, { \"./array-set\": 47, \"./base64-vlq\": 48, \"./mapping-list\": 51, \"./util\": 56, \"amdefine\": 1 }], 55: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n        var util = require('./util');\n\n        // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n        // operating systems these days (capturing the result).\n        var REGEX_NEWLINE = /(\\r?\\n)/;\n\n        // Newline character code for charCodeAt() comparisons\n        var NEWLINE_CODE = 10;\n\n        // Private symbol for identifying `SourceNode`s when multiple versions of\n        // the source-map library are loaded. This MUST NOT CHANGE across\n        // versions!\n        var isSourceNode = \"$$$isSourceNode$$$\";\n\n        /**\n                                                  * SourceNodes provide a way to abstract over interpolating/concatenating\n                                                  * snippets of generated JavaScript source code while maintaining the line and\n                                                  * column information associated with the original source code.\n                                                  *\n                                                  * @param aLine The original line number.\n                                                  * @param aColumn The original column number.\n                                                  * @param aSource The original source's filename.\n                                                  * @param aChunks Optional. An array of strings which are snippets of\n                                                  *        generated JS, or other SourceNodes.\n                                                  * @param aName The original identifier.\n                                                  */\n        function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n          this.children = [];\n          this.sourceContents = {};\n          this.line = aLine == null ? null : aLine;\n          this.column = aColumn == null ? null : aColumn;\n          this.source = aSource == null ? null : aSource;\n          this.name = aName == null ? null : aName;\n          this[isSourceNode] = true;\n          if (aChunks != null) this.add(aChunks);\n        }\n\n        /**\n           * Creates a SourceNode from generated code and a SourceMapConsumer.\n           *\n           * @param aGeneratedCode The generated code\n           * @param aSourceMapConsumer The SourceMap for the generated code\n           * @param aRelativePath Optional. The path that relative sources in the\n           *        SourceMapConsumer should be relative to.\n           */\n        SourceNode.fromStringWithSourceMap =\n        function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n          // The SourceNode we want to fill with the generated code\n          // and the SourceMap\n          var node = new SourceNode();\n\n          // All even indices of this array are one line of the generated code,\n          // while all odd indices are the newlines between two adjacent lines\n          // (since `REGEX_NEWLINE` captures its match).\n          // Processed fragments are removed from this array, by calling `shiftNextLine`.\n          var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n          var shiftNextLine = function shiftNextLine() {\n            var lineContents = remainingLines.shift();\n            // The last line of a file might not have a newline.\n            var newLine = remainingLines.shift() || \"\";\n            return lineContents + newLine;\n          };\n\n          // We need to remember the position of \"remainingLines\"\n          var lastGeneratedLine = 1,lastGeneratedColumn = 0;\n\n          // The generate SourceNodes we need a code range.\n          // To extract it current and last mapping is used.\n          // Here we store the last mapping.\n          var lastMapping = null;\n\n          aSourceMapConsumer.eachMapping(function (mapping) {\n            if (lastMapping !== null) {\n              // We add the code from \"lastMapping\" to \"mapping\":\n              // First check if there is a new line in between.\n              if (lastGeneratedLine < mapping.generatedLine) {\n                var code = \"\";\n                // Associate first line with \"lastMapping\"\n                addMappingWithCode(lastMapping, shiftNextLine());\n                lastGeneratedLine++;\n                lastGeneratedColumn = 0;\n                // The remaining code is added without mapping\n              } else {\n                // There is no new line in between.\n                // Associate the code between \"lastGeneratedColumn\" and\n                // \"mapping.generatedColumn\" with \"lastMapping\"\n                var nextLine = remainingLines[0];\n                var code = nextLine.substr(0, mapping.generatedColumn -\n                lastGeneratedColumn);\n                remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                lastGeneratedColumn);\n                lastGeneratedColumn = mapping.generatedColumn;\n                addMappingWithCode(lastMapping, code);\n                // No more remaining code, continue\n                lastMapping = mapping;\n                return;\n              }\n            }\n            // We add the generated code until the first mapping\n            // to the SourceNode without any mapping.\n            // Each line is added as separate string.\n            while (lastGeneratedLine < mapping.generatedLine) {\n              node.add(shiftNextLine());\n              lastGeneratedLine++;\n            }\n            if (lastGeneratedColumn < mapping.generatedColumn) {\n              var nextLine = remainingLines[0];\n              node.add(nextLine.substr(0, mapping.generatedColumn));\n              remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n              lastGeneratedColumn = mapping.generatedColumn;\n            }\n            lastMapping = mapping;\n          }, this);\n          // We have processed all mappings.\n          if (remainingLines.length > 0) {\n            if (lastMapping) {\n              // Associate the remaining code in the current line with \"lastMapping\"\n              addMappingWithCode(lastMapping, shiftNextLine());\n            }\n            // and add the remaining lines without any mapping\n            node.add(remainingLines.join(\"\"));\n          }\n\n          // Copy sourcesContent into SourceNode\n          aSourceMapConsumer.sources.forEach(function (sourceFile) {\n            var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n            if (content != null) {\n              if (aRelativePath != null) {\n                sourceFile = util.join(aRelativePath, sourceFile);\n              }\n              node.setSourceContent(sourceFile, content);\n            }\n          });\n\n          return node;\n\n          function addMappingWithCode(mapping, code) {\n            if (mapping === null || mapping.source === undefined) {\n              node.add(code);\n            } else {\n              var source = aRelativePath ?\n              util.join(aRelativePath, mapping.source) :\n              mapping.source;\n              node.add(new SourceNode(mapping.originalLine,\n              mapping.originalColumn,\n              source,\n              code,\n              mapping.name));\n            }\n          }\n        };\n\n        /**\n            * Add a chunk of generated JS to this source node.\n            *\n            * @param aChunk A string snippet of generated JS code, another instance of\n            *        SourceNode, or an array where each member is one of those things.\n            */\n        SourceNode.prototype.add = function SourceNode_add(aChunk) {\n          if (Array.isArray(aChunk)) {\n            aChunk.forEach(function (chunk) {\n              this.add(chunk);\n            }, this);\n          } else\n          if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n            if (aChunk) {\n              this.children.push(aChunk);\n            }\n          } else\n          {\n            throw new TypeError(\n            \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n\n          }\n          return this;\n        };\n\n        /**\n            * Add a chunk of generated JS to the beginning of this source node.\n            *\n            * @param aChunk A string snippet of generated JS code, another instance of\n            *        SourceNode, or an array where each member is one of those things.\n            */\n        SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n          if (Array.isArray(aChunk)) {\n            for (var i = aChunk.length - 1; i >= 0; i--) {\n              this.prepend(aChunk[i]);\n            }\n          } else\n          if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n            this.children.unshift(aChunk);\n          } else\n          {\n            throw new TypeError(\n            \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n\n          }\n          return this;\n        };\n\n        /**\n            * Walk over the tree of JS snippets in this node and its children. The\n            * walking function is called once for each snippet of JS and is passed that\n            * snippet and the its original associated source's line/column location.\n            *\n            * @param aFn The traversal function.\n            */\n        SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n          var chunk;\n          for (var i = 0, len = this.children.length; i < len; i++) {\n            chunk = this.children[i];\n            if (chunk[isSourceNode]) {\n              chunk.walk(aFn);\n            } else\n            {\n              if (chunk !== '') {\n                aFn(chunk, { source: this.source,\n                  line: this.line,\n                  column: this.column,\n                  name: this.name });\n              }\n            }\n          }\n        };\n\n        /**\n            * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n            * each of `this.children`.\n            *\n            * @param aSep The separator.\n            */\n        SourceNode.prototype.join = function SourceNode_join(aSep) {\n          var newChildren;\n          var i;\n          var len = this.children.length;\n          if (len > 0) {\n            newChildren = [];\n            for (i = 0; i < len - 1; i++) {\n              newChildren.push(this.children[i]);\n              newChildren.push(aSep);\n            }\n            newChildren.push(this.children[i]);\n            this.children = newChildren;\n          }\n          return this;\n        };\n\n        /**\n            * Call String.prototype.replace on the very right-most source snippet. Useful\n            * for trimming whitespace from the end of a source node, etc.\n            *\n            * @param aPattern The pattern to replace.\n            * @param aReplacement The thing to replace the pattern with.\n            */\n        SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n          var lastChild = this.children[this.children.length - 1];\n          if (lastChild[isSourceNode]) {\n            lastChild.replaceRight(aPattern, aReplacement);\n          } else\n          if (typeof lastChild === 'string') {\n            this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n          } else\n          {\n            this.children.push(''.replace(aPattern, aReplacement));\n          }\n          return this;\n        };\n\n        /**\n            * Set the source content for a source file. This will be added to the SourceMapGenerator\n            * in the sourcesContent field.\n            *\n            * @param aSourceFile The filename of the source file\n            * @param aSourceContent The content of the source file\n            */\n        SourceNode.prototype.setSourceContent =\n        function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n          this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n        };\n\n        /**\n            * Walk over the tree of SourceNodes. The walking function is called for each\n            * source file content and is passed the filename and source content.\n            *\n            * @param aFn The traversal function.\n            */\n        SourceNode.prototype.walkSourceContents =\n        function SourceNode_walkSourceContents(aFn) {\n          for (var i = 0, len = this.children.length; i < len; i++) {\n            if (this.children[i][isSourceNode]) {\n              this.children[i].walkSourceContents(aFn);\n            }\n          }\n\n          var sources = Object.keys(this.sourceContents);\n          for (var i = 0, len = sources.length; i < len; i++) {\n            aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n          }\n        };\n\n        /**\n            * Return the string representation of this source node. Walks over the tree\n            * and concatenates all the various snippets together to one string.\n            */\n        SourceNode.prototype.toString = function SourceNode_toString() {\n          var str = \"\";\n          this.walk(function (chunk) {\n            str += chunk;\n          });\n          return str;\n        };\n\n        /**\n            * Returns the string representation of this source node along with a source\n            * map.\n            */\n        SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n          var generated = {\n            code: \"\",\n            line: 1,\n            column: 0 };\n\n          var map = new SourceMapGenerator(aArgs);\n          var sourceMappingActive = false;\n          var lastOriginalSource = null;\n          var lastOriginalLine = null;\n          var lastOriginalColumn = null;\n          var lastOriginalName = null;\n          this.walk(function (chunk, original) {\n            generated.code += chunk;\n            if (original.source !== null &&\n            original.line !== null &&\n            original.column !== null) {\n              if (lastOriginalSource !== original.source ||\n              lastOriginalLine !== original.line ||\n              lastOriginalColumn !== original.column ||\n              lastOriginalName !== original.name) {\n                map.addMapping({\n                  source: original.source,\n                  original: {\n                    line: original.line,\n                    column: original.column },\n\n                  generated: {\n                    line: generated.line,\n                    column: generated.column },\n\n                  name: original.name });\n\n              }\n              lastOriginalSource = original.source;\n              lastOriginalLine = original.line;\n              lastOriginalColumn = original.column;\n              lastOriginalName = original.name;\n              sourceMappingActive = true;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                generated: {\n                  line: generated.line,\n                  column: generated.column } });\n\n\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            }\n            for (var idx = 0, length = chunk.length; idx < length; idx++) {\n              if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n                generated.line++;\n                generated.column = 0;\n                // Mappings end at eol\n                if (idx + 1 === length) {\n                  lastOriginalSource = null;\n                  sourceMappingActive = false;\n                } else if (sourceMappingActive) {\n                  map.addMapping({\n                    source: original.source,\n                    original: {\n                      line: original.line,\n                      column: original.column },\n\n                    generated: {\n                      line: generated.line,\n                      column: generated.column },\n\n                    name: original.name });\n\n                }\n              } else {\n                generated.column++;\n              }\n            }\n          });\n          this.walkSourceContents(function (sourceFile, sourceContent) {\n            map.setSourceContent(sourceFile, sourceContent);\n          });\n\n          return { code: generated.code, map: map };\n        };\n\n        exports.SourceNode = SourceNode;\n\n      });\n\n    }, { \"./source-map-generator\": 54, \"./util\": 56, \"amdefine\": 1 }], 56: [function (require, module, exports) {\n      /* -*- Mode: js; js-indent-level: 2; -*- */\n      /*\n                                                   * Copyright 2011 Mozilla Foundation and contributors\n                                                   * Licensed under the New BSD license. See LICENSE or:\n                                                   * http://opensource.org/licenses/BSD-3-Clause\n                                                   */\n      if (typeof define !== 'function') {\n        var define = require('amdefine')(module, require);\n      }\n      define(function (require, exports, module) {\n\n        /**\n                                                   * This is a helper function for getting values from parameter/options\n                                                   * objects.\n                                                   *\n                                                   * @param args The object we are extracting values from\n                                                   * @param name The name of the property we are getting.\n                                                   * @param defaultValue An optional value to return if the property is missing\n                                                   * from the object. If this is not specified and the property is missing, an\n                                                   * error will be thrown.\n                                                   */\n        function getArg(aArgs, aName, aDefaultValue) {\n          if (aName in aArgs) {\n            return aArgs[aName];\n          } else if (arguments.length === 3) {\n            return aDefaultValue;\n          } else {\n            throw new Error('\"' + aName + '\" is a required argument.');\n          }\n        }\n        exports.getArg = getArg;\n\n        var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\n        var dataUrlRegexp = /^data:.+\\,.+$/;\n\n        function urlParse(aUrl) {\n          var match = aUrl.match(urlRegexp);\n          if (!match) {\n            return null;\n          }\n          return {\n            scheme: match[1],\n            auth: match[2],\n            host: match[3],\n            port: match[4],\n            path: match[5] };\n\n        }\n        exports.urlParse = urlParse;\n\n        function urlGenerate(aParsedUrl) {\n          var url = '';\n          if (aParsedUrl.scheme) {\n            url += aParsedUrl.scheme + ':';\n          }\n          url += '//';\n          if (aParsedUrl.auth) {\n            url += aParsedUrl.auth + '@';\n          }\n          if (aParsedUrl.host) {\n            url += aParsedUrl.host;\n          }\n          if (aParsedUrl.port) {\n            url += \":\" + aParsedUrl.port;\n          }\n          if (aParsedUrl.path) {\n            url += aParsedUrl.path;\n          }\n          return url;\n        }\n        exports.urlGenerate = urlGenerate;\n\n        /**\n                                            * Normalizes a path, or the path portion of a URL:\n                                            *\n                                            * - Replaces consequtive slashes with one slash.\n                                            * - Removes unnecessary '.' parts.\n                                            * - Removes unnecessary '<dir>/..' parts.\n                                            *\n                                            * Based on code in the Node.js 'path' core module.\n                                            *\n                                            * @param aPath The path or url to normalize.\n                                            */\n        function normalize(aPath) {\n          var path = aPath;\n          var url = urlParse(aPath);\n          if (url) {\n            if (!url.path) {\n              return aPath;\n            }\n            path = url.path;\n          }\n          var isAbsolute = path.charAt(0) === '/';\n\n          var parts = path.split(/\\/+/);\n          for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n            part = parts[i];\n            if (part === '.') {\n              parts.splice(i, 1);\n            } else if (part === '..') {\n              up++;\n            } else if (up > 0) {\n              if (part === '') {\n                // The first part is blank if the path is absolute. Trying to go\n                // above the root is a no-op. Therefore we can remove all '..' parts\n                // directly after the root.\n                parts.splice(i + 1, up);\n                up = 0;\n              } else {\n                parts.splice(i, 2);\n                up--;\n              }\n            }\n          }\n          path = parts.join('/');\n\n          if (path === '') {\n            path = isAbsolute ? '/' : '.';\n          }\n\n          if (url) {\n            url.path = path;\n            return urlGenerate(url);\n          }\n          return path;\n        }\n        exports.normalize = normalize;\n\n        /**\n                                        * Joins two paths/URLs.\n                                        *\n                                        * @param aRoot The root path or URL.\n                                        * @param aPath The path or URL to be joined with the root.\n                                        *\n                                        * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n                                        *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n                                        *   first.\n                                        * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n                                        *   is updated with the result and aRoot is returned. Otherwise the result\n                                        *   is returned.\n                                        *   - If aPath is absolute, the result is aPath.\n                                        *   - Otherwise the two paths are joined with a slash.\n                                        * - Joining for example 'http://' and 'www.example.com' is also supported.\n                                        */\n        function join(aRoot, aPath) {\n          if (aRoot === \"\") {\n            aRoot = \".\";\n          }\n          if (aPath === \"\") {\n            aPath = \".\";\n          }\n          var aPathUrl = urlParse(aPath);\n          var aRootUrl = urlParse(aRoot);\n          if (aRootUrl) {\n            aRoot = aRootUrl.path || '/';\n          }\n\n          // `join(foo, '//www.example.org')`\n          if (aPathUrl && !aPathUrl.scheme) {\n            if (aRootUrl) {\n              aPathUrl.scheme = aRootUrl.scheme;\n            }\n            return urlGenerate(aPathUrl);\n          }\n\n          if (aPathUrl || aPath.match(dataUrlRegexp)) {\n            return aPath;\n          }\n\n          // `join('http://', 'www.example.com')`\n          if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n            aRootUrl.host = aPath;\n            return urlGenerate(aRootUrl);\n          }\n\n          var joined = aPath.charAt(0) === '/' ?\n          aPath :\n          normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n          if (aRootUrl) {\n            aRootUrl.path = joined;\n            return urlGenerate(aRootUrl);\n          }\n          return joined;\n        }\n        exports.join = join;\n\n        /**\n                              * Make a path relative to a URL or another path.\n                              *\n                              * @param aRoot The root path or URL.\n                              * @param aPath The path or URL to be made relative to aRoot.\n                              */\n        function relative(aRoot, aPath) {\n          if (aRoot === \"\") {\n            aRoot = \".\";\n          }\n\n          aRoot = aRoot.replace(/\\/$/, '');\n\n          // It is possible for the path to be above the root. In this case, simply\n          // checking whether the root is a prefix of the path won't work. Instead, we\n          // need to remove components from the root one by one, until either we find\n          // a prefix that fits, or we run out of components to remove.\n          var level = 0;\n          while (aPath.indexOf(aRoot + '/') !== 0) {\n            var index = aRoot.lastIndexOf(\"/\");\n            if (index < 0) {\n              return aPath;\n            }\n\n            // If the only part of the root that is left is the scheme (i.e. http://,\n            // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n            // have exhausted all components, so the path is not relative to the root.\n            aRoot = aRoot.slice(0, index);\n            if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n              return aPath;\n            }\n\n            ++level;\n          }\n\n          // Make sure we add a \"../\" for each component we removed from the root.\n          return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n        }\n        exports.relative = relative;\n\n        /**\n                                      * Because behavior goes wacky when you set `__proto__` on objects, we\n                                      * have to prefix all the strings in our set with an arbitrary character.\n                                      *\n                                      * See https://github.com/mozilla/source-map/pull/31 and\n                                      * https://github.com/mozilla/source-map/issues/30\n                                      *\n                                      * @param String aStr\n                                      */\n        function toSetString(aStr) {\n          return '$' + aStr;\n        }\n        exports.toSetString = toSetString;\n\n        function fromSetString(aStr) {\n          return aStr.substr(1);\n        }\n        exports.fromSetString = fromSetString;\n\n        /**\n                                                * Comparator between two mappings where the original positions are compared.\n                                                *\n                                                * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n                                                * mappings with the same original source/line/column, but different generated\n                                                * line and column the same. Useful when searching for a mapping with a\n                                                * stubbed out mapping.\n                                                */\n        function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n          var cmp = mappingA.source - mappingB.source;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.originalLine - mappingB.originalLine;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.originalColumn - mappingB.originalColumn;\n          if (cmp !== 0 || onlyCompareOriginal) {\n            return cmp;\n          }\n\n          cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.generatedLine - mappingB.generatedLine;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          return mappingA.name - mappingB.name;\n        };\n        exports.compareByOriginalPositions = compareByOriginalPositions;\n\n        /**\n                                                                          * Comparator between two mappings with deflated source and name indices where\n                                                                          * the generated positions are compared.\n                                                                          *\n                                                                          * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n                                                                          * mappings with the same generated line and column, but different\n                                                                          * source/name/original line and column the same. Useful when searching for a\n                                                                          * mapping with a stubbed out mapping.\n                                                                          */\n        function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n          var cmp = mappingA.generatedLine - mappingB.generatedLine;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n          if (cmp !== 0 || onlyCompareGenerated) {\n            return cmp;\n          }\n\n          cmp = mappingA.source - mappingB.source;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.originalLine - mappingB.originalLine;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.originalColumn - mappingB.originalColumn;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          return mappingA.name - mappingB.name;\n        };\n        exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\n        function strcmp(aStr1, aStr2) {\n          if (aStr1 === aStr2) {\n            return 0;\n          }\n\n          if (aStr1 > aStr2) {\n            return 1;\n          }\n\n          return -1;\n        }\n\n        /**\n           * Comparator between two mappings with inflated source and name strings where\n           * the generated positions are compared.\n           */\n        function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n          var cmp = mappingA.generatedLine - mappingB.generatedLine;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = strcmp(mappingA.source, mappingB.source);\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.originalLine - mappingB.originalLine;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          cmp = mappingA.originalColumn - mappingB.originalColumn;\n          if (cmp !== 0) {\n            return cmp;\n          }\n\n          return strcmp(mappingA.name, mappingB.name);\n        };\n        exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n      });\n\n    }, { \"amdefine\": 1 }], 57: [function (require, module, exports) {\n      (function (self) {\n        'use strict';\n\n        if (self.fetch) {\n          return;\n        }\n\n        var support = {\n          searchParams: 'URLSearchParams' in self,\n          iterable: 'Symbol' in self && 'iterator' in Symbol,\n          blob: 'FileReader' in self && 'Blob' in self && function () {\n            try {\n              new Blob();\n              return true;\n            } catch (e) {\n              return false;\n            }\n          }(),\n          formData: 'FormData' in self,\n          arrayBuffer: 'ArrayBuffer' in self };\n\n\n        if (support.arrayBuffer) {\n          var viewClasses = [\n          '[object Int8Array]',\n          '[object Uint8Array]',\n          '[object Uint8ClampedArray]',\n          '[object Int16Array]',\n          '[object Uint16Array]',\n          '[object Int32Array]',\n          '[object Uint32Array]',\n          '[object Float32Array]',\n          '[object Float64Array]'];\n\n\n          var isDataView = function isDataView(obj) {\n            return obj && DataView.prototype.isPrototypeOf(obj);\n          };\n\n          var isArrayBufferView = ArrayBuffer.isView || function (obj) {\n            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;\n          };\n        }\n\n        function normalizeName(name) {\n          if (typeof name !== 'string') {\n            name = String(name);\n          }\n          if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n            throw new TypeError('Invalid character in header field name');\n          }\n          return name.toLowerCase();\n        }\n\n        function normalizeValue(value) {\n          if (typeof value !== 'string') {\n            value = String(value);\n          }\n          return value;\n        }\n\n        // Build a destructive iterator for the value list\n        function iteratorFor(items) {\n          var iterator = {\n            next: function next() {\n              var value = items.shift();\n              return { done: value === undefined, value: value };\n            } };\n\n\n          if (support.iterable) {\n            iterator[Symbol.iterator] = function () {\n              return iterator;\n            };\n          }\n\n          return iterator;\n        }\n\n        function Headers(headers) {\n          this.map = {};\n\n          if (headers instanceof Headers) {\n            headers.forEach(function (value, name) {\n              this.append(name, value);\n            }, this);\n\n          } else if (headers) {\n            Object.getOwnPropertyNames(headers).forEach(function (name) {\n              this.append(name, headers[name]);\n            }, this);\n          }\n        }\n\n        Headers.prototype.append = function (name, value) {\n          name = normalizeName(name);\n          value = normalizeValue(value);\n          var list = this.map[name];\n          if (!list) {\n            list = [];\n            this.map[name] = list;\n          }\n          list.push(value);\n        };\n\n        Headers.prototype['delete'] = function (name) {\n          delete this.map[normalizeName(name)];\n        };\n\n        Headers.prototype.get = function (name) {\n          var values = this.map[normalizeName(name)];\n          return values ? values[0] : null;\n        };\n\n        Headers.prototype.getAll = function (name) {\n          return this.map[normalizeName(name)] || [];\n        };\n\n        Headers.prototype.has = function (name) {\n          return this.map.hasOwnProperty(normalizeName(name));\n        };\n\n        Headers.prototype.set = function (name, value) {\n          this.map[normalizeName(name)] = [normalizeValue(value)];\n        };\n\n        Headers.prototype.forEach = function (callback, thisArg) {\n          Object.getOwnPropertyNames(this.map).forEach(function (name) {\n            this.map[name].forEach(function (value) {\n              callback.call(thisArg, value, name, this);\n            }, this);\n          }, this);\n        };\n\n        Headers.prototype.keys = function () {\n          var items = [];\n          this.forEach(function (value, name) {items.push(name);});\n          return iteratorFor(items);\n        };\n\n        Headers.prototype.values = function () {\n          var items = [];\n          this.forEach(function (value) {items.push(value);});\n          return iteratorFor(items);\n        };\n\n        Headers.prototype.entries = function () {\n          var items = [];\n          this.forEach(function (value, name) {items.push([name, value]);});\n          return iteratorFor(items);\n        };\n\n        if (support.iterable) {\n          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n        }\n\n        function consumed(body) {\n          if (body.bodyUsed) {\n            return Promise.reject(new TypeError('Already read'));\n          }\n          body.bodyUsed = true;\n        }\n\n        function fileReaderReady(reader) {\n          return new Promise(function (resolve, reject) {\n            reader.onload = function () {\n              resolve(reader.result);\n            };\n            reader.onerror = function () {\n              reject(reader.error);\n            };\n          });\n        }\n\n        function readBlobAsArrayBuffer(blob) {\n          var reader = new FileReader();\n          var promise = fileReaderReady(reader);\n          reader.readAsArrayBuffer(blob);\n          return promise;\n        }\n\n        function readBlobAsText(blob) {\n          var reader = new FileReader();\n          var promise = fileReaderReady(reader);\n          reader.readAsText(blob);\n          return promise;\n        }\n\n        function readArrayBufferAsText(buf) {\n          var view = new Uint8Array(buf);\n          var chars = new Array(view.length);\n\n          for (var i = 0; i < view.length; i++) {\n            chars[i] = String.fromCharCode(view[i]);\n          }\n          return chars.join('');\n        }\n\n        function bufferClone(buf) {\n          if (buf.slice) {\n            return buf.slice(0);\n          } else {\n            var view = new Uint8Array(buf.byteLength);\n            view.set(new Uint8Array(buf));\n            return view.buffer;\n          }\n        }\n\n        function Body() {\n          this.bodyUsed = false;\n\n          this._initBody = function (body) {\n            this._bodyInit = body;\n            if (!body) {\n              this._bodyText = '';\n            } else if (typeof body === 'string') {\n              this._bodyText = body;\n            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n              this._bodyBlob = body;\n            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n              this._bodyFormData = body;\n            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n              this._bodyText = body.toString();\n            } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n              this._bodyArrayBuffer = bufferClone(body.buffer);\n              // IE 10-11 can't handle a DataView body.\n              this._bodyInit = new Blob([this._bodyArrayBuffer]);\n            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n              this._bodyArrayBuffer = bufferClone(body);\n            } else {\n              throw new Error('unsupported BodyInit type');\n            }\n\n            if (!this.headers.get('content-type')) {\n              if (typeof body === 'string') {\n                this.headers.set('content-type', 'text/plain;charset=UTF-8');\n              } else if (this._bodyBlob && this._bodyBlob.type) {\n                this.headers.set('content-type', this._bodyBlob.type);\n              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n                this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n              }\n            }\n          };\n\n          if (support.blob) {\n            this.blob = function () {\n              var rejected = consumed(this);\n              if (rejected) {\n                return rejected;\n              }\n\n              if (this._bodyBlob) {\n                return Promise.resolve(this._bodyBlob);\n              } else if (this._bodyArrayBuffer) {\n                return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n              } else if (this._bodyFormData) {\n                throw new Error('could not read FormData body as blob');\n              } else {\n                return Promise.resolve(new Blob([this._bodyText]));\n              }\n            };\n\n            this.arrayBuffer = function () {\n              if (this._bodyArrayBuffer) {\n                return consumed(this) || Promise.resolve(this._bodyArrayBuffer);\n              } else {\n                return this.blob().then(readBlobAsArrayBuffer);\n              }\n            };\n          }\n\n          this.text = function () {\n            var rejected = consumed(this);\n            if (rejected) {\n              return rejected;\n            }\n\n            if (this._bodyBlob) {\n              return readBlobAsText(this._bodyBlob);\n            } else if (this._bodyArrayBuffer) {\n              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));\n            } else if (this._bodyFormData) {\n              throw new Error('could not read FormData body as text');\n            } else {\n              return Promise.resolve(this._bodyText);\n            }\n          };\n\n          if (support.formData) {\n            this.formData = function () {\n              return this.text().then(decode);\n            };\n          }\n\n          this.json = function () {\n            return this.text().then(JSON.parse);\n          };\n\n          return this;\n        }\n\n        // HTTP methods whose capitalization should be normalized\n        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n        function normalizeMethod(method) {\n          var upcased = method.toUpperCase();\n          return methods.indexOf(upcased) > -1 ? upcased : method;\n        }\n\n        function Request(input, options) {\n          options = options || {};\n          var body = options.body;\n\n          if (typeof input === 'string') {\n            this.url = input;\n          } else {\n            if (input.bodyUsed) {\n              throw new TypeError('Already read');\n            }\n            this.url = input.url;\n            this.credentials = input.credentials;\n            if (!options.headers) {\n              this.headers = new Headers(input.headers);\n            }\n            this.method = input.method;\n            this.mode = input.mode;\n            if (!body && input._bodyInit != null) {\n              body = input._bodyInit;\n              input.bodyUsed = true;\n            }\n          }\n\n          this.credentials = options.credentials || this.credentials || 'omit';\n          if (options.headers || !this.headers) {\n            this.headers = new Headers(options.headers);\n          }\n          this.method = normalizeMethod(options.method || this.method || 'GET');\n          this.mode = options.mode || this.mode || null;\n          this.referrer = null;\n\n          if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n            throw new TypeError('Body not allowed for GET or HEAD requests');\n          }\n          this._initBody(body);\n        }\n\n        Request.prototype.clone = function () {\n          return new Request(this, { body: this._bodyInit });\n        };\n\n        function decode(body) {\n          var form = new FormData();\n          body.trim().split('&').forEach(function (bytes) {\n            if (bytes) {\n              var split = bytes.split('=');\n              var name = split.shift().replace(/\\+/g, ' ');\n              var value = split.join('=').replace(/\\+/g, ' ');\n              form.append(decodeURIComponent(name), decodeURIComponent(value));\n            }\n          });\n          return form;\n        }\n\n        function parseHeaders(rawHeaders) {\n          var headers = new Headers();\n          rawHeaders.split('\\r\\n').forEach(function (line) {\n            var parts = line.split(':');\n            var key = parts.shift().trim();\n            if (key) {\n              var value = parts.join(':').trim();\n              headers.append(key, value);\n            }\n          });\n          return headers;\n        }\n\n        Body.call(Request.prototype);\n\n        function Response(bodyInit, options) {\n          if (!options) {\n            options = {};\n          }\n\n          this.type = 'default';\n          this.status = 'status' in options ? options.status : 200;\n          this.ok = this.status >= 200 && this.status < 300;\n          this.statusText = 'statusText' in options ? options.statusText : 'OK';\n          this.headers = new Headers(options.headers);\n          this.url = options.url || '';\n          this._initBody(bodyInit);\n        }\n\n        Body.call(Response.prototype);\n\n        Response.prototype.clone = function () {\n          return new Response(this._bodyInit, {\n            status: this.status,\n            statusText: this.statusText,\n            headers: new Headers(this.headers),\n            url: this.url });\n\n        };\n\n        Response.error = function () {\n          var response = new Response(null, { status: 0, statusText: '' });\n          response.type = 'error';\n          return response;\n        };\n\n        var redirectStatuses = [301, 302, 303, 307, 308];\n\n        Response.redirect = function (url, status) {\n          if (redirectStatuses.indexOf(status) === -1) {\n            throw new RangeError('Invalid status code');\n          }\n\n          return new Response(null, { status: status, headers: { location: url } });\n        };\n\n        self.Headers = Headers;\n        self.Request = Request;\n        self.Response = Response;\n\n        self.fetch = function (input, init) {\n          return new Promise(function (resolve, reject) {\n            var request = new Request(input, init);\n            var xhr = new XMLHttpRequest();\n\n            xhr.onload = function () {\n              var options = {\n                status: xhr.status,\n                statusText: xhr.statusText,\n                headers: parseHeaders(xhr.getAllResponseHeaders() || '') };\n\n              options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n              var body = 'response' in xhr ? xhr.response : xhr.responseText;\n              resolve(new Response(body, options));\n            };\n\n            xhr.onerror = function () {\n              reject(new TypeError('Network request failed'));\n            };\n\n            xhr.ontimeout = function () {\n              reject(new TypeError('Network request failed'));\n            };\n\n            xhr.open(request.method, request.url, true);\n\n            if (request.credentials === 'include') {\n              xhr.withCredentials = true;\n            }\n\n            if ('responseType' in xhr && support.blob) {\n              xhr.responseType = 'blob';\n            }\n\n            request.headers.forEach(function (value, name) {\n              xhr.setRequestHeader(name, value);\n            });\n\n            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n          });\n        };\n        self.fetch.polyfill = true;\n      })(typeof self !== 'undefined' ? self : this);\n\n    }, {}], 58: [function (require, module, exports) {\n      'use strict';\n\n      /**\n                     * A callback function that fires after the left arrow is clicked\n                     * @callback CarouselArrows~onLeftArrowClick\n                     */\n\n      /**\n                         * A callback function that fires after the right arrow is clicked\n                         * @callback CarouselArrows~onRightArrowClick\n                         */\n\n      /**\n                             * Adds functionality for carousel's left and right arrows.\n                             * @constructor CarouselArrows\n                             */\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true });\n\n\n      var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      var CarouselArrows = function () {\n\n        /**\n                                         * When the carousel is instantiated.\n                                         * @param {object} options - Options passed into instance\n                                         * @param {HTMLElement} options.leftArrow - The html element to use as the left arrow\n                                         * @param {HTMLElement} options.rightArrow - The html element to use as the right arrow\n                                         * @param {HTMLCollection} options.panels - The carousel panel elements that to be associated with the arrows\n                                         * @param {string} [options.arrowDisabledClass] - The CSS class that gets added to an arrow when it becomes disabled\n                                         * @param {CarouselArrows~onLeftArrowClick} [options.onLeftArrowClick] - When the left arrow is clicked\n                                         * @param {CarouselArrows~onRightArrowClick} [options.onRightArrowClick] - When the right arrow is clicked\n                                         */\n        function CarouselArrows(options) {\n          var _this = this;\n\n          _classCallCheck(this, CarouselArrows);\n\n          options = _extends({\n            leftArrow: null,\n            rightArrow: null,\n            panels: [],\n            arrowDisabledClass: 'carousel-arrow-disabled',\n            onLeftArrowClick: null,\n            onRightArrowClick: null,\n            initialIndex: 0 },\n          options);\n\n          if (!options.leftArrow && !options.rightArrow) {\n            console.error('Carousel Arrows Error: no left and right arrows were passed into constructor');\n          }\n\n          this.options = options;\n\n          this.arrows = [];\n\n          // setup listeners\n          if (options.leftArrow) {\n            this.arrows.push(options.leftArrow);\n            this._leftArrowEventListener = function (e) {\n              return _this.onLeftArrowClick(e);\n            };\n            options.leftArrow.addEventListener('click', this._leftArrowEventListener);\n          }\n\n          if (options.rightArrow) {\n            this.arrows.push(options.rightArrow);\n            this._rightArrowEventListener = function (e) {\n              return _this.onRightArrowClick(e);\n            };\n            options.rightArrow.addEventListener('click', this._rightArrowEventListener);\n          }\n        }\n\n        /**\n           * Updates the arrow based on the supplied panel index.\n           * @param {Number} panelIndex - The new panel index\n           */\n\n\n        _createClass(CarouselArrows, [{\n          key: 'update',\n          value: function update(panelIndex) {\n            var currentItemNum = panelIndex + 1,\n            maxItems = this.options.panels.length,\n            minItems = 1;\n\n            if (currentItemNum < maxItems && currentItemNum > minItems) {\n              // not on first or last item\n              this.enable();\n            } else if (currentItemNum === maxItems && currentItemNum === minItems) {\n              // on the only panel available\n              this.disable();\n            } else if (currentItemNum === maxItems) {\n              // on last item\n              this.disableRightArrow();\n              this.enableLeftArrow();\n            } else if (currentItemNum === minItems) {\n              // on first item\n              this.disableLeftArrow();\n              this.enableRightArrow();\n            }\n          }\n\n          /**\n             * Disables all arrows\n             */ },\n\n        {\n          key: 'disable',\n          value: function disable() {\n            this.disableLeftArrow();\n            this.disableRightArrow();\n          }\n\n          /**\n             * Disables left arrow.\n             */ },\n\n        {\n          key: 'disableLeftArrow',\n          value: function disableLeftArrow() {\n            if (this.options.leftArrow) {\n              this.options.leftArrow.classList.add(this.options.arrowDisabledClass);\n            }\n          }\n\n          /**\n             * Disables right arrow.\n             */ },\n\n        {\n          key: 'disableRightArrow',\n          value: function disableRightArrow() {\n            if (this.options.rightArrow) {\n              this.options.rightArrow.classList.add(this.options.arrowDisabledClass);\n            }\n          }\n\n          /**\n             * Re-enables all arrows.\n             */ },\n\n        {\n          key: 'enable',\n          value: function enable() {\n            this.enableLeftArrow();\n            this.enableRightArrow();\n          }\n\n          /**\n             * Re-enables left arrow.\n             */ },\n\n        {\n          key: 'enableLeftArrow',\n          value: function enableLeftArrow() {\n            if (this.options.leftArrow) {\n              this.options.leftArrow.classList.remove(this.options.arrowDisabledClass);\n            }\n          }\n\n          /**\n             * Re-enables right arrow.\n             */ },\n\n        {\n          key: 'enableRightArrow',\n          value: function enableRightArrow() {\n            if (this.options.rightArrow) {\n              this.options.rightArrow.classList.remove(this.options.arrowDisabledClass);\n            }\n          }\n\n          /**\n             * When the left arrow is clicked.\n             * @param {Event} e\n             */ },\n\n        {\n          key: 'onLeftArrowClick',\n          value: function onLeftArrowClick(e) {\n            var isDisabled = this.options.leftArrow.classList.contains(this.options.arrowDisabledClass);\n            if (this.options.onLeftArrowClick && !isDisabled) {\n              this.options.onLeftArrowClick(e);\n            }\n          }\n\n          /**\n             * When the right arrow is clicked.\n             * @param {Event} e\n             */ },\n\n        {\n          key: 'onRightArrowClick',\n          value: function onRightArrowClick(e) {\n            var isDisabled = this.options.rightArrow.classList.contains(this.options.arrowDisabledClass);\n            if (this.options.onRightArrowClick && !isDisabled) {\n              this.options.onRightArrowClick(e);\n            }\n          }\n\n          /**\n             * Final cleanup of instance.\n             * @memberOf CarouselArrows\n             */ },\n\n        {\n          key: 'destroy',\n          value: function destroy() {\n            if (this.options.leftArrow) {\n              this.options.leftArrow.removeEventListener('click', this._leftArrowEventListener);\n            }\n\n            if (this.options.rightArrow) {\n              this.options.rightArrow.removeEventListener('click', this._rightArrowEventListener);\n            }\n          } }]);\n\n\n        return CarouselArrows;\n      }();\n\n      exports.default = CarouselArrows;\n\n      module.exports = exports['default'];\n\n    }, {}], 59: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true });\n\n\n      var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      var _get = function get(object, property, receiver) {if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {return get(parent, property, receiver);}} else if (\"value\" in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}};\n\n      var _promise = require('promise');\n\n      var _promise2 = _interopRequireDefault(_promise);\n\n      var _moduleJs = require('module-js');\n\n      var _moduleJs2 = _interopRequireDefault(_moduleJs);\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call && ((typeof call === \"undefined\" ? \"undefined\" : _typeof2(call)) === \"object\" || typeof call === \"function\") ? call : self;}\n\n      function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : _typeof2(superClass)));}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}\n\n      var CarouselPanel = function (_Module) {\n        _inherits(CarouselPanel, _Module);\n\n        /**\n                                            * Sets some stuff up.\n                                            * @param {HTMLElement} el - The element that represents a panel.\n                                            * @param {Object} options - The options\n                                            * @param {String} [options.activeClass] - The css class that gets applied when the module is showing\n                                            * @param {String} [options.assetLoadedClass] - The css class that gets added when the asset has been loaded\n                                            * @param {String} [options.lazyLoadAttr] - The lazy loading attribute of the panel element containing the src to load\n                                            */\n        function CarouselPanel(el, options) {\n          _classCallCheck(this, CarouselPanel);\n\n          options = _extends({\n            activeClass: 'carousel-panel-active',\n            lazyLoadAttr: null,\n            loadedClass: 'carousel-panel-loaded',\n            assetLoadedClass: 'carousel-panel-asset-loaded' },\n          options);\n\n          var _this = _possibleConstructorReturn(this, (CarouselPanel.__proto__ || Object.getPrototypeOf(CarouselPanel)).call(this, el, options));\n\n          _this.options = options;\n          _this.el = el;\n          return _this;\n        }\n\n        /**\n           * Loads all lazy-loadable images within the panel.\n           * @returns {Promise}\n           */\n\n\n        _createClass(CarouselPanel, [{\n          key: 'load',\n          value: function load() {\n            var _this2 = this;\n\n            var loadPromises = [];\n            this._loadableImages().forEach(function (imgEl) {\n              var loadedClass = _this2.options.assetLoadedClass;\n              var promise = _this2._loadImage(imgEl).then(function () {\n                _this2.el.classList.add(loadedClass);\n              });\n              loadPromises.push(promise);\n            });\n\n            return _get(CarouselPanel.prototype.__proto__ || Object.getPrototypeOf(CarouselPanel.prototype), 'load', this).call(this).then(function () {\n              return _promise2.default.all(loadPromises);\n            });\n          }\n\n          /**\n             * Gets the live set of loadable image elements within the panel (or the panel itself if it is an <img>).\n             * @returns {Array}\n             * @private\n             */ },\n\n        {\n          key: '_loadableImages',\n          value: function _loadableImages() {\n            // if panel has lazy load attribute,  add to loadable assets\n            if (this.el.tagName.toLowerCase() === 'img' && this.el.getAttribute(this.options.lazyLoadAttr)) {\n              return [this.el];\n            } else {\n              return Array.prototype.slice.call(this.el.querySelectorAll('img[' + this.options.lazyLoadAttr + ']'));\n            }\n          }\n\n          /**\n             * Manually lazy loads a resource using an element's data attribute.\n             * @param {HTMLImageElement} img - The image element to load\n             * @private\n             */ },\n\n        {\n          key: '_loadImage',\n          value: function _loadImage(img) {\n            var src = img.getAttribute(this.options.lazyLoadAttr);\n            return new _promise2.default(function (resolve) {\n              img.onload = function () {\n                resolve(img);\n              };\n              img.onerror = function () {\n                // IE 9-11 have an issue where it automatically triggers an error on some images,\n                // and then will immediately trigger onload() causing intermittent errors to appear\n                // until this is fixed or we have a workaround, we will be resolving\n                // even if there is an error\n                resolve(img);\n              };\n              img.src = src;\n            });\n          } }]);\n\n\n        return CarouselPanel;\n      }(_moduleJs2.default);\n\n      exports.default = CarouselPanel;\n\n      module.exports = exports['default'];\n\n    }, { \"module-js\": 37, \"promise\": 38 }], 60: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true });\n\n\n      var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      var _promise = require('promise');\n\n      var _promise2 = _interopRequireDefault(_promise);\n\n      var _carouselPanel = require('./carousel-panel');\n\n      var _carouselPanel2 = _interopRequireDefault(_carouselPanel);\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      /**\n                                                                                                                                                             * A callback function that fires after a new active panel is set\n                                                                                                                                                             * @callback CarouselPanels~onChange\n                                                                                                                                                             * @param {Number} index - The index of the new panel\n                                                                                                                                                             */\n\n      /**\n                                                                                                                                                                 * Adds functionality for carousel panels. Not really meant to be used own its own, unless you want\n                                                                                                                                                                 * to customize the the javascript logic for the \"panels\" of the Carousel (assuming that you actually\n                                                                                                                                                                 * know what you're doing when you do so).\n                                                                                                                                                                 * @constructor CarouselPanels\n                                                                                                                                                                 */\n      var CarouselPanels = function () {\n\n        /**\n                                         * When the carousel is instantiated.\n                                         * @param {object} options - Options passed into instance\n                                         * @param {HTMLCollection|NodeList} options.panels - The panels in which to use for the carousel (an array of photos)\n                                         * @param {string} [options.assetLoadedClass] - The CSS class that gets added to a panel el when it is loaded\n                                         * @param {string} [options.panelActiveClass] - The CSS class that gets added to an panel when it becomes active\n                                         * @param {string} [options.panelBackClass] - The CSS class that gets added to all panel elements that appear before the current panel\n                                         * @param {string} [options.panelForwardClass] - The CSS class that gets added to all panel elements that appear ahead of the current panel\n                                         * @param {CarouselPanels~onChange} [options.onChange] - When the current panel is changed\n                                         * @param {string} [options.lazyLoadAttr] - The lazy loading attribute\n                                         */\n        function CarouselPanels(options) {\n          _classCallCheck(this, CarouselPanels);\n\n          options = _extends({\n            panels: [],\n            assetLoadedClass: 'carousel-asset-loaded',\n            panelActiveClass: 'carousel-panel-active',\n            panelLoadedClass: 'carousel-panel-loaded',\n            onChange: null,\n            lazyLoadAttr: 'data-src',\n            panelBackClass: 'carousel-panel-behind',\n            panelForwardClass: 'carousel-panel-ahead' },\n          options);\n\n          if (!options.panels.length) {\n            console.error('carousel error: no panels were passed in constructor');\n          } else {\n            this._panelModules = this._setupPanelModules(options);\n          }\n\n          // add forward classes initially\n          this._panelModules.forEach(function (panel) {\n            panel.el.classList.add(options.panelForwardClass);\n          });\n\n          this.options = options;\n        }\n\n        /**\n           * Sets up the panel module instances.\n           * @param {Object} options - The initialization options\n           * @returns {Array} Returns an array of the panel instances\n           * @private\n           */\n\n\n        _createClass(CarouselPanels, [{\n          key: '_setupPanelModules',\n          value: function _setupPanelModules(options) {\n            var modules = [];\n            // panels can be either an array or an HTMLCollection so we\n            // are doing an old-school for loop to satisify both scenarios\n            for (var i = 0; i < options.panels.length; i++) {\n              modules[i] = new _carouselPanel2.default(options.panels[i], {\n                activeClass: options.panelActiveClass,\n                lazyLoadAttr: options.lazyLoadAttr,\n                assetLoadedClass: options.assetLoadedClass,\n                loadedClass: options.panelLoadedClass });\n\n            }\n            return modules;\n          }\n\n          /**\n             * Transitions to a panel of an index.\n             * @param {Number} index - The index number to go to\n             * @returns {Promise}\n             */ },\n\n        {\n          key: 'goTo',\n          value: function goTo(index) {\n            var maxIndex = this.options.panels.length - 1,\n            minIndex = 0,\n            prevIndex = this.getCurrentIndex(),\n            errorMsg,\n            promise;\n\n            if (typeof index !== 'number' || index > maxIndex || index < minIndex) {\n              errorMsg = 'carousel panel error: unable to transition to an index of ' + index + 'which does not exist!';\n              console.error(errorMsg);\n              promise = _promise2.default.reject(new Error(errorMsg));\n            } else if (prevIndex === index) {\n              // already at index\n              promise = _promise2.default.resolve();\n            } else {\n              promise = this.load(index);\n              this._updatePanels(index);\n              this._currentIndex = index;\n              if (this.options.onChange) {\n                this.options.onChange(index);\n              }\n            }\n            return promise;\n          }\n\n          /**\n             * Makes all panels inactive except for the one at the index provided.\n             * @param {Number} toIndex - The new index\n             * @private\n             */ },\n\n        {\n          key: '_updatePanels',\n          value: function _updatePanels(toIndex) {\n            var fromIndex = this.getCurrentIndex();\n            var fromPanel = this._panelModules[fromIndex];\n            var toPanel = this._panelModules[toIndex];\n            var rangePanels = [];\n            var toAdd = '';\n            var toRemove = '';\n\n            if (fromIndex > toIndex) {\n              // include fromIndex but not toIndex\n              rangePanels = this._panelModules.slice(toIndex + 1, fromIndex + 1);\n              toAdd = this.options.panelForwardClass;\n              toRemove = this.options.panelBackClass;\n            } else if (fromIndex < toIndex) {\n              rangePanels = this._panelModules.slice(fromIndex, toIndex);\n              toAdd = this.options.panelBackClass;\n              toRemove = this.options.panelForwardClass;\n            }\n\n            rangePanels.forEach(function (p) {\n              p.el.classList.add(toAdd);\n              p.el.classList.remove(toRemove);\n            });\n\n            if (fromPanel) {\n              fromPanel.hide();\n            }\n            toPanel.el.classList.remove(this.options.panelForwardClass, this.options.panelBackClass);\n            toPanel.show();\n          }\n\n          /**\n             * Gets the current index that is showing.\n             * @returns {Number} Returns the index\n             */ },\n\n        {\n          key: 'getCurrentIndex',\n          value: function getCurrentIndex() {\n            return this._currentIndex;\n          }\n\n          /**\n             * Loads assets for a given panel.\n             * @param {Number} idx - The index of the panel containing the assets to load\n             * @returns {Promise}\n             */ },\n\n        {\n          key: 'load',\n          value: function load(idx) {\n            var panelModule = this._panelModules[idx];\n            if (panelModule.loaded) {\n              return _promise2.default.resolve();\n            }\n            return panelModule.load();\n          }\n\n          /**\n             * Loads assets for a given panel.\n             * @deprecated since 2.1.6\n             * @param {Number} index - The index of the panel containing the assets to load\n             * @returns {Promise}\n             */ },\n\n        {\n          key: 'loadPanelAssets',\n          value: function loadPanelAssets(index) {\n            return this.load(index);\n          }\n\n          /**\n             * Final cleanup of instance.\n             */ },\n\n        {\n          key: 'destroy',\n          value: function destroy() {\n            var options = this.options,\n            currentIndex = this.getCurrentIndex();\n\n            if (currentIndex) {\n              options.panels[currentIndex].classList.remove(options.panelActiveClass);\n            }\n            this._currentIndex = undefined;\n\n            this._panelModules.forEach(function (module) {\n              module.el.classList.remove(options.panelForwardClass, options.panelBackClass);\n              module.destroy();\n            });\n          } }]);\n\n\n        return CarouselPanels;\n      }();\n\n      exports.default = CarouselPanels;\n\n      module.exports = exports['default'];\n\n    }, { \"./carousel-panel\": 59, \"promise\": 38 }], 61: [function (require, module, exports) {\n      'use strict';\n\n      /**\n                     * A callback function that fires after a new active panel is set\n                     * @callback CarouselThumbs~onChange\n                     * @param {Number} index - The index of the new panel\n                     */\n\n      /**\n                         * Adds thumbnails for carousel. Not really meant to be used own its own, unless you\n                         * want to customize the javascript logic for the \"thumbnails\" of your Carousel instance (assuming that you actually\n                         * know what you're doing when you do so).\n                         * @class CarouselThumbs\n                         */\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true });\n\n\n      var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      var CarouselThumbs = function () {\n\n        /**\n                                         * When carousel is instantiated.\n                                         * @param {object} options - Options passed into instance\n                                         * @param {HTMLCollection} [options.thumbnails] - A collection of elements that are the thumbnails\n                                         * @param {string} [options.thumbnailActiveClass] - The CSS class that gets added to a thumbnail element when it becomes active\n                                         * @param {CarouselThumbs~onChange} [options.onChange] - When a new thumbnail becomes active\n                                         * @memberOf CarouselThumbs\n                                         */\n        function CarouselThumbs(options) {\n          _classCallCheck(this, CarouselThumbs);\n\n          options = _extends({\n            thumbnails: [],\n            thumbnailActiveTriggerEvent: 'click',\n            thumbnailActiveClass: 'carousel-thumbnail-active',\n            onChange: null },\n          options);\n\n          this.options = options;\n          this._thumbnailEventListener = this.onThumbnailEvent.bind(this);\n          this.setup();\n        }\n\n        /**\n           * Sets up the carousel instance by adding event listeners to the thumbnails.\n           * @memberOf CarouselThumbs\n           */\n\n\n        _createClass(CarouselThumbs, [{\n          key: 'setup',\n          value: function setup() {\n            var thumbs = this.options.thumbnails;\n            if (thumbs.length) {\n              this.triggerThumbsEventListener('addEventListener');\n            } else {\n              console.error('carousel thumb error: no thumbnails were passed to constructor');\n            }\n          }\n\n          /**\n             * When a thumbnail is clicked.\n             * @param {MouseEvent} e - The click event\n             * @memberOf CarouselThumbs\n             */ },\n\n        {\n          key: 'onThumbnailEvent',\n          value: function onThumbnailEvent(e) {\n            if (!this._thumbnailArr) {\n              // convert thumbnail HTMLCollection to real array so we can perform necessary array methods\n              this._thumbnailArr = Array.prototype.slice.call(this.options.thumbnails);\n            }\n            var index = this._thumbnailArr.indexOf(e.currentTarget);\n            // we are checking that the selected thumbnail is still in the HTMLCollection\n            // because it is live introducing the possibility that the element is no longer in the DOM\n            if (index !== -1 && index !== this.getCurrentIndex()) {\n              this.goTo(index);\n              if (this.options.onChange) {\n                this.options.onChange(index);\n              }\n            }\n          }\n\n          /**\n             * Checks for errors upon initialize.\n             * @memberOf CarouselThumbs\n             * @private\n             */ },\n\n        {\n          key: '_checkForInitErrors',\n          value: function _checkForInitErrors() {\n            var options = this.options,\n            thumbnailCount = options.thumbnails.length;\n            if (!thumbnailCount) {\n              console.error('carousel error: no thumbnails were passed in constructor');\n            }\n          }\n\n          /**\n             * Makes all thumbnails inactive except for the one at the index provided.\n             * @param {Number} index - The new index\n             * @memberOf CarouselThumbs\n             */ },\n\n        {\n          key: 'goTo',\n          value: function goTo(index) {\n            var thumbs = this.options.thumbnails,\n            prevIndex = this.getCurrentIndex() || 0,\n            activeClass = this.options.thumbnailActiveClass,\n            maxIndex = thumbs.length - 1,\n            minIndex = 0;\n\n            if (index > maxIndex || index < minIndex) {\n              console.error('carousel thumbnail error: unable to transition to a thumbnail with an index of ' + index + ', it does not exist!');\n            }\n\n            thumbs[index].classList.add(activeClass);\n\n            if (prevIndex !== index) {\n              thumbs[prevIndex].classList.remove(activeClass);\n            }\n            this._currentIndex = index;\n          }\n\n          /**\n             * Gets the current thumbnail index that is showing.\n             * @returns {Number} Returns the index\n             * @memberOf CarouselThumbs\n             */ },\n\n        {\n          key: 'getCurrentIndex',\n          value: function getCurrentIndex() {\n            return this._currentIndex;\n          }\n\n          /**\n             * Triggers an event listener method on all thumbnail elements.\n             * @param {string} method - The event listener method to call on each of the elements\n             */ },\n\n        {\n          key: 'triggerThumbsEventListener',\n          value: function triggerThumbsEventListener(method) {\n            var count = this.options.thumbnails.length,\n            i,\n            el;\n            for (i = 0; i < count; i++) {\n              el = this.options.thumbnails[i];\n              el[method](this.options.thumbnailActiveTriggerEvent, this._thumbnailEventListener);\n            }\n          }\n\n          /**\n             * Destroys the instance.\n             * @memberOf CarouselThumbs\n             */ },\n\n        {\n          key: 'destroy',\n          value: function destroy() {\n            var thumbs = this.options.thumbnails;\n            this._currentIndex = null;\n            if (thumbs.length) {\n              this.triggerThumbsEventListener('removeEventListener');\n            }\n          } }]);\n\n\n        return CarouselThumbs;\n      }();\n\n      exports.default = CarouselThumbs;\n\n      module.exports = exports['default'];\n\n    }, {}], 62: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true });\n\n\n      var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};\n\n      var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();\n\n      var _carouselThumbs = require('./carousel-thumbs');\n\n      var _carouselThumbs2 = _interopRequireDefault(_carouselThumbs);\n\n      var _carouselPanels = require('./carousel-panels');\n\n      var _carouselPanels2 = _interopRequireDefault(_carouselPanels);\n\n      var _carouselArrows = require('./carousel-arrows');\n\n      var _carouselArrows2 = _interopRequireDefault(_carouselArrows);\n\n      function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      /**\n                                                                                                                                                             * A callback function that fires after a new active panel is set\n                                                                                                                                                             * @callback Carousel~onPanelChange\n                                                                                                                                                             * @param {Number} index - The index of the new panel\n                                                                                                                                                             */\n\n      /**\n                                                                                                                                                                 * Adds carousel functionality to a set up pre-determined HTML markup.\n                                                                                                                                                                 * @class Carousel\n                                                                                                                                                                 * @param {object} options - Options passed into instance\n                                                                                                                                                                 * @param {HTMLCollection} options.panels - The panels in which to use for the carousel (an array of photos)\n                                                                                                                                                                 * @param {string} [options.assetLoadingClass] - The CSS class that gets added to an asset when it is loading\n                                                                                                                                                                 * @param {boolean} [options.autoLoadAssets] - Whether or not to automatically load assets when active\n                                                                                                                                                                 * @param {string} [options.panelActiveClass] - The CSS class that gets added to an panel when it becomes active\n                                                                                                                                                                 * @param {string} [options.panelLoadedClass] - The CSS class that gets added to an panel when it is fully loaded\n                                                                                                                                                                 * @param {string} [options.panelBackClass] - The CSS class that gets added to all panel elements that appear before the current panel\n                                                                                                                                                                 * @param {string} [options.panelForwardClass] - The CSS class that gets added to all panel elements that appear ahead of the current panel\n                                                                                                                                                                 * @param {Carousel~onPanelChange} [options.onPanelChange] - When the current panel is changed\n                                                                                                                                                                 * @param {string} [options.lazyLoadAttr] - The attribute containing the url path to content that is to be lazy loaded\n                                                                                                                                                                 * @param {HTMLCollection} [options.thumbnails] - A collection of elements that are the thumbnails\n                                                                                                                                                                 * @param {string} [options.thumbnailActiveClass] - The CSS class that gets added to a thumbnail element when it becomes active\n                                                                                                                                                                 * @param {Number} [options.initialIndex] - The index of the panel to go to upon instantiation (if not declared, goTo() must be called manually).\n                                                                                                                                                                 */\n\n      var Carousel = function () {\n\n        /**\n                                   * Sets up stuff.\n                                   * @param options\n                                   */\n        function Carousel(options) {\n          _classCallCheck(this, Carousel);\n\n          options = options || {};\n\n          // if undefined or null is passed in options for panels or thumbnails,\n          // we need to sanitize it to an empty array to prevent a crash\n          if (!options.panels) {\n            options.panels = [];\n          }\n          if (!options.thumbnails) {\n            options.thumbnails = [];\n          }\n\n          options = _extends({\n            panels: [],\n            assetLoadingClass: 'carousel-asset-loading',\n            autoLoadAssets: true,\n            panelActiveClass: 'carousel-panel-active',\n            panelLoadedClass: 'carousel-panel-loaded',\n            panelBackClass: 'carousel-panel-behind',\n            panelForwardClass: 'carousel-panel-ahead',\n            onPanelChange: null,\n            lazyLoadAttr: 'data-src',\n            thumbnails: [],\n            thumbnailActiveTriggerEvent: 'click',\n            thumbnailActiveClass: 'carousel-thumbnail-active',\n            initialIndex: 0,\n            leftArrow: null,\n            rightArrow: null,\n            arrowActiveClass: 'carousel-arrow-active',\n            arrowDisabledClass: 'carousel-arrow-disabled',\n            onLeftArrowClick: null,\n            onRightArrowClick: null },\n          options);\n\n          this.options = options;\n          this.subModules = {};\n          this._checkForInitErrors();\n          this.setup();\n        }\n\n        /**\n           * Sets up the carousel instance and all controls.\n           */\n\n\n        _createClass(Carousel, [{\n          key: 'setup',\n          value: function setup() {\n\n            if (!this.subModules.panels) {\n              this.subModules.panels = this._setupPanels(this.options);\n            }\n\n            if (this.options.thumbnails.length && !this.subModules.thumbnails) {\n              this.subModules.thumbnails = this._setupThumbs(this.options);\n            }\n\n            if ((this.options.leftArrow || this.options.rightArrow) && !this.subModules.arrows) {\n              this.subModules.arrows = this._setupArrows(this.options);\n            }\n\n            if (typeof this.options.initialIndex === 'number') {\n              this.goTo(this.options.initialIndex);\n            }\n          }\n\n          /**\n             * Sets up the carousel thumbs.\n             * @param {Object} options - The initialize options\n             * @return {CarouselThumbs} Returns thumbnail instance\n             * @private\n             */ },\n\n        {\n          key: '_setupThumbs',\n          value: function _setupThumbs(options) {\n            return new _carouselThumbs2.default(_extends({}, options, {\n              onChange: this.onThumbnailChange.bind(this) }));\n\n          }\n\n          /**\n             * Sets up the carousel panels.\n             * @param {Object} options - The initialize options\n             * @return {CarouselPanels} Returns panels instance\n             * @private\n             */ },\n\n        {\n          key: '_setupPanels',\n          value: function _setupPanels(options) {\n            if (options.panels.length) {\n              return new _carouselPanels2.default(_extends({}, options, {\n                onChange: this.onPanelChange.bind(this) }));\n\n            }\n          }\n\n          /**\n             * Sets up the carousel arrows.\n             * @param {Object} options - The initialize options\n             * @return {CarouselArrows} Returns arrows instance\n             * @private\n             */ },\n\n        {\n          key: '_setupArrows',\n          value: function _setupArrows(options) {\n            var internalOptions;\n            // make clone of original options\n            internalOptions = _extends({}, options);\n\n            internalOptions.onLeftArrowClick = this.onLeftArrowClick.bind(this);\n            internalOptions.onRightArrowClick = this.onRightArrowClick.bind(this);\n            return new _carouselArrows2.default(internalOptions);\n          }\n\n          /**\n             * Checks for errors upon initialize.\n             * @private\n             */ },\n\n        {\n          key: '_checkForInitErrors',\n          value: function _checkForInitErrors() {\n            var options = this.options,\n            panelCount = options.panels.length,\n            thumbnailCount = options.thumbnails.length;\n            if (thumbnailCount && thumbnailCount !== panelCount) {\n              console.warn('carousel warning: number of thumbnails passed in constructor do not equal the number of panels' + '\\n' + 'panels: ' + panelCount + '\\n' + 'thumbnails: ' + thumbnailCount + '\\n');\n            }\n          }\n\n          /**\n             * When a panel index changes.\n             * @param {Number} index - The new index\n             */ },\n\n        {\n          key: 'onPanelChange',\n          value: function onPanelChange(index) {\n            if (this.subModules.thumbnails) {\n              this.subModules.thumbnails.goTo(index);\n            }\n\n            if (this.subModules.arrows) {\n              this.subModules.arrows.update(index);\n            }\n\n            if (this.options.onPanelChange) {\n              this.options.onPanelChange(index);\n            }\n          }\n\n          /**\n             * When the thumbnail index changes.\n             * @param {Number} index - The new index\n             */ },\n\n        {\n          key: 'onThumbnailChange',\n          value: function onThumbnailChange(index) {\n            this.goTo(index);\n          }\n\n          /**\n             * When the right arrow of the carousel is clicked.\n             * @param e\n             */ },\n\n        {\n          key: 'onRightArrowClick',\n          value: function onRightArrowClick(e) {\n            this.goTo(this.subModules.panels.getCurrentIndex() + 1);\n            if (this.options.onRightArrowClick) {\n              this.options.onRightArrowClick(e);\n            }\n          }\n\n          /**\n             * When the left arrow of the carousel is clicked.\n             * @param e\n             */ },\n\n        {\n          key: 'onLeftArrowClick',\n          value: function onLeftArrowClick(e) {\n            this.goTo(this.subModules.panels.getCurrentIndex() - 1);\n            if (this.options.onLeftArrowClick) {\n              this.options.onLeftArrowClick(e);\n            }\n          }\n\n          /**\n             * Transition to a new panel and thumbnail.\n             * @param {Number} index - The index number to go to\n             */ },\n\n        {\n          key: 'goTo',\n          value: function goTo(index) {\n            var options = this.options,\n            maxIndex = options.panels.length - 1,\n            minIndex = 0;\n\n            if (index > maxIndex) {\n              // set to first index if too high\n              index = minIndex;\n            } else if (index < minIndex) {\n              // set to last index if too low\n              index = maxIndex;\n            }\n\n            if (this.subModules.thumbnails) {\n              this.subModules.thumbnails.goTo(index);\n            }\n            if (this.subModules.arrows) {\n              this.subModules.arrows.update(index);\n            }\n\n            if (this.subModules.panels) {\n              return this.subModules.panels.goTo(index);\n            }\n          }\n\n          /**\n             * Gets the current index that is showing.\n             * @returns {Number} Returns the index\n             */ },\n\n        {\n          key: 'getCurrentIndex',\n          value: function getCurrentIndex() {\n            return this.subModules.panels.getCurrentIndex();\n          }\n\n          /**\n             * Moves carousel to next panel.\n             */ },\n\n        {\n          key: 'next',\n          value: function next() {\n            this.goTo(this.getCurrentIndex() + 1);\n          }\n\n          /**\n             * Moves to previous carousel panel.\n             */ },\n\n        {\n          key: 'prev',\n          value: function prev() {\n            this.goTo(this.getCurrentIndex() - 1);\n          }\n\n          /**\n             * Destroys all sub modules.\n             */ },\n\n        {\n          key: 'destroy',\n          value: function destroy() {\n            for (var key in this.subModules) {\n              if (this.subModules.hasOwnProperty(key) && this.subModules[key]) {\n                this.subModules[key].destroy();\n              }\n            }\n          } }]);\n\n\n        return Carousel;\n      }();\n\n      exports.default = Carousel;\n\n      module.exports = exports['default'];\n\n    }, { \"./carousel-arrows\": 58, \"./carousel-panels\": 60, \"./carousel-thumbs\": 61 }], 63: [function (require, module, exports) {\n\n    }, {}], 64: [function (require, module, exports) {\n      (function (process) {\n        // Copyright Joyent, Inc. and other Node contributors.\n        //\n        // Permission is hereby granted, free of charge, to any person obtaining a\n        // copy of this software and associated documentation files (the\n        // \"Software\"), to deal in the Software without restriction, including\n        // without limitation the rights to use, copy, modify, merge, publish,\n        // distribute, sublicense, and/or sell copies of the Software, and to permit\n        // persons to whom the Software is furnished to do so, subject to the\n        // following conditions:\n        //\n        // The above copyright notice and this permission notice shall be included\n        // in all copies or substantial portions of the Software.\n        //\n        // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n        // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n        // resolves . and .. elements in a path array with directory names there\n        // must be no slashes, empty elements, or device names (c:\\) in the array\n        // (so also no leading and trailing slashes - it does not distinguish\n        // relative and absolute paths)\n        function normalizeArray(parts, allowAboveRoot) {\n          // if the path tries to go above the root, `up` ends up > 0\n          var up = 0;\n          for (var i = parts.length - 1; i >= 0; i--) {\n            var last = parts[i];\n            if (last === '.') {\n              parts.splice(i, 1);\n            } else if (last === '..') {\n              parts.splice(i, 1);\n              up++;\n            } else if (up) {\n              parts.splice(i, 1);\n              up--;\n            }\n          }\n\n          // if the path is allowed to go above the root, restore leading ..s\n          if (allowAboveRoot) {\n            for (; up--; up) {\n              parts.unshift('..');\n            }\n          }\n\n          return parts;\n        }\n\n        // Split a filename into [root, dir, basename, ext], unix version\n        // 'root' is just a slash, or nothing.\n        var splitPathRe =\n        /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        var splitPath = function splitPath(filename) {\n          return splitPathRe.exec(filename).slice(1);\n        };\n\n        // path.resolve([from ...], to)\n        // posix version\n        exports.resolve = function () {\n          var resolvedPath = '',\n          resolvedAbsolute = false;\n\n          for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n            var path = i >= 0 ? arguments[i] : process.cwd();\n\n            // Skip empty and invalid entries\n            if (typeof path !== 'string') {\n              throw new TypeError('Arguments to path.resolve must be strings');\n            } else if (!path) {\n              continue;\n            }\n\n            resolvedPath = path + '/' + resolvedPath;\n            resolvedAbsolute = path.charAt(0) === '/';\n          }\n\n          // At this point the path should be resolved to a full absolute path, but\n          // handle relative paths to be safe (might happen when process.cwd() fails)\n\n          // Normalize the path\n          resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {\n            return !!p;\n          }), !resolvedAbsolute).join('/');\n\n          return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n        };\n\n        // path.normalize(path)\n        // posix version\n        exports.normalize = function (path) {\n          var isAbsolute = exports.isAbsolute(path),\n          trailingSlash = substr(path, -1) === '/';\n\n          // Normalize the path\n          path = normalizeArray(filter(path.split('/'), function (p) {\n            return !!p;\n          }), !isAbsolute).join('/');\n\n          if (!path && !isAbsolute) {\n            path = '.';\n          }\n          if (path && trailingSlash) {\n            path += '/';\n          }\n\n          return (isAbsolute ? '/' : '') + path;\n        };\n\n        // posix version\n        exports.isAbsolute = function (path) {\n          return path.charAt(0) === '/';\n        };\n\n        // posix version\n        exports.join = function () {\n          var paths = Array.prototype.slice.call(arguments, 0);\n          return exports.normalize(filter(paths, function (p, index) {\n            if (typeof p !== 'string') {\n              throw new TypeError('Arguments to path.join must be strings');\n            }\n            return p;\n          }).join('/'));\n        };\n\n\n        // path.relative(from, to)\n        // posix version\n        exports.relative = function (from, to) {\n          from = exports.resolve(from).substr(1);\n          to = exports.resolve(to).substr(1);\n\n          function trim(arr) {\n            var start = 0;\n            for (; start < arr.length; start++) {\n              if (arr[start] !== '') break;\n            }\n\n            var end = arr.length - 1;\n            for (; end >= 0; end--) {\n              if (arr[end] !== '') break;\n            }\n\n            if (start > end) return [];\n            return arr.slice(start, end - start + 1);\n          }\n\n          var fromParts = trim(from.split('/'));\n          var toParts = trim(to.split('/'));\n\n          var length = Math.min(fromParts.length, toParts.length);\n          var samePartsLength = length;\n          for (var i = 0; i < length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n              samePartsLength = i;\n              break;\n            }\n          }\n\n          var outputParts = [];\n          for (var i = samePartsLength; i < fromParts.length; i++) {\n            outputParts.push('..');\n          }\n\n          outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n          return outputParts.join('/');\n        };\n\n        exports.sep = '/';\n        exports.delimiter = ':';\n\n        exports.dirname = function (path) {\n          var result = splitPath(path),\n          root = result[0],\n          dir = result[1];\n\n          if (!root && !dir) {\n            // No dirname whatsoever\n            return '.';\n          }\n\n          if (dir) {\n            // It has a dirname, strip trailing slash\n            dir = dir.substr(0, dir.length - 1);\n          }\n\n          return root + dir;\n        };\n\n\n        exports.basename = function (path, ext) {\n          var f = splitPath(path)[2];\n          // TODO: make this comparison case-insensitive on windows?\n          if (ext && f.substr(-1 * ext.length) === ext) {\n            f = f.substr(0, f.length - ext.length);\n          }\n          return f;\n        };\n\n\n        exports.extname = function (path) {\n          return splitPath(path)[3];\n        };\n\n        function filter(xs, f) {\n          if (xs.filter) return xs.filter(f);\n          var res = [];\n          for (var i = 0; i < xs.length; i++) {\n            if (f(xs[i], i, xs)) res.push(xs[i]);\n          }\n          return res;\n        }\n\n        // String.prototype.substr - negative index don't work in IE8\n        var substr = 'ab'.substr(-1) === 'b' ?\n        function (str, start, len) {return str.substr(start, len);} :\n        function (str, start, len) {\n          if (start < 0) start = str.length + start;\n          return str.substr(start, len);\n        };\n\n\n      }).call(this, require('_process'));\n    }, { \"_process\": 65 }], 65: [function (require, module, exports) {\n      // shim for using process in browser\n      var process = module.exports = {};\n\n      // cached from whatever global is present so that test runners that stub it\n      // don't break things.  But we need to wrap it in a try catch in case it is\n      // wrapped in strict mode code which doesn't define any globals.  It's inside a\n      // function because try/catches deoptimize in certain engines.\n\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n\n      function defaultSetTimout() {\n        throw new Error('setTimeout has not been defined');\n      }\n      function defaultClearTimeout() {\n        throw new Error('clearTimeout has not been defined');\n      }\n      (function () {\n        try {\n          if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          //normal enviroments in sane situations\n          return setTimeout(fun, 0);\n        }\n        // if setTimeout wasn't available but was latter defined\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n\n\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          //normal enviroments in sane situations\n          return clearTimeout(marker);\n        }\n        // if clearTimeout wasn't available but was latter defined\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n\n\n\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n\n      process.nextTick = function (fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n\n      // v8 likes predictible objects\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      };\n      process.title = 'browser';\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = ''; // empty string to avoid regexp issues\n      process.versions = {};\n\n      function noop() {}\n\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n\n      process.binding = function (name) {\n        throw new Error('process.binding is not supported');\n      };\n\n      process.cwd = function () {return '/';};\n      process.chdir = function (dir) {\n        throw new Error('process.chdir is not supported');\n      };\n      process.umask = function () {return 0;};\n\n    }, {}] }, {}, [62])(62);\n});\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n/* global\n    hide\n    toggle\n */\n'use strict';\n\n(function () {\n  /**\n               * Render the FAQ questions from a file located at /faq.js.\n               */\n  window.renderFAQ = function () {\n    /**\n                                   * Destination of all FAQ items\n                                   * @type {Element}\n                                   */\n    var _destination = document.getElementsByClassName('faq-placeholder')[0];\n\n    /**\n                                                                               * Template for each wrapper section, including an image.\n                                                                               * @type {Element}\n                                                                               */\n    var _section = document.getElementsByClassName('template faq-section')[0];\n    bootstrapTemplate(_section);\n\n    /**\n                                  * Template for each wrapper subsection, including an image.\n                                  * @type {Element}\n                                  */\n    var _subsection =\n    document.getElementsByClassName('template faq-subsection')[0];\n    bootstrapTemplate(_subsection);\n\n    /**\n                                     * Template for each question.\n                                     * @type {[type]}\n                                     */\n    var _question = document.\n    getElementsByClassName('template faq-question')[0];\n    bootstrapTemplate(_question);\n\n    for (var sectionTitle in window.faq) {\n      // Since we're working with a global obj, let's make sure we're not\n      // screwed by accidental prototyping.\n      if (!window.faq.hasOwnProperty(sectionTitle)) {\n        continue;\n      }\n\n      /** @type {object} Shortcut  */\n      var section = window.faq[sectionTitle];\n\n      /** @type {Element} The new section where we're putting the FAQ elements */\n      var _thisSection = _section.cloneNode(true);\n\n      // Fill in template data\n      _thisSection.querySelectorAll('h1')[0].innerHTML = sectionTitle;\n      _thisSection.querySelectorAll('img')[0].src = section.image;\n\n      var _thisDestination = _thisSection.querySelectorAll('.faq-content')[0];\n\n      for (var subsectionTitle in section.questions) {\n        if (!section.questions.hasOwnProperty(subsectionTitle)) {\n          continue;\n        }\n\n        /** @type {object,string} The set of either subsections or questions */\n        var subsection = section.questions[subsectionTitle];\n\n        if (typeof subsection === 'string') {\n          // we have a question\n          addQuestion(subsectionTitle, subsection, _thisDestination);\n        } else {\n          // we have a subsection\n          var _thisSubsection = _subsection.cloneNode(true);\n\n          _thisSubsection.querySelectorAll('h2')[0].innerHTML = subsectionTitle;\n\n          for (var question in subsection) {\n            if (!subsection.hasOwnProperty(question)) {\n              continue;\n            }\n\n            addQuestion(question, subsection[question], _thisSubsection);\n          }\n\n          _thisDestination.appendChild(_thisSubsection);\n        }\n      }\n      // Finally, append to the DOM.\n      _destination.appendChild(_thisSection);\n    }\n\n    /**\n       * Bootstrap a template by removing it from the dom and removing the template class.\n       *\n       * @param {Element} domNode The domNode to bootstrap into a template\n       */\n    function bootstrapTemplate(domNode) {\n      // Remove from DOM\n      domNode.parentNode.removeChild(domNode);\n\n      // Remove the template class\n      domNode.className = domNode.className.replace('template', '');\n    }\n\n    /**\n       * Add a question using the global question template to an Element, appendTo.\n       * @param {string} question question\n       * @param {string} answer answer\n       * @param {Element} appendTo Element to append the question to\n       */\n    function addQuestion(question, answer, appendTo) {\n      var _thisQuestion = _question.cloneNode(true);\n\n      _thisQuestion.querySelectorAll('h3')[0].innerHTML = question;\n      _thisQuestion.querySelectorAll('p')[0].innerHTML = answer;\n\n      appendTo.appendChild(_thisQuestion);\n    }\n  };\n\n  /**\n      * Bind click events and hide elements from the FAQ\n      */\n  window.bindFAQ = function () {\n    var select = '.faq-content';\n\n    var allElements = document.querySelectorAll(select);\n    hide(allElements);\n\n    allElements.forEach(function (e) {\n      e.style.cursor = 'auto';\n\n      // Prevent the click listener on the parent from affecting this (i.e. re-hiding this element)\n      e.addEventListener('click', function (event) {\n        event.stopPropagation();\n      });\n    });\n\n    var sections = document.querySelectorAll('.faq-section');\n    sections.forEach(function (e) {\n      e.style.cursor = 'pointer';\n\n      e.addEventListener('click', function () {\n        this.querySelectorAll(select).forEach(toggle);\n      });\n    });\n  };\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n/* global\n    Carousel\n */\n'use strict';\n\n(function () {\n  /**\n               * Render the carousel.\n               */\n  window.renderCarousel = function () {\n    new Carousel({\n      panels: document.getElementsByClassName('carousel-panel'),\n      leftArrow: document.getElementsByClassName('carousel-left')[0],\n      rightArrow: document.getElementsByClassName('carousel-right')[0] });\n\n\n    // setInterval(() => {\n    //   carousel.next();\n    // }, 5000);\n  };\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltYWdlLWNhcm91c2VsLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsInJlbmRlckNhcm91c2VsIiwiQ2Fyb3VzZWwiLCJwYW5lbHMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJsZWZ0QXJyb3ciLCJyaWdodEFycm93Il0sIm1hcHBpbmdzIjoiQUFBQTs7O0FBR0E7O0FBRUEsQ0FBQyxZQUFXO0FBQ1Y7OztBQUdBQSxTQUFPQyxjQUFQLEdBQXdCLFlBQU07QUFDNUIsUUFBSUMsUUFBSixDQUFhO0FBQ1hDLGNBQVFDLFNBQVNDLHNCQUFULENBQWdDLGdCQUFoQyxDQURHO0FBRVhDLGlCQUFXRixTQUFTQyxzQkFBVCxDQUFnQyxlQUFoQyxFQUFpRCxDQUFqRCxDQUZBO0FBR1hFLGtCQUFZSCxTQUFTQyxzQkFBVCxDQUFnQyxnQkFBaEMsRUFBa0QsQ0FBbEQsQ0FIRCxFQUFiOzs7QUFNQTtBQUNBO0FBQ0E7QUFDRCxHQVZEO0FBV0QsQ0FmRCIsImZpbGUiOiJpbWFnZS1jYXJvdXNlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbFxuICAgIENhcm91c2VsXG4gKi9cbid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogUmVuZGVyIHRoZSBjYXJvdXNlbC5cbiAgICovXG4gIHdpbmRvdy5yZW5kZXJDYXJvdXNlbCA9ICgpID0+IHtcbiAgICBuZXcgQ2Fyb3VzZWwoe1xuICAgICAgcGFuZWxzOiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYXJvdXNlbC1wYW5lbCcpLFxuICAgICAgbGVmdEFycm93OiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYXJvdXNlbC1sZWZ0JylbMF0sXG4gICAgICByaWdodEFycm93OiBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjYXJvdXNlbC1yaWdodCcpWzBdLFxuICAgIH0pO1xuXG4gICAgLy8gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgIC8vICAgY2Fyb3VzZWwubmV4dCgpO1xuICAgIC8vIH0sIDUwMDApO1xuICB9O1xufSkoKTtcbiJdfQ==\n\n'use strict';\n\n(function () {\n  var MESSAGE_URL = 'http://www.crisistextline.org/trends/data/messages.txt';\n  var messageDiv = document.getElementById('message-count');\n\n  var currentVal = parseInt(messageDiv.innerHTML.replace(/,/g, ''), 10);\n\n  window.getMessageCount = function () {\n    var xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('load', function () {\n      if (xhr.status === 200) {\n        incrementValue(xhr.responseText);\n      } else {\n        fail();\n      }\n    });\n\n    xhr.addEventListener('error', function () {\n      fail();\n    });\n\n    xhr.open('GET', MESSAGE_URL);\n    xhr.send();\n  };\n\n  /**\n      * Failure handler for a failed XHR request. Let's just populate with a sane,\n      * true-enough value.\n      */\n  function fail() {\n    incrementValue('27212575');\n  }\n\n  /**\n     * Increment the current value by the difference from current to desired / 2.\n     *\n     * @param  {integer} intVal Value we're shooting for\n     */\n  function incrementValue(intVal) {\n    intVal = parseInt(intVal, 10);\n\n    var difference = intVal - currentVal;\n\n    currentVal += Math.ceil(difference / 2);\n\n    updateDisplay();\n\n    if (currentVal !== intVal) {\n      setTimeout(function () {\n        incrementValue(intVal);\n      }, 125 - Math.log(difference) * 5);\n    }\n  }\n\n  /**\n     * Update the display to currentValue, formatted in 1,231,131,232 format\n     */\n  function updateDisplay() {\n    // format the string with commas every 3 places\n    messageDiv.innerHTML = currentVal.\n    toString().\n    replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc3NhZ2UtY291bnQuanMiXSwibmFtZXMiOlsiTUVTU0FHRV9VUkwiLCJtZXNzYWdlRGl2IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImN1cnJlbnRWYWwiLCJwYXJzZUludCIsImlubmVySFRNTCIsInJlcGxhY2UiLCJ3aW5kb3ciLCJnZXRNZXNzYWdlQ291bnQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdGF0dXMiLCJpbmNyZW1lbnRWYWx1ZSIsInJlc3BvbnNlVGV4dCIsImZhaWwiLCJvcGVuIiwic2VuZCIsImludFZhbCIsImRpZmZlcmVuY2UiLCJNYXRoIiwiY2VpbCIsInVwZGF0ZURpc3BsYXkiLCJzZXRUaW1lb3V0IiwibG9nIiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLENBQUMsWUFBVztBQUNWLE1BQU1BLGNBQWMsd0RBQXBCO0FBQ0EsTUFBTUMsYUFBYUMsU0FBU0MsY0FBVCxDQUF3QixlQUF4QixDQUFuQjs7QUFFQSxNQUFJQyxhQUFhQyxTQUFTSixXQUFXSyxTQUFYLENBQXFCQyxPQUFyQixDQUE2QixJQUE3QixFQUFtQyxFQUFuQyxDQUFULEVBQWlELEVBQWpELENBQWpCOztBQUVBQyxTQUFPQyxlQUFQLEdBQXlCLFlBQU07QUFDN0IsUUFBTUMsTUFBTSxJQUFJQyxjQUFKLEVBQVo7O0FBRUFELFFBQUlFLGdCQUFKLENBQXFCLE1BQXJCLEVBQTZCLFlBQU07QUFDakMsVUFBSUYsSUFBSUcsTUFBSixLQUFlLEdBQW5CLEVBQXdCO0FBQ3RCQyx1QkFBZUosSUFBSUssWUFBbkI7QUFDRCxPQUZELE1BRU87QUFDTEM7QUFDRDtBQUNGLEtBTkQ7O0FBUUFOLFFBQUlFLGdCQUFKLENBQXFCLE9BQXJCLEVBQThCLFlBQU07QUFDbENJO0FBQ0QsS0FGRDs7QUFJQU4sUUFBSU8sSUFBSixDQUFTLEtBQVQsRUFBZ0JqQixXQUFoQjtBQUNBVSxRQUFJUSxJQUFKO0FBQ0QsR0FqQkQ7O0FBbUJBOzs7O0FBSUEsV0FBU0YsSUFBVCxHQUFnQjtBQUNkRixtQkFBZSxVQUFmO0FBQ0Q7O0FBRUQ7Ozs7O0FBS0EsV0FBU0EsY0FBVCxDQUF3QkssTUFBeEIsRUFBZ0M7QUFDOUJBLGFBQVNkLFNBQVNjLE1BQVQsRUFBaUIsRUFBakIsQ0FBVDs7QUFFQSxRQUFNQyxhQUFhRCxTQUFTZixVQUE1Qjs7QUFFQUEsa0JBQWNpQixLQUFLQyxJQUFMLENBQVVGLGFBQWEsQ0FBdkIsQ0FBZDs7QUFFQUc7O0FBRUEsUUFBSW5CLGVBQWVlLE1BQW5CLEVBQTJCO0FBQ3pCSyxpQkFBVyxZQUFNO0FBQ2ZWLHVCQUFlSyxNQUFmO0FBQ0QsT0FGRCxFQUVHLE1BQU1FLEtBQUtJLEdBQUwsQ0FBU0wsVUFBVCxJQUF1QixDQUZoQztBQUdEO0FBQ0Y7O0FBRUQ7OztBQUdBLFdBQVNHLGFBQVQsR0FBeUI7QUFDdkI7QUFDQXRCLGVBQVdLLFNBQVgsR0FBdUJGO0FBQ3BCc0IsWUFEb0I7QUFFcEJuQixXQUZvQixDQUVaLHVCQUZZLEVBRWEsR0FGYixDQUF2QjtBQUdEO0FBQ0YsQ0EvREQiLCJmaWxlIjoibWVzc2FnZS1jb3VudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuKGZ1bmN0aW9uKCkge1xuICBjb25zdCBNRVNTQUdFX1VSTCA9ICdodHRwOi8vd3d3LmNyaXNpc3RleHRsaW5lLm9yZy90cmVuZHMvZGF0YS9tZXNzYWdlcy50eHQnO1xuICBjb25zdCBtZXNzYWdlRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lc3NhZ2UtY291bnQnKTtcblxuICBsZXQgY3VycmVudFZhbCA9IHBhcnNlSW50KG1lc3NhZ2VEaXYuaW5uZXJIVE1MLnJlcGxhY2UoLywvZywgJycpLCAxMCk7XG5cbiAgd2luZG93LmdldE1lc3NhZ2VDb3VudCA9ICgpID0+IHtcbiAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICBpbmNyZW1lbnRWYWx1ZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZhaWwoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICgpID0+IHtcbiAgICAgIGZhaWwoKTtcbiAgICB9KTtcblxuICAgIHhoci5vcGVuKCdHRVQnLCBNRVNTQUdFX1VSTCk7XG4gICAgeGhyLnNlbmQoKTtcbiAgfTtcblxuICAvKipcbiAgICogRmFpbHVyZSBoYW5kbGVyIGZvciBhIGZhaWxlZCBYSFIgcmVxdWVzdC4gTGV0J3MganVzdCBwb3B1bGF0ZSB3aXRoIGEgc2FuZSxcbiAgICogdHJ1ZS1lbm91Z2ggdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBmYWlsKCkge1xuICAgIGluY3JlbWVudFZhbHVlKCcyNzIxMjU3NScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlbWVudCB0aGUgY3VycmVudCB2YWx1ZSBieSB0aGUgZGlmZmVyZW5jZSBmcm9tIGN1cnJlbnQgdG8gZGVzaXJlZCAvIDIuXG4gICAqXG4gICAqIEBwYXJhbSAge2ludGVnZXJ9IGludFZhbCBWYWx1ZSB3ZSdyZSBzaG9vdGluZyBmb3JcbiAgICovXG4gIGZ1bmN0aW9uIGluY3JlbWVudFZhbHVlKGludFZhbCkge1xuICAgIGludFZhbCA9IHBhcnNlSW50KGludFZhbCwgMTApO1xuXG4gICAgY29uc3QgZGlmZmVyZW5jZSA9IGludFZhbCAtIGN1cnJlbnRWYWw7XG5cbiAgICBjdXJyZW50VmFsICs9IE1hdGguY2VpbChkaWZmZXJlbmNlIC8gMik7XG5cbiAgICB1cGRhdGVEaXNwbGF5KCk7XG5cbiAgICBpZiAoY3VycmVudFZhbCAhPT0gaW50VmFsKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaW5jcmVtZW50VmFsdWUoaW50VmFsKTtcbiAgICAgIH0sIDEyNSAtIE1hdGgubG9nKGRpZmZlcmVuY2UpICogNSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZGlzcGxheSB0byBjdXJyZW50VmFsdWUsIGZvcm1hdHRlZCBpbiAxLDIzMSwxMzEsMjMyIGZvcm1hdFxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlRGlzcGxheSgpIHtcbiAgICAvLyBmb3JtYXQgdGhlIHN0cmluZyB3aXRoIGNvbW1hcyBldmVyeSAzIHBsYWNlc1xuICAgIG1lc3NhZ2VEaXYuaW5uZXJIVE1MID0gY3VycmVudFZhbFxuICAgICAgLnRvU3RyaW5nKClcbiAgICAgIC5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnLCcpO1xuICB9XG59KSgpO1xuIl19\n\n'use strict';(function () {\n  var DASHBOARD_URL = 'http://public.tableausoftware.com/views/crisistrends2dec132016/WorkingDashMobile?:embed=y&:showVizHome=no&:host_url=https%3A%2F%2Fpublic.tableausoftware.com%2F&:tabs=no&:toolbar=top&:animate_transition=yes&:display_static_image=no&:display_spinner=yes&:display_overlay=yes&:display_count=yes&:loadOrderID=0';\n\n  var loaded = false;\n\n  window.addEventListener('scroll', loadDashboard);\n  window.addEventListener('resize-complete', reflowDashboard);\n\n  adjustHeight();\n\n  /**\n                   * Load the dashboard if it hasn't been loaded yet.\n                   *\n                   * @param {boolean} reload true if we want to force reloading the dashboard\n                   */\n  function loadDashboard(reload) {\n    if (!loaded || reload === true) {\n      document.getElementById('viz').src = DASHBOARD_URL;\n      loaded = true;\n    }\n  }\n\n  /**\n     * Reload the dashboard in response to screen size change.\n     */\n  function reflowDashboard() {\n    loadDashboard(true);\n    adjustHeight();\n  }\n\n  /**\n     * Adjust the height of the data viz.\n     */\n  function adjustHeight() {\n    var viz = document.getElementById('viz');\n\n    if (viz.offsetWidth <= 500) {\n      viz.height = 1950;\n    } else {\n      viz.height = 2600;\n    }\n  }\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpc3VhbGl6YXRpb25zLmpzIl0sIm5hbWVzIjpbIkRBU0hCT0FSRF9VUkwiLCJsb2FkZWQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwibG9hZERhc2hib2FyZCIsInJlZmxvd0Rhc2hib2FyZCIsImFkanVzdEhlaWdodCIsInJlbG9hZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzcmMiLCJ2aXoiLCJvZmZzZXRXaWR0aCIsImhlaWdodCJdLCJtYXBwaW5ncyI6ImFBQUEsQ0FBQyxZQUFXO0FBQ1YsTUFBTUEsZ0JBQWdCLG9UQUF0Qjs7QUFFQSxNQUFJQyxTQUFTLEtBQWI7O0FBRUFDLFNBQU9DLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDQyxhQUFsQztBQUNBRixTQUFPQyxnQkFBUCxDQUF3QixpQkFBeEIsRUFBMkNFLGVBQTNDOztBQUVBQzs7QUFFQTs7Ozs7QUFLQSxXQUFTRixhQUFULENBQXVCRyxNQUF2QixFQUErQjtBQUM3QixRQUFJLENBQUNOLE1BQUQsSUFBV00sV0FBVyxJQUExQixFQUFnQztBQUM5QkMsZUFBU0MsY0FBVCxDQUF3QixLQUF4QixFQUErQkMsR0FBL0IsR0FBcUNWLGFBQXJDO0FBQ0FDLGVBQVMsSUFBVDtBQUNEO0FBQ0Y7O0FBRUQ7OztBQUdBLFdBQVNJLGVBQVQsR0FBMkI7QUFDekJELGtCQUFjLElBQWQ7QUFDQUU7QUFDRDs7QUFFRDs7O0FBR0EsV0FBU0EsWUFBVCxHQUF3QjtBQUN0QixRQUFNSyxNQUFNSCxTQUFTQyxjQUFULENBQXdCLEtBQXhCLENBQVo7O0FBRUEsUUFBSUUsSUFBSUMsV0FBSixJQUFtQixHQUF2QixFQUE0QjtBQUMxQkQsVUFBSUUsTUFBSixHQUFhLElBQWI7QUFDRCxLQUZELE1BRU87QUFDTEYsVUFBSUUsTUFBSixHQUFhLElBQWI7QUFDRDtBQUNGO0FBQ0YsQ0ExQ0QiLCJmaWxlIjoidmlzdWFsaXphdGlvbnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IERBU0hCT0FSRF9VUkwgPSAnaHR0cDovL3B1YmxpYy50YWJsZWF1c29mdHdhcmUuY29tL3ZpZXdzL2NyaXNpc3RyZW5kczJkZWMxMzIwMTYvV29ya2luZ0Rhc2hNb2JpbGU/OmVtYmVkPXkmOnNob3dWaXpIb21lPW5vJjpob3N0X3VybD1odHRwcyUzQSUyRiUyRnB1YmxpYy50YWJsZWF1c29mdHdhcmUuY29tJTJGJjp0YWJzPW5vJjp0b29sYmFyPXRvcCY6YW5pbWF0ZV90cmFuc2l0aW9uPXllcyY6ZGlzcGxheV9zdGF0aWNfaW1hZ2U9bm8mOmRpc3BsYXlfc3Bpbm5lcj15ZXMmOmRpc3BsYXlfb3ZlcmxheT15ZXMmOmRpc3BsYXlfY291bnQ9eWVzJjpsb2FkT3JkZXJJRD0wJztcblxuICBsZXQgbG9hZGVkID0gZmFsc2U7XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGxvYWREYXNoYm9hcmQpO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplLWNvbXBsZXRlJywgcmVmbG93RGFzaGJvYXJkKTtcblxuICBhZGp1c3RIZWlnaHQoKTtcblxuICAvKipcbiAgICogTG9hZCB0aGUgZGFzaGJvYXJkIGlmIGl0IGhhc24ndCBiZWVuIGxvYWRlZCB5ZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVsb2FkIHRydWUgaWYgd2Ugd2FudCB0byBmb3JjZSByZWxvYWRpbmcgdGhlIGRhc2hib2FyZFxuICAgKi9cbiAgZnVuY3Rpb24gbG9hZERhc2hib2FyZChyZWxvYWQpIHtcbiAgICBpZiAoIWxvYWRlZCB8fCByZWxvYWQgPT09IHRydWUpIHtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aXonKS5zcmMgPSBEQVNIQk9BUkRfVVJMO1xuICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVsb2FkIHRoZSBkYXNoYm9hcmQgaW4gcmVzcG9uc2UgdG8gc2NyZWVuIHNpemUgY2hhbmdlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVmbG93RGFzaGJvYXJkKCkge1xuICAgIGxvYWREYXNoYm9hcmQodHJ1ZSk7XG4gICAgYWRqdXN0SGVpZ2h0KCk7XG4gIH1cblxuICAvKipcbiAgICogQWRqdXN0IHRoZSBoZWlnaHQgb2YgdGhlIGRhdGEgdml6LlxuICAgKi9cbiAgZnVuY3Rpb24gYWRqdXN0SGVpZ2h0KCkge1xuICAgIGNvbnN0IHZpeiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2aXonKTtcblxuICAgIGlmICh2aXoub2Zmc2V0V2lkdGggPD0gNTAwKSB7XG4gICAgICB2aXouaGVpZ2h0ID0gMTk1MDtcbiAgICB9IGVsc2Uge1xuICAgICAgdml6LmhlaWdodCA9IDI2MDA7XG4gICAgfVxuICB9XG59KSgpO1xuIl19\n\n'use strict'; /* global d3 */\n\n(function () {\n  var wordCloudDiv = document.getElementById('wordcloud');\n  var quoteDiv = document.getElementById('wordcloud-quote');\n  var CLOUD_HEIGHT = 500;\n  var svg = d3.select(wordCloudDiv).append('svg');\n\n  var quotes = void 0;\n  var cloudWidth = void 0;\n  var cloudHeight = CLOUD_HEIGHT;\n  var vis = void 0;\n  var lastWords = void 0;\n\n  window.bootstrapWordCloud = function () {\n    getQuotes();\n    initializeD3();\n\n    window.addEventListener('resize-complete', setSVGWidth);\n  };\n\n  function getQuotes() {\n    var xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('load', function () {\n      if (xhr.status === 200) {\n        quotes = JSON.parse(xhr.responseText);\n      }\n    });\n\n    xhr.open('GET', 'data/quotes.json');\n    xhr.send();\n  }\n\n  function initializeD3() {\n    svg.attr('height', cloudHeight);\n    setSVGWidth();\n    wordCloudDiv.style.display = 'none';\n  }\n\n  function setSVGWidth(skipRedraw) {\n    cloudWidth = wordCloudDiv.offsetWidth;\n    svg.attr('width', cloudWidth);\n\n    if (skipRedraw !== true) {\n      doViz();\n    }\n  }\n\n  function doViz(words) {\n    if (words === undefined) {\n      if (lastWords === undefined) {\n        return;\n      }\n\n      words = lastWords;\n    } else {\n      lastWords = words;\n    }\n\n    svg.selectAll('g').remove();\n\n    vis = svg.\n    append('g').\n    attr('transform', 'translate(' +\n    [cloudWidth >> 1, cloudHeight >> 1] +\n    ')');\n\n    var max = 0;\n    var min = 1000000;\n\n    for (var i in words) {\n      if (words[i].c > max) {\n        max = words[i].c;\n      }\n\n      if (words[i].c < min) {\n        min = words[i].c;\n      }\n    }\n\n    var maxscale = d3.scale.linear().range([50, 120]).domain([10, 960])(cloudWidth);\n    var sizeScale = d3.scale.linear().range([12, maxscale]).domain([min, max]);\n\n    d3.layout.cloud().\n    size([cloudWidth, cloudHeight]).\n    words(words).\n    rotate(function () {\n      return 0;\n    }).\n    font('Impact').\n    fontSize(function (d) {\n      return sizeScale(d.c);\n    }).\n    text(function (d) {\n      return d.w;\n    }).\n    on('end', draw).\n    start();\n  }\n\n  function draw(words, bounds) {\n    var scale = bounds ? Math.min(\n    cloudWidth / Math.abs(bounds[1].x - cloudWidth / 2),\n    cloudWidth / Math.abs(bounds[0].x - cloudWidth / 2),\n    cloudHeight / Math.abs(bounds[1].y - cloudHeight / 2),\n    cloudHeight / Math.abs(bounds[0].y - cloudHeight / 2)) / 2 : 1;\n\n    vis.\n    selectAll('text').\n    data(words).\n    enter().append('text').\n    attr('text-anchor', 'middle').\n    style('font-size', function (d) {\n      return d.size + 'px';\n    }).\n    style('font-family', 'Impact').\n    style('fill', function () {\n      return 'rgba(0,0,0,' + (Math.random() * 0.50 + 0.25) + ')';\n    }).\n    attr('text-anchor', 'middle').\n    attr('transform', function (d) {\n      return 'translate(' + [d.x, d.y] + ')rotate(' + d.rotate + ')';\n    }).\n    text(function (d) {\n      return d.w;\n    });\n\n\n    vis.attr('transform', 'translate(' + [cloudWidth >> 1, cloudHeight >> 1] + ')scale(' + scale + ')');\n  }\n\n  document.getElementById('wordcloud-select').addEventListener('change', function () {\n    var issue = this.value;\n\n    wordCloudDiv.style.display = 'block';\n    setSVGWidth(true);\n\n    d3.json('data/words/' + issue + '.json', function (error, json) {\n      if (error) {\n        return console.warn(error);\n      }\n\n      if (quotes !== undefined) {\n        quoteDiv.innerHTML = '<p>' + quotes[issue] + '</p>';\n      }\n\n      doViz(json);\n    });\n  });\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n/* global\n    getMessageCount\n    renderFAQ\n    bindFAQ\n    bootstrapWordCloud\n    toggle\n    hide\n */\n'use strict';\n\n(function () {\n  polyfill();\n  attachHamburger();\n  getMessageCount();\n  renderCarousel();\n  renderFAQ();\n  bindFAQ();\n  bootstrapWordCloud();\n  scrollToTop();\n\n  var resizeTimer = void 0;\n  var w = window.outerWidth;\n  window.addEventListener('resize', function (e) {\n    clearTimeout(resizeTimer);\n\n    resizeTimer = setTimeout(function () {\n      if (window.outerWidth === w) {\n        return;\n      }\n\n      w = window.outerWidth;\n      var newEvent = new Event('resize-complete');\n      newEvent.originalEvent = e;\n      window.dispatchEvent(newEvent);\n    }, 500);\n  });\n\n  /**\n       * Attach the hamburger click binders.\n       */\n  function attachHamburger() {\n    document.querySelectorAll('.hamburger')[0].addEventListener('click', function () {\n      toggle(document.querySelectorAll('.hamburger-menu'));\n    });\n\n    document.querySelectorAll('.hamburger-menu a').forEach(function (element) {\n      element.addEventListener('click', function () {\n        hide(document.querySelectorAll('.hamburger-menu'));\n      });\n    });\n  }\n\n  /**\n     * Custom polyfills that aren't included in es5-shim.\n     */\n  function polyfill() {\n    if (NodeList.prototype.forEach === undefined) {\n      NodeList.prototype.forEach = Array.prototype.forEach;\n    }\n  }\n\n  /**\n     * Attach click binder to make #top scroll ALL THE WAY to the top\n     */\n  function scrollToTop() {\n    document.querySelectorAll('a[href=\"#top\"]').forEach(function (element) {\n      element.addEventListener('click', function (event) {\n        window.scrollTo(0, 0);\n        event.preventDefault();\n      });\n    });\n  }\n})();\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsicG9seWZpbGwiLCJhdHRhY2hIYW1idXJnZXIiLCJnZXRNZXNzYWdlQ291bnQiLCJyZW5kZXJDYXJvdXNlbCIsInJlbmRlckZBUSIsImJpbmRGQVEiLCJib290c3RyYXBXb3JkQ2xvdWQiLCJzY3JvbGxUb1RvcCIsInJlc2l6ZVRpbWVyIiwidyIsIndpbmRvdyIsIm91dGVyV2lkdGgiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJuZXdFdmVudCIsIkV2ZW50Iiwib3JpZ2luYWxFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJ0b2dnbGUiLCJmb3JFYWNoIiwiZWxlbWVudCIsImhpZGUiLCJOb2RlTGlzdCIsInByb3RvdHlwZSIsInVuZGVmaW5lZCIsIkFycmF5IiwiZXZlbnQiLCJzY3JvbGxUbyIsInByZXZlbnREZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFRQTs7QUFFQSxDQUFDLFlBQVc7QUFDVkE7QUFDQUM7QUFDQUM7QUFDQUM7QUFDQUM7QUFDQUM7QUFDQUM7QUFDQUM7O0FBRUEsTUFBSUMsb0JBQUo7QUFDQSxNQUFJQyxJQUFJQyxPQUFPQyxVQUFmO0FBQ0FELFNBQU9FLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFVBQVNDLENBQVQsRUFBWTtBQUM1Q0MsaUJBQWFOLFdBQWI7O0FBRUFBLGtCQUFjTyxXQUFXLFlBQU07QUFDN0IsVUFBSUwsT0FBT0MsVUFBUCxLQUFzQkYsQ0FBMUIsRUFBNkI7QUFDM0I7QUFDRDs7QUFFREEsVUFBSUMsT0FBT0MsVUFBWDtBQUNBLFVBQU1LLFdBQVcsSUFBSUMsS0FBSixDQUFVLGlCQUFWLENBQWpCO0FBQ0FELGVBQVNFLGFBQVQsR0FBeUJMLENBQXpCO0FBQ0FILGFBQU9TLGFBQVAsQ0FBcUJILFFBQXJCO0FBQ0QsS0FUYSxFQVNYLEdBVFcsQ0FBZDtBQVVELEdBYkQ7O0FBZUE7OztBQUdBLFdBQVNmLGVBQVQsR0FBMkI7QUFDekJtQixhQUFTQyxnQkFBVCxDQUEwQixZQUExQixFQUF3QyxDQUF4QyxFQUEyQ1QsZ0JBQTNDLENBQTRELE9BQTVELEVBQXFFLFlBQU07QUFDekVVLGFBQU9GLFNBQVNDLGdCQUFULENBQTBCLGlCQUExQixDQUFQO0FBQ0QsS0FGRDs7QUFJQUQsYUFBU0MsZ0JBQVQsQ0FBMEIsbUJBQTFCLEVBQStDRSxPQUEvQyxDQUF1RCxVQUFTQyxPQUFULEVBQWtCO0FBQ3ZFQSxjQUFRWixnQkFBUixDQUF5QixPQUF6QixFQUFrQyxZQUFXO0FBQzNDYSxhQUFLTCxTQUFTQyxnQkFBVCxDQUEwQixpQkFBMUIsQ0FBTDtBQUNELE9BRkQ7QUFHRCxLQUpEO0FBS0Q7O0FBRUQ7OztBQUdBLFdBQVNyQixRQUFULEdBQW9CO0FBQ2xCLFFBQUkwQixTQUFTQyxTQUFULENBQW1CSixPQUFuQixLQUErQkssU0FBbkMsRUFBOEM7QUFDNUNGLGVBQVNDLFNBQVQsQ0FBbUJKLE9BQW5CLEdBQTZCTSxNQUFNRixTQUFOLENBQWdCSixPQUE3QztBQUNEO0FBQ0Y7O0FBRUQ7OztBQUdBLFdBQVNoQixXQUFULEdBQXVCO0FBQ3JCYSxhQUFTQyxnQkFBVCxDQUEwQixnQkFBMUIsRUFBNENFLE9BQTVDLENBQW9ELFVBQVNDLE9BQVQsRUFBa0I7QUFDcEVBLGNBQVFaLGdCQUFSLENBQXlCLE9BQXpCLEVBQWtDLFVBQUNrQixLQUFELEVBQVc7QUFDM0NwQixlQUFPcUIsUUFBUCxDQUFnQixDQUFoQixFQUFtQixDQUFuQjtBQUNBRCxjQUFNRSxjQUFOO0FBQ0QsT0FIRDtBQUlELEtBTEQ7QUFNRDtBQUNGLENBOUREIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxcbiAgICBnZXRNZXNzYWdlQ291bnRcbiAgICByZW5kZXJGQVFcbiAgICBiaW5kRkFRXG4gICAgYm9vdHN0cmFwV29yZENsb3VkXG4gICAgdG9nZ2xlXG4gICAgaGlkZVxuICovXG4ndXNlIHN0cmljdCc7XG5cbihmdW5jdGlvbigpIHtcbiAgcG9seWZpbGwoKTtcbiAgYXR0YWNoSGFtYnVyZ2VyKCk7XG4gIGdldE1lc3NhZ2VDb3VudCgpO1xuICByZW5kZXJDYXJvdXNlbCgpO1xuICByZW5kZXJGQVEoKTtcbiAgYmluZEZBUSgpO1xuICBib290c3RyYXBXb3JkQ2xvdWQoKTtcbiAgc2Nyb2xsVG9Ub3AoKTtcblxuICBsZXQgcmVzaXplVGltZXI7XG4gIGxldCB3ID0gd2luZG93Lm91dGVyV2lkdGg7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbihlKSB7XG4gICAgY2xlYXJUaW1lb3V0KHJlc2l6ZVRpbWVyKTtcblxuICAgIHJlc2l6ZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAod2luZG93Lm91dGVyV2lkdGggPT09IHcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB3ID0gd2luZG93Lm91dGVyV2lkdGg7XG4gICAgICBjb25zdCBuZXdFdmVudCA9IG5ldyBFdmVudCgncmVzaXplLWNvbXBsZXRlJyk7XG4gICAgICBuZXdFdmVudC5vcmlnaW5hbEV2ZW50ID0gZTtcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcbiAgICB9LCA1MDApO1xuICB9KTtcblxuICAvKipcbiAgICogQXR0YWNoIHRoZSBoYW1idXJnZXIgY2xpY2sgYmluZGVycy5cbiAgICovXG4gIGZ1bmN0aW9uIGF0dGFjaEhhbWJ1cmdlcigpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaGFtYnVyZ2VyJylbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0b2dnbGUoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhhbWJ1cmdlci1tZW51JykpO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhhbWJ1cmdlci1tZW51IGEnKS5mb3JFYWNoKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaGlkZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaGFtYnVyZ2VyLW1lbnUnKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdXN0b20gcG9seWZpbGxzIHRoYXQgYXJlbid0IGluY2x1ZGVkIGluIGVzNS1zaGltLlxuICAgKi9cbiAgZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gICAgaWYgKE5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIE5vZGVMaXN0LnByb3RvdHlwZS5mb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaCBjbGljayBiaW5kZXIgdG8gbWFrZSAjdG9wIHNjcm9sbCBBTEwgVEhFIFdBWSB0byB0aGUgdG9wXG4gICAqL1xuICBmdW5jdGlvbiBzY3JvbGxUb1RvcCgpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWY9XCIjdG9wXCJdJykuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KSgpO1xuIl19\n","/*\n *\n *  Web Starter Kit\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  const isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          const installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  // Your custom JavaScript goes here\n})();\n","// Word cloud layout by Jason Davies, http://www.jasondavies.com/word-cloud/\n// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\n(function() {\n  function cloud() {\n    var size = [256, 256],\n        text = cloudText,\n        font = cloudFont,\n        fontSize = cloudFontSize,\n        fontStyle = cloudFontNormal,\n        fontWeight = cloudFontNormal,\n        rotate = cloudRotate,\n        padding = cloudPadding,\n        spiral = archimedeanSpiral,\n        words = [],\n        timeInterval = Infinity,\n        event = d3.dispatch(\"word\", \"end\"),\n        timer = null,\n        cloud = {};\n\n    cloud.start = function() {\n      var board = zeroArray((size[0] >> 5) * size[1]),\n          bounds = null,\n          n = words.length,\n          i = -1,\n          tags = [],\n          data = words.map(function(d, i) {\n            d.text = text.call(this, d, i);\n            d.font = font.call(this, d, i);\n            d.style = fontStyle.call(this, d, i);\n            d.weight = fontWeight.call(this, d, i);\n            d.rotate = rotate.call(this, d, i);\n            d.size = ~~fontSize.call(this, d, i);\n            d.padding = padding.call(this, d, i);\n            return d;\n          }).sort(function(a, b) { return b.size - a.size; });\n\n      if (timer) clearInterval(timer);\n      timer = setInterval(step, 0);\n      step();\n\n      return cloud;\n\n      function step() {\n        var start = +new Date,\n            d;\n        while (+new Date - start < timeInterval && ++i < n && timer) {\n          d = data[i];\n          d.x = (size[0] * (Math.random() + .5)) >> 1;\n          d.y = (size[1] * (Math.random() + .5)) >> 1;\n          cloudSprite(d, data, i);\n          if (d.hasText && place(board, d, bounds)) {\n            tags.push(d);\n            event.word(d);\n            if (bounds) cloudBounds(bounds, d);\n            else bounds = [{x: d.x + d.x0, y: d.y + d.y0}, {x: d.x + d.x1, y: d.y + d.y1}];\n            // Temporary hack\n            d.x -= size[0] >> 1;\n            d.y -= size[1] >> 1;\n          }\n        }\n        if (i >= n) {\n          cloud.stop();\n          event.end(tags, bounds);\n        }\n      }\n    }\n\n    cloud.stop = function() {\n      if (timer) {\n        clearInterval(timer);\n        timer = null;\n      }\n      return cloud;\n    };\n\n    cloud.timeInterval = function(x) {\n      if (!arguments.length) return timeInterval;\n      timeInterval = x == null ? Infinity : x;\n      return cloud;\n    };\n\n    function place(board, tag, bounds) {\n      var perimeter = [{x: 0, y: 0}, {x: size[0], y: size[1]}],\n          startX = tag.x,\n          startY = tag.y,\n          maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n          s = spiral(size),\n          dt = Math.random() < .5 ? 1 : -1,\n          t = -dt,\n          dxdy,\n          dx,\n          dy;\n\n      while (dxdy = s(t += dt)) {\n        dx = ~~dxdy[0];\n        dy = ~~dxdy[1];\n\n        if (Math.min(dx, dy) > maxDelta) break;\n\n        tag.x = startX + dx;\n        tag.y = startY + dy;\n\n        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||\n            tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;\n        // TODO only check for collisions within current bounds.\n        if (!bounds || !cloudCollide(tag, board, size[0])) {\n          if (!bounds || collideRects(tag, bounds)) {\n            var sprite = tag.sprite,\n                w = tag.width >> 5,\n                sw = size[0] >> 5,\n                lx = tag.x - (w << 4),\n                sx = lx & 0x7f,\n                msx = 32 - sx,\n                h = tag.y1 - tag.y0,\n                x = (tag.y + tag.y0) * sw + (lx >> 5),\n                last;\n            for (var j = 0; j < h; j++) {\n              last = 0;\n              for (var i = 0; i <= w; i++) {\n                board[x + i] |= (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n              }\n              x += sw;\n            }\n            delete tag.sprite;\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    cloud.words = function(x) {\n      if (!arguments.length) return words;\n      words = x;\n      return cloud;\n    };\n\n    cloud.size = function(x) {\n      if (!arguments.length) return size;\n      size = [+x[0], +x[1]];\n      return cloud;\n    };\n\n    cloud.font = function(x) {\n      if (!arguments.length) return font;\n      font = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.fontStyle = function(x) {\n      if (!arguments.length) return fontStyle;\n      fontStyle = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.fontWeight = function(x) {\n      if (!arguments.length) return fontWeight;\n      fontWeight = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.rotate = function(x) {\n      if (!arguments.length) return rotate;\n      rotate = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.text = function(x) {\n      if (!arguments.length) return text;\n      text = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.spiral = function(x) {\n      if (!arguments.length) return spiral;\n      spiral = spirals[x + \"\"] || x;\n      return cloud;\n    };\n\n    cloud.fontSize = function(x) {\n      if (!arguments.length) return fontSize;\n      fontSize = d3.functor(x);\n      return cloud;\n    };\n\n    cloud.padding = function(x) {\n      if (!arguments.length) return padding;\n      padding = d3.functor(x);\n      return cloud;\n    };\n\n    return d3.rebind(cloud, event, \"on\");\n  }\n\n  function cloudText(d) {\n    return d.text;\n  }\n\n  function cloudFont() {\n    return \"serif\";\n  }\n\n  function cloudFontNormal() {\n    return \"normal\";\n  }\n\n  function cloudFontSize(d) {\n    return Math.sqrt(d.value);\n  }\n\n  function cloudRotate() {\n    return (~~(Math.random() * 6) - 3) * 30;\n  }\n\n  function cloudPadding() {\n    return 1;\n  }\n\n  // Fetches a monochrome sprite bitmap for the specified text.\n  // Load in batches for speed.\n  function cloudSprite(d, data, di) {\n    if (d.sprite) return;\n    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n    var x = 0,\n        y = 0,\n        maxh = 0,\n        n = data.length;\n    --di;\n    while (++di < n) {\n      d = data[di];\n      c.save();\n      c.font = d.style + \" \" + d.weight + \" \" + ~~((d.size + 1) / ratio) + \"px \" + d.font;\n      var w = c.measureText(d.text + \"m\").width * ratio,\n          h = d.size << 1;\n      if (d.rotate) {\n        var sr = Math.sin(d.rotate * cloudRadians),\n            cr = Math.cos(d.rotate * cloudRadians),\n            wcr = w * cr,\n            wsr = w * sr,\n            hcr = h * cr,\n            hsr = h * sr;\n        w = (Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5 << 5;\n        h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n      } else {\n        w = (w + 0x1f) >> 5 << 5;\n      }\n      if (h > maxh) maxh = h;\n      if (x + w >= (cw << 5)) {\n        x = 0;\n        y += maxh;\n        maxh = 0;\n      }\n      if (y + h >= ch) break;\n      c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n      if (d.rotate) c.rotate(d.rotate * cloudRadians);\n      c.fillText(d.text, 0, 0);\n      if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, 0, 0);\n      c.restore();\n      d.width = w;\n      d.height = h;\n      d.xoff = x;\n      d.yoff = y;\n      d.x1 = w >> 1;\n      d.y1 = h >> 1;\n      d.x0 = -d.x1;\n      d.y0 = -d.y1;\n      d.hasText = true;\n      x += w;\n    }\n    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n        sprite = [];\n    while (--di >= 0) {\n      d = data[di];\n      if (!d.hasText) continue;\n      var w = d.width,\n          w32 = w >> 5,\n          h = d.y1 - d.y0;\n      // Zero the buffer\n      for (var i = 0; i < h * w32; i++) sprite[i] = 0;\n      x = d.xoff;\n      if (x == null) return;\n      y = d.yoff;\n      var seen = 0,\n          seenRow = -1;\n      for (var j = 0; j < h; j++) {\n        for (var i = 0; i < w; i++) {\n          var k = w32 * j + (i >> 5),\n              m = pixels[((y + j) * (cw << 5) + (x + i)) << 2] ? 1 << (31 - (i % 32)) : 0;\n          sprite[k] |= m;\n          seen |= m;\n        }\n        if (seen) seenRow = j;\n        else {\n          d.y0++;\n          h--;\n          j--;\n          y++;\n        }\n      }\n      d.y1 = d.y0 + seenRow;\n      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n    }\n  }\n\n  // Use mask-based collision detection.\n  function cloudCollide(tag, board, sw) {\n    sw >>= 5;\n    var sprite = tag.sprite,\n        w = tag.width >> 5,\n        lx = tag.x - (w << 4),\n        sx = lx & 0x7f,\n        msx = 32 - sx,\n        h = tag.y1 - tag.y0,\n        x = (tag.y + tag.y0) * sw + (lx >> 5),\n        last;\n    for (var j = 0; j < h; j++) {\n      last = 0;\n      for (var i = 0; i <= w; i++) {\n        if (((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0))\n            & board[x + i]) return true;\n      }\n      x += sw;\n    }\n    return false;\n  }\n\n  function cloudBounds(bounds, d) {\n    var b0 = bounds[0],\n        b1 = bounds[1];\n    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n  }\n\n  function collideRects(a, b) {\n    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n  }\n\n  function archimedeanSpiral(size) {\n    var e = size[0] / size[1];\n    return function(t) {\n      return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\n    };\n  }\n\n  function rectangularSpiral(size) {\n    var dy = 4,\n        dx = dy * size[0] / size[1],\n        x = 0,\n        y = 0;\n    return function(t) {\n      var sign = t < 0 ? -1 : 1;\n      // See triangular numbers: T_n = n * (n + 1) / 2.\n      switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {\n        case 0:  x += dx; break;\n        case 1:  y += dy; break;\n        case 2:  x -= dx; break;\n        default: y -= dy; break;\n      }\n      return [x, y];\n    };\n  }\n\n  // TODO reuse arrays?\n  function zeroArray(n) {\n    var a = [],\n        i = -1;\n    while (++i < n) a[i] = 0;\n    return a;\n  }\n\n  var cloudRadians = Math.PI / 180,\n      cw = 1 << 11 >> 5,\n      ch = 1 << 11,\n      canvas,\n      ratio = 1;\n\n  if (typeof document !== \"undefined\") {\n    canvas = document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = 1;\n    ratio = Math.sqrt(canvas.getContext(\"2d\").getImageData(0, 0, 1, 1).data.length >> 2);\n    canvas.width = (cw << 5) / ratio;\n    canvas.height = ch / ratio;\n  } else {\n    // Attempt to use node-canvas.\n    canvas = new Canvas(cw << 5, ch);\n  }\n\n  var c = canvas.getContext(\"2d\"),\n      spirals = {\n        archimedean: archimedeanSpiral,\n        rectangular: rectangularSpiral\n      };\n  c.fillStyle = c.strokeStyle = \"red\";\n  c.textAlign = \"center\";\n\n  if (typeof module === \"object\" && module.exports) module.exports = cloud;\n  else (d3.layout || (d3.layout = {})).cloud = cloud;\n})();","/* eslint-env browser */\n/**\n * Toggle the display of an element.\n *\n * @param  {element} e The element to toggle.\n *\n * @return {element}   The element that was toggled.\n */\nwindow.toggle = function(e) {\n  if (e instanceof NodeList) {\n    e.forEach(toggle);\n    return e;\n  }\n\n  if (e.style.display === 'inherit') {\n    return hide(e);\n  }\n\n  return show(e);\n}\n\n/**\n * Hide an element or elements.\n *\n * @param  {element|NodeList} e The element(s) to hide\n *\n * @return {element} The element hidden\n */\nwindow.hide = function(e) {\n  if (e instanceof NodeList) {\n    e.forEach(hide);\n  } else {\n    e.style.display = 'none';\n  }\n\n  return e;\n}\n\n/**\n * Unhide an element.\n *\n * @param  {element} e The element to unhide.\n *\n * @return {element} The element unhidden\n */\nwindow.show = function(e) {\n  if (e instanceof NodeList) {\n    e.forEach(hide);\n  } else {\n    e.style.display = 'inherit';\n  }\n\n  return e;\n}\n","/** \n* carousel-js - v3.1.1.\n* git://github.com/mkay581/carousel-js.git\n* Copyright 2016 Mark Kennedy. Licensed MIT.\n*/\n\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.Carousel = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (process,__filename){\n/** vim: et:ts=4:sw=4:sts=4\n * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/amdefine for details\n */\n\n/*jslint node: true */\n/*global module, process */\n'use strict';\n\n/**\n * Creates a define for node.\n * @param {Object} module the \"module\" object that is defined by Node for the\n * current module.\n * @param {Function} [requireFn]. Node's require function for the current module.\n * It only needs to be passed in Node versions before 0.5, when module.require\n * did not exist.\n * @returns {Function} a define function that is usable for the current node\n * module.\n */\nfunction amdefine(module, requireFn) {\n    'use strict';\n    var defineCache = {},\n        loaderCache = {},\n        alreadyCalled = false,\n        path = require('path'),\n        makeRequire, stringRequire;\n\n    /**\n     * Trims the . and .. from an array of path segments.\n     * It will keep a leading path segment if a .. will become\n     * the first path segment, to help with module name lookups,\n     * which act like paths, but can be remapped. But the end result,\n     * all paths that use this function should look normalized.\n     * NOTE: this method MODIFIES the input array.\n     * @param {Array} ary the array of path segments.\n     */\n    function trimDots(ary) {\n        var i, part;\n        for (i = 0; ary[i]; i+= 1) {\n            part = ary[i];\n            if (part === '.') {\n                ary.splice(i, 1);\n                i -= 1;\n            } else if (part === '..') {\n                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\n                    //End of the line. Keep at least one non-dot\n                    //path segment at the front so it can be mapped\n                    //correctly to disk. Otherwise, there is likely\n                    //no path mapping for a path starting with '..'.\n                    //This can still fail, but catches the most reasonable\n                    //uses of ..\n                    break;\n                } else if (i > 0) {\n                    ary.splice(i - 1, 2);\n                    i -= 2;\n                }\n            }\n        }\n    }\n\n    function normalize(name, baseName) {\n        var baseParts;\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === '.') {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                baseParts = baseName.split('/');\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                baseParts = baseParts.concat(name.split('/'));\n                trimDots(baseParts);\n                name = baseParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    /**\n     * Create the normalize() function passed to a loader plugin's\n     * normalize method.\n     */\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(id) {\n        function load(value) {\n            loaderCache[id] = value;\n        }\n\n        load.fromText = function (id, text) {\n            //This one is difficult because the text can/probably uses\n            //define, and any relative paths and requires should be relative\n            //to that id was it would be found on disk. But this would require\n            //bootstrapping a module/require fairly deeply from node core.\n            //Not sure how best to go about that yet.\n            throw new Error('amdefine does not implement load.fromText');\n        };\n\n        return load;\n    }\n\n    makeRequire = function (systemRequire, exports, module, relId) {\n        function amdRequire(deps, callback) {\n            if (typeof deps === 'string') {\n                //Synchronous, single module require('')\n                return stringRequire(systemRequire, exports, module, deps, relId);\n            } else {\n                //Array of dependencies with a callback.\n\n                //Convert the dependencies to modules.\n                deps = deps.map(function (depName) {\n                    return stringRequire(systemRequire, exports, module, depName, relId);\n                });\n\n                //Wait for next tick to call back the require call.\n                if (callback) {\n                    process.nextTick(function () {\n                        callback.apply(null, deps);\n                    });\n                }\n            }\n        }\n\n        amdRequire.toUrl = function (filePath) {\n            if (filePath.indexOf('.') === 0) {\n                return normalize(filePath, path.dirname(module.filename));\n            } else {\n                return filePath;\n            }\n        };\n\n        return amdRequire;\n    };\n\n    //Favor explicit value, passed in if the module wants to support Node 0.4.\n    requireFn = requireFn || function req() {\n        return module.require.apply(module, arguments);\n    };\n\n    function runFactory(id, deps, factory) {\n        var r, e, m, result;\n\n        if (id) {\n            e = loaderCache[id] = {};\n            m = {\n                id: id,\n                uri: __filename,\n                exports: e\n            };\n            r = makeRequire(requireFn, e, m, id);\n        } else {\n            //Only support one define call per file\n            if (alreadyCalled) {\n                throw new Error('amdefine with no module ID cannot be called more than once per file.');\n            }\n            alreadyCalled = true;\n\n            //Use the real variables from node\n            //Use module.exports for exports, since\n            //the exports in here is amdefine exports.\n            e = module.exports;\n            m = module;\n            r = makeRequire(requireFn, e, m, module.id);\n        }\n\n        //If there are dependencies, they are strings, so need\n        //to convert them to dependency values.\n        if (deps) {\n            deps = deps.map(function (depName) {\n                return r(depName);\n            });\n        }\n\n        //Call the factory with the right dependencies.\n        if (typeof factory === 'function') {\n            result = factory.apply(m.exports, deps);\n        } else {\n            result = factory;\n        }\n\n        if (result !== undefined) {\n            m.exports = result;\n            if (id) {\n                loaderCache[id] = m.exports;\n            }\n        }\n    }\n\n    stringRequire = function (systemRequire, exports, module, id, relId) {\n        //Split the ID by a ! so that\n        var index = id.indexOf('!'),\n            originalId = id,\n            prefix, plugin;\n\n        if (index === -1) {\n            id = normalize(id, relId);\n\n            //Straight module lookup. If it is one of the special dependencies,\n            //deal with it, otherwise, delegate to node.\n            if (id === 'require') {\n                return makeRequire(systemRequire, exports, module, relId);\n            } else if (id === 'exports') {\n                return exports;\n            } else if (id === 'module') {\n                return module;\n            } else if (loaderCache.hasOwnProperty(id)) {\n                return loaderCache[id];\n            } else if (defineCache[id]) {\n                runFactory.apply(null, defineCache[id]);\n                return loaderCache[id];\n            } else {\n                if(systemRequire) {\n                    return systemRequire(originalId);\n                } else {\n                    throw new Error('No module with ID: ' + id);\n                }\n            }\n        } else {\n            //There is a plugin in play.\n            prefix = id.substring(0, index);\n            id = id.substring(index + 1, id.length);\n\n            plugin = stringRequire(systemRequire, exports, module, prefix, relId);\n\n            if (plugin.normalize) {\n                id = plugin.normalize(id, makeNormalize(relId));\n            } else {\n                //Normalize the ID normally.\n                id = normalize(id, relId);\n            }\n\n            if (loaderCache[id]) {\n                return loaderCache[id];\n            } else {\n                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});\n\n                return loaderCache[id];\n            }\n        }\n    };\n\n    //Create a define function specific to the module asking for amdefine.\n    function define(id, deps, factory) {\n        if (Array.isArray(id)) {\n            factory = deps;\n            deps = id;\n            id = undefined;\n        } else if (typeof id !== 'string') {\n            factory = id;\n            id = deps = undefined;\n        }\n\n        if (deps && !Array.isArray(deps)) {\n            factory = deps;\n            deps = undefined;\n        }\n\n        if (!deps) {\n            deps = ['require', 'exports', 'module'];\n        }\n\n        //Set up properties for this module. If an ID, then use\n        //internal cache. If no ID, then use the external variables\n        //for this node module.\n        if (id) {\n            //Put the module in deep freeze until there is a\n            //require call for it.\n            defineCache[id] = [id, deps, factory];\n        } else {\n            runFactory(id, deps, factory);\n        }\n    }\n\n    //define.require, which has access to all the values in the\n    //cache. Useful for AMD modules that all have IDs in the file,\n    //but need to finally export a value to node based on one of those\n    //IDs.\n    define.require = function (id) {\n        if (loaderCache[id]) {\n            return loaderCache[id];\n        }\n\n        if (defineCache[id]) {\n            runFactory.apply(null, defineCache[id]);\n            return loaderCache[id];\n        }\n    };\n\n    define.amd = {};\n\n    return define;\n}\n\nmodule.exports = amdefine;\n\n}).call(this,require('_process'),\"/node_modules/amdefine/amdefine.js\")\n},{\"_process\":65,\"path\":64}],2:[function(require,module,exports){\n\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n\n},{\"./raw\":3}],3:[function(require,module,exports){\n(function (global){\n\"use strict\";\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including IO, animation, reflow, and redraw\n// events in browsers.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Equivalent to push, but avoids a function call.\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been requested, no further calls to `requestFlush` are\n// necessary until the next `flush` completes.\nvar flushing = false;\n// `requestFlush` is an implementation-specific method that attempts to kick\n// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n// the event queue before yielding to the browser's own event loop.\nvar requestFlush;\n// The position of the next task to execute in the task queue. This is\n// preserved between calls to `flush` so that it can be resumed if\n// a task throws an exception.\nvar index = 0;\n// If a task schedules additional tasks recursively, the task queue can grow\n// unbounded. To prevent memory exhaustion, the task queue will periodically\n// truncate already-completed tasks.\nvar capacity = 1024;\n\n// The flush function processes all tasks that have been scheduled with\n// `rawAsap` unless and until one of those tasks throws an exception.\n// If a task throws an exception, `flush` ensures that its state will remain\n// consistent and will resume where it left off when called again.\n// However, `flush` does not make any arrangements to be called again if an\n// exception is thrown.\nfunction flush() {\n    while (index < queue.length) {\n        var currentIndex = index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        index = index + 1;\n        queue[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n            }\n            queue.length -= index;\n            index = 0;\n        }\n    }\n    queue.length = 0;\n    index = 0;\n    flushing = false;\n}\n\n// `requestFlush` is implemented using a strategy based on data collected from\n// every available SauceLabs Selenium web driver worker at time of writing.\n// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n// have WebKitMutationObserver but not un-prefixed MutationObserver.\n// Must use `global` or `self` instead of `window` to work in both frames and web\n// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\n/* globals self */\nvar scope = typeof global !== \"undefined\" ? global : self;\nvar BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;\n\n// MutationObservers are desirable because they have high priority and work\n// reliably everywhere they are implemented.\n// They are implemented in all modern browsers.\n//\n// - Android 4-4.3\n// - Chrome 26-34\n// - Firefox 14-29\n// - Internet Explorer 11\n// - iPad Safari 6-7.1\n// - iPhone Safari 7-7.1\n// - Safari 6-7\nif (typeof BrowserMutationObserver === \"function\") {\n    requestFlush = makeRequestCallFromMutationObserver(flush);\n\n// MessageChannels are desirable because they give direct access to the HTML\n// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n// 11-12, and in web workers in many engines.\n// Although message channels yield to any queued rendering and IO tasks, they\n// would be better than imposing the 4ms delay of timers.\n// However, they do not work reliably in Internet Explorer or Safari.\n\n// Internet Explorer 10 is the only browser that has setImmediate but does\n// not have MutationObservers.\n// Although setImmediate yields to the browser's renderer, it would be\n// preferrable to falling back to setTimeout since it does not have\n// the minimum 4ms penalty.\n// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n// Desktop to a lesser extent) that renders both setImmediate and\n// MessageChannel useless for the purposes of ASAP.\n// https://github.com/kriskowal/q/issues/396\n\n// Timers are implemented universally.\n// We fall back to timers in workers in most engines, and in foreground\n// contexts in the following browsers.\n// However, note that even this simple case requires nuances to operate in a\n// broad spectrum of browsers.\n//\n// - Firefox 3-13\n// - Internet Explorer 6-9\n// - iPad Safari 4.3\n// - Lynx 2.8.7\n} else {\n    requestFlush = makeRequestCallFromTimer(flush);\n}\n\n// `requestFlush` requests that the high priority event queue be flushed as\n// soon as possible.\n// This is useful to prevent an error thrown in a task from stalling the event\n// queue if the exception handled by Node.js’s\n// `process.on(\"uncaughtException\")` or by a domain.\nrawAsap.requestFlush = requestFlush;\n\n// To request a high priority event, we induce a mutation observer by toggling\n// the text of a text node between \"1\" and \"-1\".\nfunction makeRequestCallFromMutationObserver(callback) {\n    var toggle = 1;\n    var observer = new BrowserMutationObserver(callback);\n    var node = document.createTextNode(\"\");\n    observer.observe(node, {characterData: true});\n    return function requestCall() {\n        toggle = -toggle;\n        node.data = toggle;\n    };\n}\n\n// The message channel technique was discovered by Malte Ubl and was the\n// original foundation for this library.\n// http://www.nonblocking.io/2011/06/windownexttick.html\n\n// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n// page's first load. Thankfully, this version of Safari supports\n// MutationObservers, so we don't need to fall back in that case.\n\n// function makeRequestCallFromMessageChannel(callback) {\n//     var channel = new MessageChannel();\n//     channel.port1.onmessage = callback;\n//     return function requestCall() {\n//         channel.port2.postMessage(0);\n//     };\n// }\n\n// For reasons explained above, we are also unable to use `setImmediate`\n// under any circumstances.\n// Even if we were, there is another bug in Internet Explorer 10.\n// It is not sufficient to assign `setImmediate` to `requestFlush` because\n// `setImmediate` must be called *by name* and therefore must be wrapped in a\n// closure.\n// Never forget.\n\n// function makeRequestCallFromSetImmediate(callback) {\n//     return function requestCall() {\n//         setImmediate(callback);\n//     };\n// }\n\n// Safari 6.0 has a problem where timers will get lost while the user is\n// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n// mutation observers, so that implementation is used instead.\n// However, if we ever elect to use timers in Safari, the prevalent work-around\n// is to add a scroll event listener that calls for a flush.\n\n// `setTimeout` does not call the passed callback if the delay is less than\n// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n// even then.\n\nfunction makeRequestCallFromTimer(callback) {\n    return function requestCall() {\n        // We dispatch a timeout with a specified delay of 0 for engines that\n        // can reliably accommodate that request. This will usually be snapped\n        // to a 4 milisecond delay, but once we're flushing, there's no delay\n        // between events.\n        var timeoutHandle = setTimeout(handleTimer, 0);\n        // However, since this timer gets frequently dropped in Firefox\n        // workers, we enlist an interval handle that will try to fire\n        // an event 20 times per second until it succeeds.\n        var intervalHandle = setInterval(handleTimer, 50);\n\n        function handleTimer() {\n            // Whichever timer succeeds will cancel both timers and\n            // execute the callback.\n            clearTimeout(timeoutHandle);\n            clearInterval(intervalHandle);\n            callback();\n        }\n    };\n}\n\n// This is for `asap.js` only.\n// Its name will be periodically randomized to break any code that depends on\n// its existence.\nrawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n// ASAP was originally a nextTick shim included in Q. This was factored out\n// into this ASAP package. It was later adapted to RSVP which made further\n// amendments. These decisions, particularly to marginalize MessageChannel and\n// to capture the MutationObserver implementation in a closure, were integrated\n// back into ASAP proper.\n// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],4:[function(require,module,exports){\n(function (process,global){\n/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   4.0.5\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  return typeof x === 'function' || typeof x === 'object' && x !== null;\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\nvar _isArray = undefined;\nif (!Array.isArray) {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n} else {\n  _isArray = Array.isArray;\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = undefined;\nvar customSchedulerFn = undefined;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var r = require;\n    var vertx = r('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = undefined;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && typeof require === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var _arguments = arguments;\n\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n  if (_state) {\n    (function () {\n      var callback = _arguments[_state - 1];\n      asap(function () {\n        return invokeCallback(_state, child, callback, parent._result);\n      });\n    })();\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  _resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(16);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar GET_THEN_ERROR = new ErrorObject();\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    GET_THEN_ERROR.error = error;\n    return GET_THEN_ERROR;\n  }\n}\n\nfunction tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        _resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      _reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      _reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    _reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return _resolve(promise, value);\n    }, function (reason) {\n      return _reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$) {\n  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$ === GET_THEN_ERROR) {\n      _reject(promise, GET_THEN_ERROR.error);\n    } else if (then$$ === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$)) {\n      handleForeignThenable(promise, maybeThenable, then$$);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction _resolve(promise, value) {\n  if (promise === value) {\n    _reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction _reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = undefined,\n      callback = undefined,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction ErrorObject() {\n  this.error = null;\n}\n\nvar TRY_CATCH_ERROR = new ErrorObject();\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = undefined,\n      error = undefined,\n      succeeded = undefined,\n      failed = undefined;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      _reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n      _resolve(promise, value);\n    } else if (failed) {\n      _reject(promise, error);\n    } else if (settled === FULFILLED) {\n      fulfill(promise, value);\n    } else if (settled === REJECTED) {\n      _reject(promise, value);\n    }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      _resolve(promise, value);\n    }, function rejectPromise(reason) {\n      _reject(promise, reason);\n    });\n  } catch (e) {\n    _reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction Enumerator(Constructor, input) {\n  this._instanceConstructor = Constructor;\n  this.promise = new Constructor(noop);\n\n  if (!this.promise[PROMISE_ID]) {\n    makePromise(this.promise);\n  }\n\n  if (isArray(input)) {\n    this._input = input;\n    this.length = input.length;\n    this._remaining = input.length;\n\n    this._result = new Array(this.length);\n\n    if (this.length === 0) {\n      fulfill(this.promise, this._result);\n    } else {\n      this.length = this.length || 0;\n      this._enumerate();\n      if (this._remaining === 0) {\n        fulfill(this.promise, this._result);\n      }\n    }\n  } else {\n    _reject(this.promise, validationError());\n  }\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n};\n\nEnumerator.prototype._enumerate = function () {\n  var length = this.length;\n  var _input = this._input;\n\n  for (var i = 0; this._state === PENDING && i < length; i++) {\n    this._eachEntry(_input[i], i);\n  }\n};\n\nEnumerator.prototype._eachEntry = function (entry, i) {\n  var c = this._instanceConstructor;\n  var resolve$$ = c.resolve;\n\n  if (resolve$$ === resolve) {\n    var _then = getThen(entry);\n\n    if (_then === then && entry._state !== PENDING) {\n      this._settledAt(entry._state, i, entry._result);\n    } else if (typeof _then !== 'function') {\n      this._remaining--;\n      this._result[i] = entry;\n    } else if (c === Promise) {\n      var promise = new c(noop);\n      handleMaybeThenable(promise, entry, _then);\n      this._willSettleAt(promise, i);\n    } else {\n      this._willSettleAt(new c(function (resolve$$) {\n        return resolve$$(entry);\n      }), i);\n    }\n  } else {\n    this._willSettleAt(resolve$$(entry), i);\n  }\n};\n\nEnumerator.prototype._settledAt = function (state, i, value) {\n  var promise = this.promise;\n\n  if (promise._state === PENDING) {\n    this._remaining--;\n\n    if (state === REJECTED) {\n      _reject(promise, value);\n    } else {\n      this._result[i] = value;\n    }\n  }\n\n  if (this._remaining === 0) {\n    fulfill(promise, this._result);\n  }\n};\n\nEnumerator.prototype._willSettleAt = function (promise, i) {\n  var enumerator = this;\n\n  subscribe(promise, undefined, function (value) {\n    return enumerator._settledAt(FULFILLED, i, value);\n  }, function (reason) {\n    return enumerator._settledAt(REJECTED, i, reason);\n  });\n};\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  _reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {function} resolver\n  Useful for tooling.\n  @constructor\n*/\nfunction Promise(resolver) {\n  this[PROMISE_ID] = nextId();\n  this._result = this._state = undefined;\n  this._subscribers = [];\n\n  if (noop !== resolver) {\n    typeof resolver !== 'function' && needsResolver();\n    this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n  }\n}\n\nPromise.all = all;\nPromise.race = race;\nPromise.resolve = resolve;\nPromise.reject = reject;\nPromise._setScheduler = setScheduler;\nPromise._setAsap = setAsap;\nPromise._asap = asap;\n\nPromise.prototype = {\n  constructor: Promise,\n\n  /**\n    The primary way of interacting with a promise is through its `then` method,\n    which registers callbacks to receive either a promise's eventual value or the\n    reason why the promise cannot be fulfilled.\n  \n    ```js\n    findUser().then(function(user){\n      // user is available\n    }, function(reason){\n      // user is unavailable, and you are given the reason why\n    });\n    ```\n  \n    Chaining\n    --------\n  \n    The return value of `then` is itself a promise.  This second, 'downstream'\n    promise is resolved with the return value of the first promise's fulfillment\n    or rejection handler, or rejected if the handler throws an exception.\n  \n    ```js\n    findUser().then(function (user) {\n      return user.name;\n    }, function (reason) {\n      return 'default name';\n    }).then(function (userName) {\n      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n      // will be `'default name'`\n    });\n  \n    findUser().then(function (user) {\n      throw new Error('Found user, but still unhappy');\n    }, function (reason) {\n      throw new Error('`findUser` rejected and we're unhappy');\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n    });\n    ```\n    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n  \n    ```js\n    findUser().then(function (user) {\n      throw new PedagogicalException('Upstream error');\n    }).then(function (value) {\n      // never reached\n    }).then(function (value) {\n      // never reached\n    }, function (reason) {\n      // The `PedgagocialException` is propagated all the way down to here\n    });\n    ```\n  \n    Assimilation\n    ------------\n  \n    Sometimes the value you want to propagate to a downstream promise can only be\n    retrieved asynchronously. This can be achieved by returning a promise in the\n    fulfillment or rejection handler. The downstream promise will then be pending\n    until the returned promise is settled. This is called *assimilation*.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // The user's comments are now available\n    });\n    ```\n  \n    If the assimliated promise rejects, then the downstream promise will also reject.\n  \n    ```js\n    findUser().then(function (user) {\n      return findCommentsByAuthor(user);\n    }).then(function (comments) {\n      // If `findCommentsByAuthor` fulfills, we'll have the value here\n    }, function (reason) {\n      // If `findCommentsByAuthor` rejects, we'll have the reason here\n    });\n    ```\n  \n    Simple Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let result;\n  \n    try {\n      result = findResult();\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n    findResult(function(result, err){\n      if (err) {\n        // failure\n      } else {\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findResult().then(function(result){\n      // success\n    }, function(reason){\n      // failure\n    });\n    ```\n  \n    Advanced Example\n    --------------\n  \n    Synchronous Example\n  \n    ```javascript\n    let author, books;\n  \n    try {\n      author = findAuthor();\n      books  = findBooksByAuthor(author);\n      // success\n    } catch(reason) {\n      // failure\n    }\n    ```\n  \n    Errback Example\n  \n    ```js\n  \n    function foundBooks(books) {\n  \n    }\n  \n    function failure(reason) {\n  \n    }\n  \n    findAuthor(function(author, err){\n      if (err) {\n        failure(err);\n        // failure\n      } else {\n        try {\n          findBoooksByAuthor(author, function(books, err) {\n            if (err) {\n              failure(err);\n            } else {\n              try {\n                foundBooks(books);\n              } catch(reason) {\n                failure(reason);\n              }\n            }\n          });\n        } catch(error) {\n          failure(err);\n        }\n        // success\n      }\n    });\n    ```\n  \n    Promise Example;\n  \n    ```javascript\n    findAuthor().\n      then(findBooksByAuthor).\n      then(function(books){\n        // found books\n    }).catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method then\n    @param {Function} onFulfilled\n    @param {Function} onRejected\n    Useful for tooling.\n    @return {Promise}\n  */\n  then: then,\n\n  /**\n    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n    as the catch block of a try/catch statement.\n  \n    ```js\n    function findAuthor(){\n      throw new Error('couldn't find that author');\n    }\n  \n    // synchronous\n    try {\n      findAuthor();\n    } catch(reason) {\n      // something went wrong\n    }\n  \n    // async with promises\n    findAuthor().catch(function(reason){\n      // something went wrong\n    });\n    ```\n  \n    @method catch\n    @param {Function} onRejection\n    Useful for tooling.\n    @return {Promise}\n  */\n  'catch': function _catch(onRejection) {\n    return this.then(null, onRejection);\n  }\n};\n\nfunction polyfill() {\n    var local = undefined;\n\n    if (typeof global !== 'undefined') {\n        local = global;\n    } else if (typeof self !== 'undefined') {\n        local = self;\n    } else {\n        try {\n            local = Function('return this')();\n        } catch (e) {\n            throw new Error('polyfill failed because global object is unavailable in this environment');\n        }\n    }\n\n    var P = local.Promise;\n\n    if (P) {\n        var promiseToString = null;\n        try {\n            promiseToString = Object.prototype.toString.call(P.resolve());\n        } catch (e) {\n            // silently ignored\n        }\n\n        if (promiseToString === '[object Promise]' && !P.cast) {\n            return;\n        }\n    }\n\n    local.Promise = Promise;\n}\n\n// Strange compat..\nPromise.polyfill = polyfill;\nPromise.Promise = Promise;\n\nreturn Promise;\n\n})));\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"_process\":65}],5:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _handlebarsRuntime = require('./handlebars.runtime');\n\nvar _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);\n\n// Compiler imports\n\nvar _handlebarsCompilerAst = require('./handlebars/compiler/ast');\n\nvar _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);\n\nvar _handlebarsCompilerBase = require('./handlebars/compiler/base');\n\nvar _handlebarsCompilerCompiler = require('./handlebars/compiler/compiler');\n\nvar _handlebarsCompilerJavascriptCompiler = require('./handlebars/compiler/javascript-compiler');\n\nvar _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);\n\nvar _handlebarsCompilerVisitor = require('./handlebars/compiler/visitor');\n\nvar _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);\n\nvar _handlebarsNoConflict = require('./handlebars/no-conflict');\n\nvar _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);\n\nvar _create = _handlebarsRuntime2['default'].create;\nfunction create() {\n  var hb = _create();\n\n  hb.compile = function (input, options) {\n    return _handlebarsCompilerCompiler.compile(input, options, hb);\n  };\n  hb.precompile = function (input, options) {\n    return _handlebarsCompilerCompiler.precompile(input, options, hb);\n  };\n\n  hb.AST = _handlebarsCompilerAst2['default'];\n  hb.Compiler = _handlebarsCompilerCompiler.Compiler;\n  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];\n  hb.Parser = _handlebarsCompilerBase.parser;\n  hb.parse = _handlebarsCompilerBase.parse;\n\n  return hb;\n}\n\nvar inst = create();\ninst.create = create;\n\n_handlebarsNoConflict2['default'](inst);\n\ninst.Visitor = _handlebarsCompilerVisitor2['default'];\n\ninst['default'] = inst;\n\nexports['default'] = inst;\nmodule.exports = exports['default'];\n\n\n},{\"./handlebars.runtime\":6,\"./handlebars/compiler/ast\":8,\"./handlebars/compiler/base\":9,\"./handlebars/compiler/compiler\":11,\"./handlebars/compiler/javascript-compiler\":13,\"./handlebars/compiler/visitor\":16,\"./handlebars/no-conflict\":30}],6:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nvar _handlebarsBase = require('./handlebars/base');\n\nvar base = _interopRequireWildcard(_handlebarsBase);\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\n\nvar _handlebarsSafeString = require('./handlebars/safe-string');\n\nvar _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);\n\nvar _handlebarsException = require('./handlebars/exception');\n\nvar _handlebarsException2 = _interopRequireDefault(_handlebarsException);\n\nvar _handlebarsUtils = require('./handlebars/utils');\n\nvar Utils = _interopRequireWildcard(_handlebarsUtils);\n\nvar _handlebarsRuntime = require('./handlebars/runtime');\n\nvar runtime = _interopRequireWildcard(_handlebarsRuntime);\n\nvar _handlebarsNoConflict = require('./handlebars/no-conflict');\n\nvar _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  var hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = _handlebarsSafeString2['default'];\n  hb.Exception = _handlebarsException2['default'];\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function (spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nvar inst = create();\ninst.create = create;\n\n_handlebarsNoConflict2['default'](inst);\n\ninst['default'] = inst;\n\nexports['default'] = inst;\nmodule.exports = exports['default'];\n\n\n},{\"./handlebars/base\":7,\"./handlebars/exception\":20,\"./handlebars/no-conflict\":30,\"./handlebars/runtime\":31,\"./handlebars/safe-string\":32,\"./handlebars/utils\":33}],7:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\nexports.HandlebarsEnvironment = HandlebarsEnvironment;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _utils = require('./utils');\n\nvar _exception = require('./exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nvar _helpers = require('./helpers');\n\nvar _decorators = require('./decorators');\n\nvar _logger = require('./logger');\n\nvar _logger2 = _interopRequireDefault(_logger);\n\nvar VERSION = '4.0.5';\nexports.VERSION = VERSION;\nvar COMPILER_REVISION = 7;\n\nexports.COMPILER_REVISION = COMPILER_REVISION;\nvar REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '== 1.x.x',\n  5: '== 2.0.0-alpha.x',\n  6: '>= 2.0.0-beta.1',\n  7: '>= 4.0.0'\n};\n\nexports.REVISION_CHANGES = REVISION_CHANGES;\nvar objectType = '[object Object]';\n\nfunction HandlebarsEnvironment(helpers, partials, decorators) {\n  this.helpers = helpers || {};\n  this.partials = partials || {};\n  this.decorators = decorators || {};\n\n  _helpers.registerDefaultHelpers(this);\n  _decorators.registerDefaultDecorators(this);\n}\n\nHandlebarsEnvironment.prototype = {\n  constructor: HandlebarsEnvironment,\n\n  logger: _logger2['default'],\n  log: _logger2['default'].log,\n\n  registerHelper: function registerHelper(name, fn) {\n    if (_utils.toString.call(name) === objectType) {\n      if (fn) {\n        throw new _exception2['default']('Arg not supported with multiple helpers');\n      }\n      _utils.extend(this.helpers, name);\n    } else {\n      this.helpers[name] = fn;\n    }\n  },\n  unregisterHelper: function unregisterHelper(name) {\n    delete this.helpers[name];\n  },\n\n  registerPartial: function registerPartial(name, partial) {\n    if (_utils.toString.call(name) === objectType) {\n      _utils.extend(this.partials, name);\n    } else {\n      if (typeof partial === 'undefined') {\n        throw new _exception2['default']('Attempting to register a partial called \"' + name + '\" as undefined');\n      }\n      this.partials[name] = partial;\n    }\n  },\n  unregisterPartial: function unregisterPartial(name) {\n    delete this.partials[name];\n  },\n\n  registerDecorator: function registerDecorator(name, fn) {\n    if (_utils.toString.call(name) === objectType) {\n      if (fn) {\n        throw new _exception2['default']('Arg not supported with multiple decorators');\n      }\n      _utils.extend(this.decorators, name);\n    } else {\n      this.decorators[name] = fn;\n    }\n  },\n  unregisterDecorator: function unregisterDecorator(name) {\n    delete this.decorators[name];\n  }\n};\n\nvar log = _logger2['default'].log;\n\nexports.log = log;\nexports.createFrame = _utils.createFrame;\nexports.logger = _logger2['default'];\n\n\n},{\"./decorators\":18,\"./exception\":20,\"./helpers\":21,\"./logger\":29,\"./utils\":33}],8:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\nvar AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function helperExpression(node) {\n      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);\n    },\n\n    scopedId: function scopedId(path) {\n      return (/^\\.|this\\b/.test(path.original)\n      );\n    },\n\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function simpleId(path) {\n      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;\n    }\n  }\n};\n\n// Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\nexports['default'] = AST;\nmodule.exports = exports['default'];\n\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\nexports.parse = parse;\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _parser = require('./parser');\n\nvar _parser2 = _interopRequireDefault(_parser);\n\nvar _whitespaceControl = require('./whitespace-control');\n\nvar _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);\n\nvar _helpers = require('./helpers');\n\nvar Helpers = _interopRequireWildcard(_helpers);\n\nvar _utils = require('../utils');\n\nexports.parser = _parser2['default'];\n\nvar yy = {};\n_utils.extend(yy, Helpers);\n\nfunction parse(input, options) {\n  // Just return if an already-compiled AST was passed in.\n  if (input.type === 'Program') {\n    return input;\n  }\n\n  _parser2['default'].yy = yy;\n\n  // Altering the shared object here, but this is ok as parser is a sync operation\n  yy.locInfo = function (locInfo) {\n    return new yy.SourceLocation(options && options.srcName, locInfo);\n  };\n\n  var strip = new _whitespaceControl2['default'](options);\n  return strip.accept(_parser2['default'].parse(input));\n}\n\n\n},{\"../utils\":33,\"./helpers\":12,\"./parser\":14,\"./whitespace-control\":17}],10:[function(require,module,exports){\n/* global define */\n'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nvar SourceNode = undefined;\n\ntry {\n  /* istanbul ignore next */\n  if (typeof define !== 'function' || !define.amd) {\n    // We don't support this in AMD environments. For these environments, we asusme that\n    // they are running on the browser and thus have no need for the source-map library.\n    var SourceMap = require('source-map');\n    SourceNode = SourceMap.SourceNode;\n  }\n} catch (err) {}\n/* NOP */\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\nif (!SourceNode) {\n  SourceNode = function (line, column, srcFile, chunks) {\n    this.src = '';\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n  SourceNode.prototype = {\n    add: function add(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src += chunks;\n    },\n    prepend: function prepend(chunks) {\n      if (_utils.isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function toStringWithSourceMap() {\n      return { code: this.toString() };\n    },\n    toString: function toString() {\n      return this.src;\n    }\n  };\n}\n\nfunction castChunk(chunk, codeGen, loc) {\n  if (_utils.isArray(chunk)) {\n    var ret = [];\n\n    for (var i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n  return chunk;\n}\n\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\n\nCodeGen.prototype = {\n  isEmpty: function isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function prepend(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function push(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n\n  merge: function merge() {\n    var source = this.empty();\n    this.each(function (line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n\n  each: function each(iter) {\n    for (var i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n\n  empty: function empty() {\n    var loc = this.currentLocation || { start: {} };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function wrap(chunk) {\n    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];\n\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n\n    chunk = castChunk(chunk, this, loc);\n\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);\n  },\n\n  functionCall: function functionCall(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n\n  quotedString: function quotedString(str) {\n    return '\"' + (str + '').replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\u2028/g, '\\\\u2028') // Per Ecma-262 7.3 + 7.8.4\n    .replace(/\\u2029/g, '\\\\u2029') + '\"';\n  },\n\n  objectLiteral: function objectLiteral(obj) {\n    var pairs = [];\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        var value = castChunk(obj[key], this);\n        if (value !== 'undefined') {\n          pairs.push([this.quotedString(key), ':', value]);\n        }\n      }\n    }\n\n    var ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n\n  generateList: function generateList(entries) {\n    var ret = this.empty();\n\n    for (var i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n\n      ret.add(castChunk(entries[i], this));\n    }\n\n    return ret;\n  },\n\n  generateArray: function generateArray(entries) {\n    var ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n\n    return ret;\n  }\n};\n\nexports['default'] = CodeGen;\nmodule.exports = exports['default'];\n\n\n},{\"../utils\":33,\"source-map\":46}],11:[function(require,module,exports){\n/* eslint-disable new-cap */\n\n'use strict';\n\nexports.__esModule = true;\nexports.Compiler = Compiler;\nexports.precompile = precompile;\nexports.compile = compile;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nvar _utils = require('../utils');\n\nvar _ast = require('./ast');\n\nvar _ast2 = _interopRequireDefault(_ast);\n\nvar slice = [].slice;\n\nfunction Compiler() {}\n\n// the foundHelper register will disambiguate helper lookup from finding a\n// function in a context. This is necessary for mustache compatibility, which\n// requires that context functions in blocks are evaluated by blockHelperMissing,\n// and then proceed as if the resulting value was provided to blockHelperMissing.\n\nCompiler.prototype = {\n  compiler: Compiler,\n\n  equals: function equals(other) {\n    var len = this.opcodes.length;\n    if (other.opcodes.length !== len) {\n      return false;\n    }\n\n    for (var i = 0; i < len; i++) {\n      var opcode = this.opcodes[i],\n          otherOpcode = other.opcodes[i];\n      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {\n        return false;\n      }\n    }\n\n    // We know that length is the same between the two arrays because they are directly tied\n    // to the opcode behavior above.\n    len = this.children.length;\n    for (var i = 0; i < len; i++) {\n      if (!this.children[i].equals(other.children[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  guid: 0,\n\n  compile: function compile(program, options) {\n    this.sourceNode = [];\n    this.opcodes = [];\n    this.children = [];\n    this.options = options;\n    this.stringParams = options.stringParams;\n    this.trackIds = options.trackIds;\n\n    options.blockParams = options.blockParams || [];\n\n    // These changes will propagate to the other compiler components\n    var knownHelpers = options.knownHelpers;\n    options.knownHelpers = {\n      'helperMissing': true,\n      'blockHelperMissing': true,\n      'each': true,\n      'if': true,\n      'unless': true,\n      'with': true,\n      'log': true,\n      'lookup': true\n    };\n    if (knownHelpers) {\n      for (var _name in knownHelpers) {\n        /* istanbul ignore else */\n        if (_name in knownHelpers) {\n          options.knownHelpers[_name] = knownHelpers[_name];\n        }\n      }\n    }\n\n    return this.accept(program);\n  },\n\n  compileProgram: function compileProgram(program) {\n    var childCompiler = new this.compiler(),\n        // eslint-disable-line new-cap\n    result = childCompiler.compile(program, this.options),\n        guid = this.guid++;\n\n    this.usePartial = this.usePartial || result.usePartial;\n\n    this.children[guid] = result;\n    this.useDepths = this.useDepths || result.useDepths;\n\n    return guid;\n  },\n\n  accept: function accept(node) {\n    /* istanbul ignore next: Sanity code */\n    if (!this[node.type]) {\n      throw new _exception2['default']('Unknown type: ' + node.type, node);\n    }\n\n    this.sourceNode.unshift(node);\n    var ret = this[node.type](node);\n    this.sourceNode.shift();\n    return ret;\n  },\n\n  Program: function Program(program) {\n    this.options.blockParams.unshift(program.blockParams);\n\n    var body = program.body,\n        bodyLength = body.length;\n    for (var i = 0; i < bodyLength; i++) {\n      this.accept(body[i]);\n    }\n\n    this.options.blockParams.shift();\n\n    this.isSimple = bodyLength === 1;\n    this.blockParams = program.blockParams ? program.blockParams.length : 0;\n\n    return this;\n  },\n\n  BlockStatement: function BlockStatement(block) {\n    transformLiteralToPath(block);\n\n    var program = block.program,\n        inverse = block.inverse;\n\n    program = program && this.compileProgram(program);\n    inverse = inverse && this.compileProgram(inverse);\n\n    var type = this.classifySexpr(block);\n\n    if (type === 'helper') {\n      this.helperSexpr(block, program, inverse);\n    } else if (type === 'simple') {\n      this.simpleSexpr(block);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('blockValue', block.path.original);\n    } else {\n      this.ambiguousSexpr(block, program, inverse);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('ambiguousBlockValue');\n    }\n\n    this.opcode('append');\n  },\n\n  DecoratorBlock: function DecoratorBlock(decorator) {\n    var program = decorator.program && this.compileProgram(decorator.program);\n    var params = this.setupFullMustacheParams(decorator, program, undefined),\n        path = decorator.path;\n\n    this.useDecorators = true;\n    this.opcode('registerDecorator', params.length, path.original);\n  },\n\n  PartialStatement: function PartialStatement(partial) {\n    this.usePartial = true;\n\n    var program = partial.program;\n    if (program) {\n      program = this.compileProgram(partial.program);\n    }\n\n    var params = partial.params;\n    if (params.length > 1) {\n      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);\n    } else if (!params.length) {\n      if (this.options.explicitPartialContext) {\n        this.opcode('pushLiteral', 'undefined');\n      } else {\n        params.push({ type: 'PathExpression', parts: [], depth: 0 });\n      }\n    }\n\n    var partialName = partial.name.original,\n        isDynamic = partial.name.type === 'SubExpression';\n    if (isDynamic) {\n      this.accept(partial.name);\n    }\n\n    this.setupFullMustacheParams(partial, program, undefined, true);\n\n    var indent = partial.indent || '';\n    if (this.options.preventIndent && indent) {\n      this.opcode('appendContent', indent);\n      indent = '';\n    }\n\n    this.opcode('invokePartial', isDynamic, partialName, indent);\n    this.opcode('append');\n  },\n  PartialBlockStatement: function PartialBlockStatement(partialBlock) {\n    this.PartialStatement(partialBlock);\n  },\n\n  MustacheStatement: function MustacheStatement(mustache) {\n    this.SubExpression(mustache);\n\n    if (mustache.escaped && !this.options.noEscape) {\n      this.opcode('appendEscaped');\n    } else {\n      this.opcode('append');\n    }\n  },\n  Decorator: function Decorator(decorator) {\n    this.DecoratorBlock(decorator);\n  },\n\n  ContentStatement: function ContentStatement(content) {\n    if (content.value) {\n      this.opcode('appendContent', content.value);\n    }\n  },\n\n  CommentStatement: function CommentStatement() {},\n\n  SubExpression: function SubExpression(sexpr) {\n    transformLiteralToPath(sexpr);\n    var type = this.classifySexpr(sexpr);\n\n    if (type === 'simple') {\n      this.simpleSexpr(sexpr);\n    } else if (type === 'helper') {\n      this.helperSexpr(sexpr);\n    } else {\n      this.ambiguousSexpr(sexpr);\n    }\n  },\n  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {\n    var path = sexpr.path,\n        name = path.parts[0],\n        isBlock = program != null || inverse != null;\n\n    this.opcode('getContext', path.depth);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    path.strict = true;\n    this.accept(path);\n\n    this.opcode('invokeAmbiguous', name, isBlock);\n  },\n\n  simpleSexpr: function simpleSexpr(sexpr) {\n    var path = sexpr.path;\n    path.strict = true;\n    this.accept(path);\n    this.opcode('resolvePossibleLambda');\n  },\n\n  helperSexpr: function helperSexpr(sexpr, program, inverse) {\n    var params = this.setupFullMustacheParams(sexpr, program, inverse),\n        path = sexpr.path,\n        name = path.parts[0];\n\n    if (this.options.knownHelpers[name]) {\n      this.opcode('invokeKnownHelper', params.length, name);\n    } else if (this.options.knownHelpersOnly) {\n      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);\n    } else {\n      path.strict = true;\n      path.falsy = true;\n\n      this.accept(path);\n      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));\n    }\n  },\n\n  PathExpression: function PathExpression(path) {\n    this.addDepth(path.depth);\n    this.opcode('getContext', path.depth);\n\n    var name = path.parts[0],\n        scoped = _ast2['default'].helpers.scopedId(path),\n        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);\n\n    if (blockParamId) {\n      this.opcode('lookupBlockParam', blockParamId, path.parts);\n    } else if (!name) {\n      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`\n      this.opcode('pushContext');\n    } else if (path.data) {\n      this.options.data = true;\n      this.opcode('lookupData', path.depth, path.parts, path.strict);\n    } else {\n      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);\n    }\n  },\n\n  StringLiteral: function StringLiteral(string) {\n    this.opcode('pushString', string.value);\n  },\n\n  NumberLiteral: function NumberLiteral(number) {\n    this.opcode('pushLiteral', number.value);\n  },\n\n  BooleanLiteral: function BooleanLiteral(bool) {\n    this.opcode('pushLiteral', bool.value);\n  },\n\n  UndefinedLiteral: function UndefinedLiteral() {\n    this.opcode('pushLiteral', 'undefined');\n  },\n\n  NullLiteral: function NullLiteral() {\n    this.opcode('pushLiteral', 'null');\n  },\n\n  Hash: function Hash(hash) {\n    var pairs = hash.pairs,\n        i = 0,\n        l = pairs.length;\n\n    this.opcode('pushHash');\n\n    for (; i < l; i++) {\n      this.pushParam(pairs[i].value);\n    }\n    while (i--) {\n      this.opcode('assignToHash', pairs[i].key);\n    }\n    this.opcode('popHash');\n  },\n\n  // HELPERS\n  opcode: function opcode(name) {\n    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });\n  },\n\n  addDepth: function addDepth(depth) {\n    if (!depth) {\n      return;\n    }\n\n    this.useDepths = true;\n  },\n\n  classifySexpr: function classifySexpr(sexpr) {\n    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);\n\n    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);\n\n    // a mustache is an eligible helper if:\n    // * its id is simple (a single part, not `this` or `..`)\n    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);\n\n    // if a mustache is an eligible helper but not a definite\n    // helper, it is ambiguous, and will be resolved in a later\n    // pass or at runtime.\n    var isEligible = !isBlockParam && (isHelper || isSimple);\n\n    // if ambiguous, we can possibly resolve the ambiguity now\n    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.\n    if (isEligible && !isHelper) {\n      var _name2 = sexpr.path.parts[0],\n          options = this.options;\n\n      if (options.knownHelpers[_name2]) {\n        isHelper = true;\n      } else if (options.knownHelpersOnly) {\n        isEligible = false;\n      }\n    }\n\n    if (isHelper) {\n      return 'helper';\n    } else if (isEligible) {\n      return 'ambiguous';\n    } else {\n      return 'simple';\n    }\n  },\n\n  pushParams: function pushParams(params) {\n    for (var i = 0, l = params.length; i < l; i++) {\n      this.pushParam(params[i]);\n    }\n  },\n\n  pushParam: function pushParam(val) {\n    var value = val.value != null ? val.value : val.original || '';\n\n    if (this.stringParams) {\n      if (value.replace) {\n        value = value.replace(/^(\\.?\\.\\/)*/g, '').replace(/\\//g, '.');\n      }\n\n      if (val.depth) {\n        this.addDepth(val.depth);\n      }\n      this.opcode('getContext', val.depth || 0);\n      this.opcode('pushStringParam', value, val.type);\n\n      if (val.type === 'SubExpression') {\n        // SubExpressions get evaluated and passed in\n        // in string params mode.\n        this.accept(val);\n      }\n    } else {\n      if (this.trackIds) {\n        var blockParamIndex = undefined;\n        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {\n          blockParamIndex = this.blockParamIndex(val.parts[0]);\n        }\n        if (blockParamIndex) {\n          var blockParamChild = val.parts.slice(1).join('.');\n          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);\n        } else {\n          value = val.original || value;\n          if (value.replace) {\n            value = value.replace(/^this(?:\\.|$)/, '').replace(/^\\.\\//, '').replace(/^\\.$/, '');\n          }\n\n          this.opcode('pushId', val.type, value);\n        }\n      }\n      this.accept(val);\n    }\n  },\n\n  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {\n    var params = sexpr.params;\n    this.pushParams(params);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    if (sexpr.hash) {\n      this.accept(sexpr.hash);\n    } else {\n      this.opcode('emptyHash', omitEmpty);\n    }\n\n    return params;\n  },\n\n  blockParamIndex: function blockParamIndex(name) {\n    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {\n      var blockParams = this.options.blockParams[depth],\n          param = blockParams && _utils.indexOf(blockParams, name);\n      if (blockParams && param >= 0) {\n        return [depth, param];\n      }\n    }\n  }\n};\n\nfunction precompile(input, options, env) {\n  if (input == null || typeof input !== 'string' && input.type !== 'Program') {\n    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);\n  }\n\n  options = options || {};\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  var ast = env.parse(input, options),\n      environment = new env.Compiler().compile(ast, options);\n  return new env.JavaScriptCompiler().compile(environment, options);\n}\n\nfunction compile(input, options, env) {\n  if (options === undefined) options = {};\n\n  if (input == null || typeof input !== 'string' && input.type !== 'Program') {\n    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);\n  }\n\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  var compiled = undefined;\n\n  function compileInput() {\n    var ast = env.parse(input, options),\n        environment = new env.Compiler().compile(ast, options),\n        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);\n    return env.template(templateSpec);\n  }\n\n  // Template is only compiled on first use and cached after that point.\n  function ret(context, execOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled.call(this, context, execOptions);\n  }\n  ret._setup = function (setupOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._setup(setupOptions);\n  };\n  ret._child = function (i, data, blockParams, depths) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._child(i, data, blockParams, depths);\n  };\n  return ret;\n}\n\nfunction argEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {\n    for (var i = 0; i < a.length; i++) {\n      if (!argEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction transformLiteralToPath(sexpr) {\n  if (!sexpr.path.parts) {\n    var literal = sexpr.path;\n    // Casting to string here to make false and 0 literal values play nicely with the rest\n    // of the system.\n    sexpr.path = {\n      type: 'PathExpression',\n      data: false,\n      depth: 0,\n      parts: [literal.original + ''],\n      original: literal.original + '',\n      loc: literal.loc\n    };\n  }\n}\n\n\n},{\"../exception\":20,\"../utils\":33,\"./ast\":8}],12:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\nexports.SourceLocation = SourceLocation;\nexports.id = id;\nexports.stripFlags = stripFlags;\nexports.stripComment = stripComment;\nexports.preparePath = preparePath;\nexports.prepareMustache = prepareMustache;\nexports.prepareRawBlock = prepareRawBlock;\nexports.prepareBlock = prepareBlock;\nexports.prepareProgram = prepareProgram;\nexports.preparePartialBlock = preparePartialBlock;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nfunction validateClose(open, close) {\n  close = close.path ? close.path.original : close;\n\n  if (open.path.original !== close) {\n    var errorNode = { loc: open.path.loc };\n\n    throw new _exception2['default'](open.path.original + \" doesn't match \" + close, errorNode);\n  }\n}\n\nfunction SourceLocation(source, locInfo) {\n  this.source = source;\n  this.start = {\n    line: locInfo.first_line,\n    column: locInfo.first_column\n  };\n  this.end = {\n    line: locInfo.last_line,\n    column: locInfo.last_column\n  };\n}\n\nfunction id(token) {\n  if (/^\\[.*\\]$/.test(token)) {\n    return token.substr(1, token.length - 2);\n  } else {\n    return token;\n  }\n}\n\nfunction stripFlags(open, close) {\n  return {\n    open: open.charAt(2) === '~',\n    close: close.charAt(close.length - 3) === '~'\n  };\n}\n\nfunction stripComment(comment) {\n  return comment.replace(/^\\{\\{~?\\!-?-?/, '').replace(/-?-?~?\\}\\}$/, '');\n}\n\nfunction preparePath(data, parts, loc) {\n  loc = this.locInfo(loc);\n\n  var original = data ? '@' : '',\n      dig = [],\n      depth = 0,\n      depthString = '';\n\n  for (var i = 0, l = parts.length; i < l; i++) {\n    var part = parts[i].part,\n\n    // If we have [] syntax then we do not treat path references as operators,\n    // i.e. foo.[this] resolves to approximately context.foo['this']\n    isLiteral = parts[i].original !== part;\n    original += (parts[i].separator || '') + part;\n\n    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {\n      if (dig.length > 0) {\n        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });\n      } else if (part === '..') {\n        depth++;\n        depthString += '../';\n      }\n    } else {\n      dig.push(part);\n    }\n  }\n\n  return {\n    type: 'PathExpression',\n    data: data,\n    depth: depth,\n    parts: dig,\n    original: original,\n    loc: loc\n  };\n}\n\nfunction prepareMustache(path, params, hash, open, strip, locInfo) {\n  // Must use charAt to support IE pre-10\n  var escapeFlag = open.charAt(3) || open.charAt(2),\n      escaped = escapeFlag !== '{' && escapeFlag !== '&';\n\n  var decorator = /\\*/.test(open);\n  return {\n    type: decorator ? 'Decorator' : 'MustacheStatement',\n    path: path,\n    params: params,\n    hash: hash,\n    escaped: escaped,\n    strip: strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\nfunction prepareRawBlock(openRawBlock, contents, close, locInfo) {\n  validateClose(openRawBlock, close);\n\n  locInfo = this.locInfo(locInfo);\n  var program = {\n    type: 'Program',\n    body: contents,\n    strip: {},\n    loc: locInfo\n  };\n\n  return {\n    type: 'BlockStatement',\n    path: openRawBlock.path,\n    params: openRawBlock.params,\n    hash: openRawBlock.hash,\n    program: program,\n    openStrip: {},\n    inverseStrip: {},\n    closeStrip: {},\n    loc: locInfo\n  };\n}\n\nfunction prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {\n  if (close && close.path) {\n    validateClose(openBlock, close);\n  }\n\n  var decorator = /\\*/.test(openBlock.open);\n\n  program.blockParams = openBlock.blockParams;\n\n  var inverse = undefined,\n      inverseStrip = undefined;\n\n  if (inverseAndProgram) {\n    if (decorator) {\n      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);\n    }\n\n    if (inverseAndProgram.chain) {\n      inverseAndProgram.program.body[0].closeStrip = close.strip;\n    }\n\n    inverseStrip = inverseAndProgram.strip;\n    inverse = inverseAndProgram.program;\n  }\n\n  if (inverted) {\n    inverted = inverse;\n    inverse = program;\n    program = inverted;\n  }\n\n  return {\n    type: decorator ? 'DecoratorBlock' : 'BlockStatement',\n    path: openBlock.path,\n    params: openBlock.params,\n    hash: openBlock.hash,\n    program: program,\n    inverse: inverse,\n    openStrip: openBlock.strip,\n    inverseStrip: inverseStrip,\n    closeStrip: close && close.strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\nfunction prepareProgram(statements, loc) {\n  if (!loc && statements.length) {\n    var firstLoc = statements[0].loc,\n        lastLoc = statements[statements.length - 1].loc;\n\n    /* istanbul ignore else */\n    if (firstLoc && lastLoc) {\n      loc = {\n        source: firstLoc.source,\n        start: {\n          line: firstLoc.start.line,\n          column: firstLoc.start.column\n        },\n        end: {\n          line: lastLoc.end.line,\n          column: lastLoc.end.column\n        }\n      };\n    }\n  }\n\n  return {\n    type: 'Program',\n    body: statements,\n    strip: {},\n    loc: loc\n  };\n}\n\nfunction preparePartialBlock(open, program, close, locInfo) {\n  validateClose(open, close);\n\n  return {\n    type: 'PartialBlockStatement',\n    name: open.path,\n    params: open.params,\n    hash: open.hash,\n    program: program,\n    openStrip: open.strip,\n    closeStrip: close && close.strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\n\n},{\"../exception\":20}],13:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _base = require('../base');\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nvar _utils = require('../utils');\n\nvar _codeGen = require('./code-gen');\n\nvar _codeGen2 = _interopRequireDefault(_codeGen);\n\nfunction Literal(value) {\n  this.value = value;\n}\n\nfunction JavaScriptCompiler() {}\n\nJavaScriptCompiler.prototype = {\n  // PUBLIC API: You can override these methods in a subclass to provide\n  // alternative compiled forms for name lookup and buffering semantics\n  nameLookup: function nameLookup(parent, name /* , type*/) {\n    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {\n      return [parent, '.', name];\n    } else {\n      return [parent, '[', JSON.stringify(name), ']'];\n    }\n  },\n  depthedLookup: function depthedLookup(name) {\n    return [this.aliasable('container.lookup'), '(depths, \"', name, '\")'];\n  },\n\n  compilerInfo: function compilerInfo() {\n    var revision = _base.COMPILER_REVISION,\n        versions = _base.REVISION_CHANGES[revision];\n    return [revision, versions];\n  },\n\n  appendToBuffer: function appendToBuffer(source, location, explicit) {\n    // Force a source as this simplifies the merge logic.\n    if (!_utils.isArray(source)) {\n      source = [source];\n    }\n    source = this.source.wrap(source, location);\n\n    if (this.environment.isSimple) {\n      return ['return ', source, ';'];\n    } else if (explicit) {\n      // This is a case where the buffer operation occurs as a child of another\n      // construct, generally braces. We have to explicitly output these buffer\n      // operations to ensure that the emitted code goes in the correct location.\n      return ['buffer += ', source, ';'];\n    } else {\n      source.appendToBuffer = true;\n      return source;\n    }\n  },\n\n  initializeBuffer: function initializeBuffer() {\n    return this.quotedString('');\n  },\n  // END PUBLIC API\n\n  compile: function compile(environment, options, context, asObject) {\n    this.environment = environment;\n    this.options = options;\n    this.stringParams = this.options.stringParams;\n    this.trackIds = this.options.trackIds;\n    this.precompile = !asObject;\n\n    this.name = this.environment.name;\n    this.isChild = !!context;\n    this.context = context || {\n      decorators: [],\n      programs: [],\n      environments: []\n    };\n\n    this.preamble();\n\n    this.stackSlot = 0;\n    this.stackVars = [];\n    this.aliases = {};\n    this.registers = { list: [] };\n    this.hashes = [];\n    this.compileStack = [];\n    this.inlineStack = [];\n    this.blockParams = [];\n\n    this.compileChildren(environment, options);\n\n    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;\n    this.useBlockParams = this.useBlockParams || environment.useBlockParams;\n\n    var opcodes = environment.opcodes,\n        opcode = undefined,\n        firstLoc = undefined,\n        i = undefined,\n        l = undefined;\n\n    for (i = 0, l = opcodes.length; i < l; i++) {\n      opcode = opcodes[i];\n\n      this.source.currentLocation = opcode.loc;\n      firstLoc = firstLoc || opcode.loc;\n      this[opcode.opcode].apply(this, opcode.args);\n    }\n\n    // Flush any trailing content that might be pending.\n    this.source.currentLocation = firstLoc;\n    this.pushSource('');\n\n    /* istanbul ignore next */\n    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {\n      throw new _exception2['default']('Compile completed with content left on stack');\n    }\n\n    if (!this.decorators.isEmpty()) {\n      this.useDecorators = true;\n\n      this.decorators.prepend('var decorators = container.decorators;\\n');\n      this.decorators.push('return fn;');\n\n      if (asObject) {\n        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);\n      } else {\n        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\\n');\n        this.decorators.push('}\\n');\n        this.decorators = this.decorators.merge();\n      }\n    } else {\n      this.decorators = undefined;\n    }\n\n    var fn = this.createFunctionContext(asObject);\n    if (!this.isChild) {\n      var ret = {\n        compiler: this.compilerInfo(),\n        main: fn\n      };\n\n      if (this.decorators) {\n        ret.main_d = this.decorators; // eslint-disable-line camelcase\n        ret.useDecorators = true;\n      }\n\n      var _context = this.context;\n      var programs = _context.programs;\n      var decorators = _context.decorators;\n\n      for (i = 0, l = programs.length; i < l; i++) {\n        if (programs[i]) {\n          ret[i] = programs[i];\n          if (decorators[i]) {\n            ret[i + '_d'] = decorators[i];\n            ret.useDecorators = true;\n          }\n        }\n      }\n\n      if (this.environment.usePartial) {\n        ret.usePartial = true;\n      }\n      if (this.options.data) {\n        ret.useData = true;\n      }\n      if (this.useDepths) {\n        ret.useDepths = true;\n      }\n      if (this.useBlockParams) {\n        ret.useBlockParams = true;\n      }\n      if (this.options.compat) {\n        ret.compat = true;\n      }\n\n      if (!asObject) {\n        ret.compiler = JSON.stringify(ret.compiler);\n\n        this.source.currentLocation = { start: { line: 1, column: 0 } };\n        ret = this.objectLiteral(ret);\n\n        if (options.srcName) {\n          ret = ret.toStringWithSourceMap({ file: options.destName });\n          ret.map = ret.map && ret.map.toString();\n        } else {\n          ret = ret.toString();\n        }\n      } else {\n        ret.compilerOptions = this.options;\n      }\n\n      return ret;\n    } else {\n      return fn;\n    }\n  },\n\n  preamble: function preamble() {\n    // track the last context pushed into place to allow skipping the\n    // getContext opcode when it would be a noop\n    this.lastContext = 0;\n    this.source = new _codeGen2['default'](this.options.srcName);\n    this.decorators = new _codeGen2['default'](this.options.srcName);\n  },\n\n  createFunctionContext: function createFunctionContext(asObject) {\n    var varDeclarations = '';\n\n    var locals = this.stackVars.concat(this.registers.list);\n    if (locals.length > 0) {\n      varDeclarations += ', ' + locals.join(', ');\n    }\n\n    // Generate minimizer alias mappings\n    //\n    // When using true SourceNodes, this will update all references to the given alias\n    // as the source nodes are reused in situ. For the non-source node compilation mode,\n    // aliases will not be used, but this case is already being run on the client and\n    // we aren't concern about minimizing the template size.\n    var aliasCount = 0;\n    for (var alias in this.aliases) {\n      // eslint-disable-line guard-for-in\n      var node = this.aliases[alias];\n\n      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {\n        varDeclarations += ', alias' + ++aliasCount + '=' + alias;\n        node.children[0] = 'alias' + aliasCount;\n      }\n    }\n\n    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];\n\n    if (this.useBlockParams || this.useDepths) {\n      params.push('blockParams');\n    }\n    if (this.useDepths) {\n      params.push('depths');\n    }\n\n    // Perform a second pass over the output to merge content when possible\n    var source = this.mergeSource(varDeclarations);\n\n    if (asObject) {\n      params.push(source);\n\n      return Function.apply(this, params);\n    } else {\n      return this.source.wrap(['function(', params.join(','), ') {\\n  ', source, '}']);\n    }\n  },\n  mergeSource: function mergeSource(varDeclarations) {\n    var isSimple = this.environment.isSimple,\n        appendOnly = !this.forceBuffer,\n        appendFirst = undefined,\n        sourceSeen = undefined,\n        bufferStart = undefined,\n        bufferEnd = undefined;\n    this.source.each(function (line) {\n      if (line.appendToBuffer) {\n        if (bufferStart) {\n          line.prepend('  + ');\n        } else {\n          bufferStart = line;\n        }\n        bufferEnd = line;\n      } else {\n        if (bufferStart) {\n          if (!sourceSeen) {\n            appendFirst = true;\n          } else {\n            bufferStart.prepend('buffer += ');\n          }\n          bufferEnd.add(';');\n          bufferStart = bufferEnd = undefined;\n        }\n\n        sourceSeen = true;\n        if (!isSimple) {\n          appendOnly = false;\n        }\n      }\n    });\n\n    if (appendOnly) {\n      if (bufferStart) {\n        bufferStart.prepend('return ');\n        bufferEnd.add(';');\n      } else if (!sourceSeen) {\n        this.source.push('return \"\";');\n      }\n    } else {\n      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());\n\n      if (bufferStart) {\n        bufferStart.prepend('return buffer + ');\n        bufferEnd.add(';');\n      } else {\n        this.source.push('return buffer;');\n      }\n    }\n\n    if (varDeclarations) {\n      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\\n'));\n    }\n\n    return this.source.merge();\n  },\n\n  // [blockValue]\n  //\n  // On stack, before: hash, inverse, program, value\n  // On stack, after: return value of blockHelperMissing\n  //\n  // The purpose of this opcode is to take a block of the form\n  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and\n  // replace it on the stack with the result of properly\n  // invoking blockHelperMissing.\n  blockValue: function blockValue(name) {\n    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),\n        params = [this.contextName(0)];\n    this.setupHelperArgs(name, 0, params);\n\n    var blockName = this.popStack();\n    params.splice(1, 0, blockName);\n\n    this.push(this.source.functionCall(blockHelperMissing, 'call', params));\n  },\n\n  // [ambiguousBlockValue]\n  //\n  // On stack, before: hash, inverse, program, value\n  // Compiler value, before: lastHelper=value of last found helper, if any\n  // On stack, after, if no lastHelper: same as [blockValue]\n  // On stack, after, if lastHelper: value\n  ambiguousBlockValue: function ambiguousBlockValue() {\n    // We're being a bit cheeky and reusing the options value from the prior exec\n    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),\n        params = [this.contextName(0)];\n    this.setupHelperArgs('', 0, params, true);\n\n    this.flushInline();\n\n    var current = this.topStack();\n    params.splice(1, 0, current);\n\n    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);\n  },\n\n  // [appendContent]\n  //\n  // On stack, before: ...\n  // On stack, after: ...\n  //\n  // Appends the string value of `content` to the current buffer\n  appendContent: function appendContent(content) {\n    if (this.pendingContent) {\n      content = this.pendingContent + content;\n    } else {\n      this.pendingLocation = this.source.currentLocation;\n    }\n\n    this.pendingContent = content;\n  },\n\n  // [append]\n  //\n  // On stack, before: value, ...\n  // On stack, after: ...\n  //\n  // Coerces `value` to a String and appends it to the current buffer.\n  //\n  // If `value` is truthy, or 0, it is coerced into a string and appended\n  // Otherwise, the empty string is appended\n  append: function append() {\n    if (this.isInline()) {\n      this.replaceStack(function (current) {\n        return [' != null ? ', current, ' : \"\"'];\n      });\n\n      this.pushSource(this.appendToBuffer(this.popStack()));\n    } else {\n      var local = this.popStack();\n      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);\n      if (this.environment.isSimple) {\n        this.pushSource(['else { ', this.appendToBuffer(\"''\", undefined, true), ' }']);\n      }\n    }\n  },\n\n  // [appendEscaped]\n  //\n  // On stack, before: value, ...\n  // On stack, after: ...\n  //\n  // Escape `value` and append it to the buffer\n  appendEscaped: function appendEscaped() {\n    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));\n  },\n\n  // [getContext]\n  //\n  // On stack, before: ...\n  // On stack, after: ...\n  // Compiler value, after: lastContext=depth\n  //\n  // Set the value of the `lastContext` compiler value to the depth\n  getContext: function getContext(depth) {\n    this.lastContext = depth;\n  },\n\n  // [pushContext]\n  //\n  // On stack, before: ...\n  // On stack, after: currentContext, ...\n  //\n  // Pushes the value of the current context onto the stack.\n  pushContext: function pushContext() {\n    this.pushStackLiteral(this.contextName(this.lastContext));\n  },\n\n  // [lookupOnContext]\n  //\n  // On stack, before: ...\n  // On stack, after: currentContext[name], ...\n  //\n  // Looks up the value of `name` on the current context and pushes\n  // it onto the stack.\n  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {\n    var i = 0;\n\n    if (!scoped && this.options.compat && !this.lastContext) {\n      // The depthed query is expected to handle the undefined logic for the root level that\n      // is implemented below, so we evaluate that directly in compat mode\n      this.push(this.depthedLookup(parts[i++]));\n    } else {\n      this.pushContext();\n    }\n\n    this.resolvePath('context', parts, i, falsy, strict);\n  },\n\n  // [lookupBlockParam]\n  //\n  // On stack, before: ...\n  // On stack, after: blockParam[name], ...\n  //\n  // Looks up the value of `parts` on the given block param and pushes\n  // it onto the stack.\n  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {\n    this.useBlockParams = true;\n\n    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);\n    this.resolvePath('context', parts, 1);\n  },\n\n  // [lookupData]\n  //\n  // On stack, before: ...\n  // On stack, after: data, ...\n  //\n  // Push the data lookup operator\n  lookupData: function lookupData(depth, parts, strict) {\n    if (!depth) {\n      this.pushStackLiteral('data');\n    } else {\n      this.pushStackLiteral('container.data(data, ' + depth + ')');\n    }\n\n    this.resolvePath('data', parts, 0, true, strict);\n  },\n\n  resolvePath: function resolvePath(type, parts, i, falsy, strict) {\n    // istanbul ignore next\n\n    var _this = this;\n\n    if (this.options.strict || this.options.assumeObjects) {\n      this.push(strictLookup(this.options.strict && strict, this, parts, type));\n      return;\n    }\n\n    var len = parts.length;\n    for (; i < len; i++) {\n      /* eslint-disable no-loop-func */\n      this.replaceStack(function (current) {\n        var lookup = _this.nameLookup(current, parts[i], type);\n        // We want to ensure that zero and false are handled properly if the context (falsy flag)\n        // needs to have the special handling for these values.\n        if (!falsy) {\n          return [' != null ? ', lookup, ' : ', current];\n        } else {\n          // Otherwise we can use generic falsy handling\n          return [' && ', lookup];\n        }\n      });\n      /* eslint-enable no-loop-func */\n    }\n  },\n\n  // [resolvePossibleLambda]\n  //\n  // On stack, before: value, ...\n  // On stack, after: resolved value, ...\n  //\n  // If the `value` is a lambda, replace it on the stack by\n  // the return value of the lambda\n  resolvePossibleLambda: function resolvePossibleLambda() {\n    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);\n  },\n\n  // [pushStringParam]\n  //\n  // On stack, before: ...\n  // On stack, after: string, currentContext, ...\n  //\n  // This opcode is designed for use in string mode, which\n  // provides the string value of a parameter along with its\n  // depth rather than resolving it immediately.\n  pushStringParam: function pushStringParam(string, type) {\n    this.pushContext();\n    this.pushString(type);\n\n    // If it's a subexpression, the string result\n    // will be pushed after this opcode.\n    if (type !== 'SubExpression') {\n      if (typeof string === 'string') {\n        this.pushString(string);\n      } else {\n        this.pushStackLiteral(string);\n      }\n    }\n  },\n\n  emptyHash: function emptyHash(omitEmpty) {\n    if (this.trackIds) {\n      this.push('{}'); // hashIds\n    }\n    if (this.stringParams) {\n      this.push('{}'); // hashContexts\n      this.push('{}'); // hashTypes\n    }\n    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');\n  },\n  pushHash: function pushHash() {\n    if (this.hash) {\n      this.hashes.push(this.hash);\n    }\n    this.hash = { values: [], types: [], contexts: [], ids: [] };\n  },\n  popHash: function popHash() {\n    var hash = this.hash;\n    this.hash = this.hashes.pop();\n\n    if (this.trackIds) {\n      this.push(this.objectLiteral(hash.ids));\n    }\n    if (this.stringParams) {\n      this.push(this.objectLiteral(hash.contexts));\n      this.push(this.objectLiteral(hash.types));\n    }\n\n    this.push(this.objectLiteral(hash.values));\n  },\n\n  // [pushString]\n  //\n  // On stack, before: ...\n  // On stack, after: quotedString(string), ...\n  //\n  // Push a quoted version of `string` onto the stack\n  pushString: function pushString(string) {\n    this.pushStackLiteral(this.quotedString(string));\n  },\n\n  // [pushLiteral]\n  //\n  // On stack, before: ...\n  // On stack, after: value, ...\n  //\n  // Pushes a value onto the stack. This operation prevents\n  // the compiler from creating a temporary variable to hold\n  // it.\n  pushLiteral: function pushLiteral(value) {\n    this.pushStackLiteral(value);\n  },\n\n  // [pushProgram]\n  //\n  // On stack, before: ...\n  // On stack, after: program(guid), ...\n  //\n  // Push a program expression onto the stack. This takes\n  // a compile-time guid and converts it into a runtime-accessible\n  // expression.\n  pushProgram: function pushProgram(guid) {\n    if (guid != null) {\n      this.pushStackLiteral(this.programExpression(guid));\n    } else {\n      this.pushStackLiteral(null);\n    }\n  },\n\n  // [registerDecorator]\n  //\n  // On stack, before: hash, program, params..., ...\n  // On stack, after: ...\n  //\n  // Pops off the decorator's parameters, invokes the decorator,\n  // and inserts the decorator into the decorators list.\n  registerDecorator: function registerDecorator(paramSize, name) {\n    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),\n        options = this.setupHelperArgs(name, paramSize);\n\n    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);\n  },\n\n  // [invokeHelper]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of helper invocation\n  //\n  // Pops off the helper's parameters, invokes the helper,\n  // and pushes the helper's return value onto the stack.\n  //\n  // If the helper is not found, `helperMissing` is called.\n  invokeHelper: function invokeHelper(paramSize, name, isSimple) {\n    var nonHelper = this.popStack(),\n        helper = this.setupHelper(paramSize, name),\n        simple = isSimple ? [helper.name, ' || '] : '';\n\n    var lookup = ['('].concat(simple, nonHelper);\n    if (!this.options.strict) {\n      lookup.push(' || ', this.aliasable('helpers.helperMissing'));\n    }\n    lookup.push(')');\n\n    this.push(this.source.functionCall(lookup, 'call', helper.callParams));\n  },\n\n  // [invokeKnownHelper]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of helper invocation\n  //\n  // This operation is used when the helper is known to exist,\n  // so a `helperMissing` fallback is not required.\n  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {\n    var helper = this.setupHelper(paramSize, name);\n    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));\n  },\n\n  // [invokeAmbiguous]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of disambiguation\n  //\n  // This operation is used when an expression like `{{foo}}`\n  // is provided, but we don't know at compile-time whether it\n  // is a helper or a path.\n  //\n  // This operation emits more code than the other options,\n  // and can be avoided by passing the `knownHelpers` and\n  // `knownHelpersOnly` flags at compile-time.\n  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {\n    this.useRegister('helper');\n\n    var nonHelper = this.popStack();\n\n    this.emptyHash();\n    var helper = this.setupHelper(0, name, helperCall);\n\n    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');\n\n    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];\n    if (!this.options.strict) {\n      lookup[0] = '(helper = ';\n      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));\n    }\n\n    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('\"function\"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);\n  },\n\n  // [invokePartial]\n  //\n  // On stack, before: context, ...\n  // On stack after: result of partial invocation\n  //\n  // This operation pops off a context, invokes a partial with that context,\n  // and pushes the result of the invocation back.\n  invokePartial: function invokePartial(isDynamic, name, indent) {\n    var params = [],\n        options = this.setupParams(name, 1, params);\n\n    if (isDynamic) {\n      name = this.popStack();\n      delete options.name;\n    }\n\n    if (indent) {\n      options.indent = JSON.stringify(indent);\n    }\n    options.helpers = 'helpers';\n    options.partials = 'partials';\n    options.decorators = 'container.decorators';\n\n    if (!isDynamic) {\n      params.unshift(this.nameLookup('partials', name, 'partial'));\n    } else {\n      params.unshift(name);\n    }\n\n    if (this.options.compat) {\n      options.depths = 'depths';\n    }\n    options = this.objectLiteral(options);\n    params.push(options);\n\n    this.push(this.source.functionCall('container.invokePartial', '', params));\n  },\n\n  // [assignToHash]\n  //\n  // On stack, before: value, ..., hash, ...\n  // On stack, after: ..., hash, ...\n  //\n  // Pops a value off the stack and assigns it to the current hash\n  assignToHash: function assignToHash(key) {\n    var value = this.popStack(),\n        context = undefined,\n        type = undefined,\n        id = undefined;\n\n    if (this.trackIds) {\n      id = this.popStack();\n    }\n    if (this.stringParams) {\n      type = this.popStack();\n      context = this.popStack();\n    }\n\n    var hash = this.hash;\n    if (context) {\n      hash.contexts[key] = context;\n    }\n    if (type) {\n      hash.types[key] = type;\n    }\n    if (id) {\n      hash.ids[key] = id;\n    }\n    hash.values[key] = value;\n  },\n\n  pushId: function pushId(type, name, child) {\n    if (type === 'BlockParam') {\n      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));\n    } else if (type === 'PathExpression') {\n      this.pushString(name);\n    } else if (type === 'SubExpression') {\n      this.pushStackLiteral('true');\n    } else {\n      this.pushStackLiteral('null');\n    }\n  },\n\n  // HELPERS\n\n  compiler: JavaScriptCompiler,\n\n  compileChildren: function compileChildren(environment, options) {\n    var children = environment.children,\n        child = undefined,\n        compiler = undefined;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      child = children[i];\n      compiler = new this.compiler(); // eslint-disable-line new-cap\n\n      var existing = this.matchExistingProgram(child);\n\n      if (existing == null) {\n        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children\n        var index = this.context.programs.length;\n        child.index = index;\n        child.name = 'program' + index;\n        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);\n        this.context.decorators[index] = compiler.decorators;\n        this.context.environments[index] = child;\n\n        this.useDepths = this.useDepths || compiler.useDepths;\n        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;\n        child.useDepths = this.useDepths;\n        child.useBlockParams = this.useBlockParams;\n      } else {\n        child.index = existing.index;\n        child.name = 'program' + existing.index;\n\n        this.useDepths = this.useDepths || existing.useDepths;\n        this.useBlockParams = this.useBlockParams || existing.useBlockParams;\n      }\n    }\n  },\n  matchExistingProgram: function matchExistingProgram(child) {\n    for (var i = 0, len = this.context.environments.length; i < len; i++) {\n      var environment = this.context.environments[i];\n      if (environment && environment.equals(child)) {\n        return environment;\n      }\n    }\n  },\n\n  programExpression: function programExpression(guid) {\n    var child = this.environment.children[guid],\n        programParams = [child.index, 'data', child.blockParams];\n\n    if (this.useBlockParams || this.useDepths) {\n      programParams.push('blockParams');\n    }\n    if (this.useDepths) {\n      programParams.push('depths');\n    }\n\n    return 'container.program(' + programParams.join(', ') + ')';\n  },\n\n  useRegister: function useRegister(name) {\n    if (!this.registers[name]) {\n      this.registers[name] = true;\n      this.registers.list.push(name);\n    }\n  },\n\n  push: function push(expr) {\n    if (!(expr instanceof Literal)) {\n      expr = this.source.wrap(expr);\n    }\n\n    this.inlineStack.push(expr);\n    return expr;\n  },\n\n  pushStackLiteral: function pushStackLiteral(item) {\n    this.push(new Literal(item));\n  },\n\n  pushSource: function pushSource(source) {\n    if (this.pendingContent) {\n      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));\n      this.pendingContent = undefined;\n    }\n\n    if (source) {\n      this.source.push(source);\n    }\n  },\n\n  replaceStack: function replaceStack(callback) {\n    var prefix = ['('],\n        stack = undefined,\n        createdStack = undefined,\n        usedLiteral = undefined;\n\n    /* istanbul ignore next */\n    if (!this.isInline()) {\n      throw new _exception2['default']('replaceStack on non-inline');\n    }\n\n    // We want to merge the inline statement into the replacement statement via ','\n    var top = this.popStack(true);\n\n    if (top instanceof Literal) {\n      // Literals do not need to be inlined\n      stack = [top.value];\n      prefix = ['(', stack];\n      usedLiteral = true;\n    } else {\n      // Get or create the current stack name for use by the inline\n      createdStack = true;\n      var _name = this.incrStack();\n\n      prefix = ['((', this.push(_name), ' = ', top, ')'];\n      stack = this.topStack();\n    }\n\n    var item = callback.call(this, stack);\n\n    if (!usedLiteral) {\n      this.popStack();\n    }\n    if (createdStack) {\n      this.stackSlot--;\n    }\n    this.push(prefix.concat(item, ')'));\n  },\n\n  incrStack: function incrStack() {\n    this.stackSlot++;\n    if (this.stackSlot > this.stackVars.length) {\n      this.stackVars.push('stack' + this.stackSlot);\n    }\n    return this.topStackName();\n  },\n  topStackName: function topStackName() {\n    return 'stack' + this.stackSlot;\n  },\n  flushInline: function flushInline() {\n    var inlineStack = this.inlineStack;\n    this.inlineStack = [];\n    for (var i = 0, len = inlineStack.length; i < len; i++) {\n      var entry = inlineStack[i];\n      /* istanbul ignore if */\n      if (entry instanceof Literal) {\n        this.compileStack.push(entry);\n      } else {\n        var stack = this.incrStack();\n        this.pushSource([stack, ' = ', entry, ';']);\n        this.compileStack.push(stack);\n      }\n    }\n  },\n  isInline: function isInline() {\n    return this.inlineStack.length;\n  },\n\n  popStack: function popStack(wrapped) {\n    var inline = this.isInline(),\n        item = (inline ? this.inlineStack : this.compileStack).pop();\n\n    if (!wrapped && item instanceof Literal) {\n      return item.value;\n    } else {\n      if (!inline) {\n        /* istanbul ignore next */\n        if (!this.stackSlot) {\n          throw new _exception2['default']('Invalid stack pop');\n        }\n        this.stackSlot--;\n      }\n      return item;\n    }\n  },\n\n  topStack: function topStack() {\n    var stack = this.isInline() ? this.inlineStack : this.compileStack,\n        item = stack[stack.length - 1];\n\n    /* istanbul ignore if */\n    if (item instanceof Literal) {\n      return item.value;\n    } else {\n      return item;\n    }\n  },\n\n  contextName: function contextName(context) {\n    if (this.useDepths && context) {\n      return 'depths[' + context + ']';\n    } else {\n      return 'depth' + context;\n    }\n  },\n\n  quotedString: function quotedString(str) {\n    return this.source.quotedString(str);\n  },\n\n  objectLiteral: function objectLiteral(obj) {\n    return this.source.objectLiteral(obj);\n  },\n\n  aliasable: function aliasable(name) {\n    var ret = this.aliases[name];\n    if (ret) {\n      ret.referenceCount++;\n      return ret;\n    }\n\n    ret = this.aliases[name] = this.source.wrap(name);\n    ret.aliasable = true;\n    ret.referenceCount = 1;\n\n    return ret;\n  },\n\n  setupHelper: function setupHelper(paramSize, name, blockHelper) {\n    var params = [],\n        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);\n    var foundHelper = this.nameLookup('helpers', name, 'helper'),\n        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');\n\n    return {\n      params: params,\n      paramsInit: paramsInit,\n      name: foundHelper,\n      callParams: [callContext].concat(params)\n    };\n  },\n\n  setupParams: function setupParams(helper, paramSize, params) {\n    var options = {},\n        contexts = [],\n        types = [],\n        ids = [],\n        objectArgs = !params,\n        param = undefined;\n\n    if (objectArgs) {\n      params = [];\n    }\n\n    options.name = this.quotedString(helper);\n    options.hash = this.popStack();\n\n    if (this.trackIds) {\n      options.hashIds = this.popStack();\n    }\n    if (this.stringParams) {\n      options.hashTypes = this.popStack();\n      options.hashContexts = this.popStack();\n    }\n\n    var inverse = this.popStack(),\n        program = this.popStack();\n\n    // Avoid setting fn and inverse if neither are set. This allows\n    // helpers to do a check for `if (options.fn)`\n    if (program || inverse) {\n      options.fn = program || 'container.noop';\n      options.inverse = inverse || 'container.noop';\n    }\n\n    // The parameters go on to the stack in order (making sure that they are evaluated in order)\n    // so we need to pop them off the stack in reverse order\n    var i = paramSize;\n    while (i--) {\n      param = this.popStack();\n      params[i] = param;\n\n      if (this.trackIds) {\n        ids[i] = this.popStack();\n      }\n      if (this.stringParams) {\n        types[i] = this.popStack();\n        contexts[i] = this.popStack();\n      }\n    }\n\n    if (objectArgs) {\n      options.args = this.source.generateArray(params);\n    }\n\n    if (this.trackIds) {\n      options.ids = this.source.generateArray(ids);\n    }\n    if (this.stringParams) {\n      options.types = this.source.generateArray(types);\n      options.contexts = this.source.generateArray(contexts);\n    }\n\n    if (this.options.data) {\n      options.data = 'data';\n    }\n    if (this.useBlockParams) {\n      options.blockParams = 'blockParams';\n    }\n    return options;\n  },\n\n  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {\n    var options = this.setupParams(helper, paramSize, params);\n    options = this.objectLiteral(options);\n    if (useRegister) {\n      this.useRegister('options');\n      params.push('options');\n      return ['options=', options];\n    } else if (params) {\n      params.push(options);\n      return '';\n    } else {\n      return options;\n    }\n  }\n};\n\n(function () {\n  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');\n\n  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};\n\n  for (var i = 0, l = reservedWords.length; i < l; i++) {\n    compilerWords[reservedWords[i]] = true;\n  }\n})();\n\nJavaScriptCompiler.isValidJavaScriptVariableName = function (name) {\n  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);\n};\n\nfunction strictLookup(requireTerminal, compiler, parts, type) {\n  var stack = compiler.popStack(),\n      i = 0,\n      len = parts.length;\n  if (requireTerminal) {\n    len--;\n  }\n\n  for (; i < len; i++) {\n    stack = compiler.nameLookup(stack, parts[i], type);\n  }\n\n  if (requireTerminal) {\n    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];\n  } else {\n    return stack;\n  }\n}\n\nexports['default'] = JavaScriptCompiler;\nmodule.exports = exports['default'];\n\n\n},{\"../base\":7,\"../exception\":20,\"../utils\":33,\"./code-gen\":10}],14:[function(require,module,exports){\n/* istanbul ignore next */\n/* Jison generated parser */\n\"use strict\";\n\nvar handlebars = (function () {\n    var parser = { trace: function trace() {},\n        yy: {},\n        symbols_: { \"error\": 2, \"root\": 3, \"program\": 4, \"EOF\": 5, \"program_repetition0\": 6, \"statement\": 7, \"mustache\": 8, \"block\": 9, \"rawBlock\": 10, \"partial\": 11, \"partialBlock\": 12, \"content\": 13, \"COMMENT\": 14, \"CONTENT\": 15, \"openRawBlock\": 16, \"rawBlock_repetition_plus0\": 17, \"END_RAW_BLOCK\": 18, \"OPEN_RAW_BLOCK\": 19, \"helperName\": 20, \"openRawBlock_repetition0\": 21, \"openRawBlock_option0\": 22, \"CLOSE_RAW_BLOCK\": 23, \"openBlock\": 24, \"block_option0\": 25, \"closeBlock\": 26, \"openInverse\": 27, \"block_option1\": 28, \"OPEN_BLOCK\": 29, \"openBlock_repetition0\": 30, \"openBlock_option0\": 31, \"openBlock_option1\": 32, \"CLOSE\": 33, \"OPEN_INVERSE\": 34, \"openInverse_repetition0\": 35, \"openInverse_option0\": 36, \"openInverse_option1\": 37, \"openInverseChain\": 38, \"OPEN_INVERSE_CHAIN\": 39, \"openInverseChain_repetition0\": 40, \"openInverseChain_option0\": 41, \"openInverseChain_option1\": 42, \"inverseAndProgram\": 43, \"INVERSE\": 44, \"inverseChain\": 45, \"inverseChain_option0\": 46, \"OPEN_ENDBLOCK\": 47, \"OPEN\": 48, \"mustache_repetition0\": 49, \"mustache_option0\": 50, \"OPEN_UNESCAPED\": 51, \"mustache_repetition1\": 52, \"mustache_option1\": 53, \"CLOSE_UNESCAPED\": 54, \"OPEN_PARTIAL\": 55, \"partialName\": 56, \"partial_repetition0\": 57, \"partial_option0\": 58, \"openPartialBlock\": 59, \"OPEN_PARTIAL_BLOCK\": 60, \"openPartialBlock_repetition0\": 61, \"openPartialBlock_option0\": 62, \"param\": 63, \"sexpr\": 64, \"OPEN_SEXPR\": 65, \"sexpr_repetition0\": 66, \"sexpr_option0\": 67, \"CLOSE_SEXPR\": 68, \"hash\": 69, \"hash_repetition_plus0\": 70, \"hashSegment\": 71, \"ID\": 72, \"EQUALS\": 73, \"blockParams\": 74, \"OPEN_BLOCK_PARAMS\": 75, \"blockParams_repetition_plus0\": 76, \"CLOSE_BLOCK_PARAMS\": 77, \"path\": 78, \"dataName\": 79, \"STRING\": 80, \"NUMBER\": 81, \"BOOLEAN\": 82, \"UNDEFINED\": 83, \"NULL\": 84, \"DATA\": 85, \"pathSegments\": 86, \"SEP\": 87, \"$accept\": 0, \"$end\": 1 },\n        terminals_: { 2: \"error\", 5: \"EOF\", 14: \"COMMENT\", 15: \"CONTENT\", 18: \"END_RAW_BLOCK\", 19: \"OPEN_RAW_BLOCK\", 23: \"CLOSE_RAW_BLOCK\", 29: \"OPEN_BLOCK\", 33: \"CLOSE\", 34: \"OPEN_INVERSE\", 39: \"OPEN_INVERSE_CHAIN\", 44: \"INVERSE\", 47: \"OPEN_ENDBLOCK\", 48: \"OPEN\", 51: \"OPEN_UNESCAPED\", 54: \"CLOSE_UNESCAPED\", 55: \"OPEN_PARTIAL\", 60: \"OPEN_PARTIAL_BLOCK\", 65: \"OPEN_SEXPR\", 68: \"CLOSE_SEXPR\", 72: \"ID\", 73: \"EQUALS\", 75: \"OPEN_BLOCK_PARAMS\", 77: \"CLOSE_BLOCK_PARAMS\", 80: \"STRING\", 81: \"NUMBER\", 82: \"BOOLEAN\", 83: \"UNDEFINED\", 84: \"NULL\", 85: \"DATA\", 87: \"SEP\" },\n        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],\n        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$\n        /**/) {\n\n            var $0 = $$.length - 1;\n            switch (yystate) {\n                case 1:\n                    return $$[$0 - 1];\n                    break;\n                case 2:\n                    this.$ = yy.prepareProgram($$[$0]);\n                    break;\n                case 3:\n                    this.$ = $$[$0];\n                    break;\n                case 4:\n                    this.$ = $$[$0];\n                    break;\n                case 5:\n                    this.$ = $$[$0];\n                    break;\n                case 6:\n                    this.$ = $$[$0];\n                    break;\n                case 7:\n                    this.$ = $$[$0];\n                    break;\n                case 8:\n                    this.$ = $$[$0];\n                    break;\n                case 9:\n                    this.$ = {\n                        type: 'CommentStatement',\n                        value: yy.stripComment($$[$0]),\n                        strip: yy.stripFlags($$[$0], $$[$0]),\n                        loc: yy.locInfo(this._$)\n                    };\n\n                    break;\n                case 10:\n                    this.$ = {\n                        type: 'ContentStatement',\n                        original: $$[$0],\n                        value: $$[$0],\n                        loc: yy.locInfo(this._$)\n                    };\n\n                    break;\n                case 11:\n                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);\n                    break;\n                case 12:\n                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };\n                    break;\n                case 13:\n                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);\n                    break;\n                case 14:\n                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);\n                    break;\n                case 15:\n                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                    break;\n                case 16:\n                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                    break;\n                case 17:\n                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };\n                    break;\n                case 18:\n                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };\n                    break;\n                case 19:\n                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),\n                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);\n                    program.chained = true;\n\n                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };\n\n                    break;\n                case 20:\n                    this.$ = $$[$0];\n                    break;\n                case 21:\n                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };\n                    break;\n                case 22:\n                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);\n                    break;\n                case 23:\n                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);\n                    break;\n                case 24:\n                    this.$ = {\n                        type: 'PartialStatement',\n                        name: $$[$0 - 3],\n                        params: $$[$0 - 2],\n                        hash: $$[$0 - 1],\n                        indent: '',\n                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),\n                        loc: yy.locInfo(this._$)\n                    };\n\n                    break;\n                case 25:\n                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);\n                    break;\n                case 26:\n                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };\n                    break;\n                case 27:\n                    this.$ = $$[$0];\n                    break;\n                case 28:\n                    this.$ = $$[$0];\n                    break;\n                case 29:\n                    this.$ = {\n                        type: 'SubExpression',\n                        path: $$[$0 - 3],\n                        params: $$[$0 - 2],\n                        hash: $$[$0 - 1],\n                        loc: yy.locInfo(this._$)\n                    };\n\n                    break;\n                case 30:\n                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };\n                    break;\n                case 31:\n                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };\n                    break;\n                case 32:\n                    this.$ = yy.id($$[$0 - 1]);\n                    break;\n                case 33:\n                    this.$ = $$[$0];\n                    break;\n                case 34:\n                    this.$ = $$[$0];\n                    break;\n                case 35:\n                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };\n                    break;\n                case 36:\n                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };\n                    break;\n                case 37:\n                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };\n                    break;\n                case 38:\n                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };\n                    break;\n                case 39:\n                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };\n                    break;\n                case 40:\n                    this.$ = $$[$0];\n                    break;\n                case 41:\n                    this.$ = $$[$0];\n                    break;\n                case 42:\n                    this.$ = yy.preparePath(true, $$[$0], this._$);\n                    break;\n                case 43:\n                    this.$ = yy.preparePath(false, $$[$0], this._$);\n                    break;\n                case 44:\n                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];\n                    break;\n                case 45:\n                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];\n                    break;\n                case 46:\n                    this.$ = [];\n                    break;\n                case 47:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 48:\n                    this.$ = [$$[$0]];\n                    break;\n                case 49:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 50:\n                    this.$ = [];\n                    break;\n                case 51:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 58:\n                    this.$ = [];\n                    break;\n                case 59:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 64:\n                    this.$ = [];\n                    break;\n                case 65:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 70:\n                    this.$ = [];\n                    break;\n                case 71:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 78:\n                    this.$ = [];\n                    break;\n                case 79:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 82:\n                    this.$ = [];\n                    break;\n                case 83:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 86:\n                    this.$ = [];\n                    break;\n                case 87:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 90:\n                    this.$ = [];\n                    break;\n                case 91:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 94:\n                    this.$ = [];\n                    break;\n                case 95:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 98:\n                    this.$ = [$$[$0]];\n                    break;\n                case 99:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n                case 100:\n                    this.$ = [$$[$0]];\n                    break;\n                case 101:\n                    $$[$0 - 1].push($$[$0]);\n                    break;\n            }\n        },\n        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],\n        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },\n        parseError: function parseError(str, hash) {\n            throw new Error(str);\n        },\n        parse: function parse(input) {\n            var self = this,\n                stack = [0],\n                vstack = [null],\n                lstack = [],\n                table = this.table,\n                yytext = \"\",\n                yylineno = 0,\n                yyleng = 0,\n                recovering = 0,\n                TERROR = 2,\n                EOF = 1;\n            this.lexer.setInput(input);\n            this.lexer.yy = this.yy;\n            this.yy.lexer = this.lexer;\n            this.yy.parser = this;\n            if (typeof this.lexer.yylloc == \"undefined\") this.lexer.yylloc = {};\n            var yyloc = this.lexer.yylloc;\n            lstack.push(yyloc);\n            var ranges = this.lexer.options && this.lexer.options.ranges;\n            if (typeof this.yy.parseError === \"function\") this.parseError = this.yy.parseError;\n            function popStack(n) {\n                stack.length = stack.length - 2 * n;\n                vstack.length = vstack.length - n;\n                lstack.length = lstack.length - n;\n            }\n            function lex() {\n                var token;\n                token = self.lexer.lex() || 1;\n                if (typeof token !== \"number\") {\n                    token = self.symbols_[token] || token;\n                }\n                return token;\n            }\n            var symbol,\n                preErrorSymbol,\n                state,\n                action,\n                a,\n                r,\n                yyval = {},\n                p,\n                len,\n                newState,\n                expected;\n            while (true) {\n                state = stack[stack.length - 1];\n                if (this.defaultActions[state]) {\n                    action = this.defaultActions[state];\n                } else {\n                    if (symbol === null || typeof symbol == \"undefined\") {\n                        symbol = lex();\n                    }\n                    action = table[state] && table[state][symbol];\n                }\n                if (typeof action === \"undefined\" || !action.length || !action[0]) {\n                    var errStr = \"\";\n                    if (!recovering) {\n                        expected = [];\n                        for (p in table[state]) if (this.terminals_[p] && p > 2) {\n                            expected.push(\"'\" + this.terminals_[p] + \"'\");\n                        }\n                        if (this.lexer.showPosition) {\n                            errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + this.lexer.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                        } else {\n                            errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == 1 ? \"end of input\" : \"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                        }\n                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });\n                    }\n                }\n                if (action[0] instanceof Array && action.length > 1) {\n                    throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n                }\n                switch (action[0]) {\n                    case 1:\n                        stack.push(symbol);\n                        vstack.push(this.lexer.yytext);\n                        lstack.push(this.lexer.yylloc);\n                        stack.push(action[1]);\n                        symbol = null;\n                        if (!preErrorSymbol) {\n                            yyleng = this.lexer.yyleng;\n                            yytext = this.lexer.yytext;\n                            yylineno = this.lexer.yylineno;\n                            yyloc = this.lexer.yylloc;\n                            if (recovering > 0) recovering--;\n                        } else {\n                            symbol = preErrorSymbol;\n                            preErrorSymbol = null;\n                        }\n                        break;\n                    case 2:\n                        len = this.productions_[action[1]][1];\n                        yyval.$ = vstack[vstack.length - len];\n                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };\n                        if (ranges) {\n                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n                        }\n                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n                        if (typeof r !== \"undefined\") {\n                            return r;\n                        }\n                        if (len) {\n                            stack = stack.slice(0, -1 * len * 2);\n                            vstack = vstack.slice(0, -1 * len);\n                            lstack = lstack.slice(0, -1 * len);\n                        }\n                        stack.push(this.productions_[action[1]][0]);\n                        vstack.push(yyval.$);\n                        lstack.push(yyval._$);\n                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n                        stack.push(newState);\n                        break;\n                    case 3:\n                        return true;\n                }\n            }\n            return true;\n        }\n    };\n    /* Jison generated lexer */\n    var lexer = (function () {\n        var lexer = { EOF: 1,\n            parseError: function parseError(str, hash) {\n                if (this.yy.parser) {\n                    this.yy.parser.parseError(str, hash);\n                } else {\n                    throw new Error(str);\n                }\n            },\n            setInput: function setInput(input) {\n                this._input = input;\n                this._more = this._less = this.done = false;\n                this.yylineno = this.yyleng = 0;\n                this.yytext = this.matched = this.match = '';\n                this.conditionStack = ['INITIAL'];\n                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };\n                if (this.options.ranges) this.yylloc.range = [0, 0];\n                this.offset = 0;\n                return this;\n            },\n            input: function input() {\n                var ch = this._input[0];\n                this.yytext += ch;\n                this.yyleng++;\n                this.offset++;\n                this.match += ch;\n                this.matched += ch;\n                var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n                if (lines) {\n                    this.yylineno++;\n                    this.yylloc.last_line++;\n                } else {\n                    this.yylloc.last_column++;\n                }\n                if (this.options.ranges) this.yylloc.range[1]++;\n\n                this._input = this._input.slice(1);\n                return ch;\n            },\n            unput: function unput(ch) {\n                var len = ch.length;\n                var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n                this._input = ch + this._input;\n                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n                //this.yyleng -= len;\n                this.offset -= len;\n                var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n                this.match = this.match.substr(0, this.match.length - 1);\n                this.matched = this.matched.substr(0, this.matched.length - 1);\n\n                if (lines.length - 1) this.yylineno -= lines.length - 1;\n                var r = this.yylloc.range;\n\n                this.yylloc = { first_line: this.yylloc.first_line,\n                    last_line: this.yylineno + 1,\n                    first_column: this.yylloc.first_column,\n                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n                };\n\n                if (this.options.ranges) {\n                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n                }\n                return this;\n            },\n            more: function more() {\n                this._more = true;\n                return this;\n            },\n            less: function less(n) {\n                this.unput(this.match.slice(n));\n            },\n            pastInput: function pastInput() {\n                var past = this.matched.substr(0, this.matched.length - this.match.length);\n                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n            },\n            upcomingInput: function upcomingInput() {\n                var next = this.match;\n                if (next.length < 20) {\n                    next += this._input.substr(0, 20 - next.length);\n                }\n                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n            },\n            showPosition: function showPosition() {\n                var pre = this.pastInput();\n                var c = new Array(pre.length + 1).join(\"-\");\n                return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n            },\n            next: function next() {\n                if (this.done) {\n                    return this.EOF;\n                }\n                if (!this._input) this.done = true;\n\n                var token, match, tempMatch, index, col, lines;\n                if (!this._more) {\n                    this.yytext = '';\n                    this.match = '';\n                }\n                var rules = this._currentRules();\n                for (var i = 0; i < rules.length; i++) {\n                    tempMatch = this._input.match(this.rules[rules[i]]);\n                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                        match = tempMatch;\n                        index = i;\n                        if (!this.options.flex) break;\n                    }\n                }\n                if (match) {\n                    lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n                    if (lines) this.yylineno += lines.length;\n                    this.yylloc = { first_line: this.yylloc.last_line,\n                        last_line: this.yylineno + 1,\n                        first_column: this.yylloc.last_column,\n                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length };\n                    this.yytext += match[0];\n                    this.match += match[0];\n                    this.matches = match;\n                    this.yyleng = this.yytext.length;\n                    if (this.options.ranges) {\n                        this.yylloc.range = [this.offset, this.offset += this.yyleng];\n                    }\n                    this._more = false;\n                    this._input = this._input.slice(match[0].length);\n                    this.matched += match[0];\n                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);\n                    if (this.done && this._input) this.done = false;\n                    if (token) return token;else return;\n                }\n                if (this._input === \"\") {\n                    return this.EOF;\n                } else {\n                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), { text: \"\", token: null, line: this.yylineno });\n                }\n            },\n            lex: function lex() {\n                var r = this.next();\n                if (typeof r !== 'undefined') {\n                    return r;\n                } else {\n                    return this.lex();\n                }\n            },\n            begin: function begin(condition) {\n                this.conditionStack.push(condition);\n            },\n            popState: function popState() {\n                return this.conditionStack.pop();\n            },\n            _currentRules: function _currentRules() {\n                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n            },\n            topState: function topState() {\n                return this.conditionStack[this.conditionStack.length - 2];\n            },\n            pushState: function begin(condition) {\n                this.begin(condition);\n            } };\n        lexer.options = {};\n        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START\n        /**/) {\n\n            function strip(start, end) {\n                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);\n            }\n\n            var YYSTATE = YY_START;\n            switch ($avoiding_name_collisions) {\n                case 0:\n                    if (yy_.yytext.slice(-2) === \"\\\\\\\\\") {\n                        strip(0, 1);\n                        this.begin(\"mu\");\n                    } else if (yy_.yytext.slice(-1) === \"\\\\\") {\n                        strip(0, 1);\n                        this.begin(\"emu\");\n                    } else {\n                        this.begin(\"mu\");\n                    }\n                    if (yy_.yytext) return 15;\n\n                    break;\n                case 1:\n                    return 15;\n                    break;\n                case 2:\n                    this.popState();\n                    return 15;\n\n                    break;\n                case 3:\n                    this.begin('raw');return 15;\n                    break;\n                case 4:\n                    this.popState();\n                    // Should be using `this.topState()` below, but it currently\n                    // returns the second top instead of the first top. Opened an\n                    // issue about it at https://github.com/zaach/jison/issues/291\n                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {\n                        return 15;\n                    } else {\n                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);\n                        return 'END_RAW_BLOCK';\n                    }\n\n                    break;\n                case 5:\n                    return 15;\n                    break;\n                case 6:\n                    this.popState();\n                    return 14;\n\n                    break;\n                case 7:\n                    return 65;\n                    break;\n                case 8:\n                    return 68;\n                    break;\n                case 9:\n                    return 19;\n                    break;\n                case 10:\n                    this.popState();\n                    this.begin('raw');\n                    return 23;\n\n                    break;\n                case 11:\n                    return 55;\n                    break;\n                case 12:\n                    return 60;\n                    break;\n                case 13:\n                    return 29;\n                    break;\n                case 14:\n                    return 47;\n                    break;\n                case 15:\n                    this.popState();return 44;\n                    break;\n                case 16:\n                    this.popState();return 44;\n                    break;\n                case 17:\n                    return 34;\n                    break;\n                case 18:\n                    return 39;\n                    break;\n                case 19:\n                    return 51;\n                    break;\n                case 20:\n                    return 48;\n                    break;\n                case 21:\n                    this.unput(yy_.yytext);\n                    this.popState();\n                    this.begin('com');\n\n                    break;\n                case 22:\n                    this.popState();\n                    return 14;\n\n                    break;\n                case 23:\n                    return 48;\n                    break;\n                case 24:\n                    return 73;\n                    break;\n                case 25:\n                    return 72;\n                    break;\n                case 26:\n                    return 72;\n                    break;\n                case 27:\n                    return 87;\n                    break;\n                case 28:\n                    // ignore whitespace\n                    break;\n                case 29:\n                    this.popState();return 54;\n                    break;\n                case 30:\n                    this.popState();return 33;\n                    break;\n                case 31:\n                    yy_.yytext = strip(1, 2).replace(/\\\\\"/g, '\"');return 80;\n                    break;\n                case 32:\n                    yy_.yytext = strip(1, 2).replace(/\\\\'/g, \"'\");return 80;\n                    break;\n                case 33:\n                    return 85;\n                    break;\n                case 34:\n                    return 82;\n                    break;\n                case 35:\n                    return 82;\n                    break;\n                case 36:\n                    return 83;\n                    break;\n                case 37:\n                    return 84;\n                    break;\n                case 38:\n                    return 81;\n                    break;\n                case 39:\n                    return 75;\n                    break;\n                case 40:\n                    return 77;\n                    break;\n                case 41:\n                    return 72;\n                    break;\n                case 42:\n                    yy_.yytext = yy_.yytext.replace(/\\\\([\\\\\\]])/g, '$1');return 72;\n                    break;\n                case 43:\n                    return 'INVALID';\n                    break;\n                case 44:\n                    return 5;\n                    break;\n            }\n        };\n        lexer.rules = [/^(?:[^\\x00]*?(?=(\\{\\{)))/, /^(?:[^\\x00]+)/, /^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/, /^(?:\\{\\{\\{\\{(?=[^\\/]))/, /^(?:\\{\\{\\{\\{\\/[^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=[=}\\s\\/.])\\}\\}\\}\\})/, /^(?:[^\\x00]*?(?=(\\{\\{\\{\\{)))/, /^(?:[\\s\\S]*?--(~)?\\}\\})/, /^(?:\\()/, /^(?:\\))/, /^(?:\\{\\{\\{\\{)/, /^(?:\\}\\}\\}\\})/, /^(?:\\{\\{(~)?>)/, /^(?:\\{\\{(~)?#>)/, /^(?:\\{\\{(~)?#\\*?)/, /^(?:\\{\\{(~)?\\/)/, /^(?:\\{\\{(~)?\\^\\s*(~)?\\}\\})/, /^(?:\\{\\{(~)?\\s*else\\s*(~)?\\}\\})/, /^(?:\\{\\{(~)?\\^)/, /^(?:\\{\\{(~)?\\s*else\\b)/, /^(?:\\{\\{(~)?\\{)/, /^(?:\\{\\{(~)?&)/, /^(?:\\{\\{(~)?!--)/, /^(?:\\{\\{(~)?![\\s\\S]*?\\}\\})/, /^(?:\\{\\{(~)?\\*?)/, /^(?:=)/, /^(?:\\.\\.)/, /^(?:\\.(?=([=~}\\s\\/.)|])))/, /^(?:[\\/.])/, /^(?:\\s+)/, /^(?:\\}(~)?\\}\\})/, /^(?:(~)?\\}\\})/, /^(?:\"(\\\\[\"]|[^\"])*\")/, /^(?:'(\\\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\\s)])))/, /^(?:false(?=([~}\\s)])))/, /^(?:undefined(?=([~}\\s)])))/, /^(?:null(?=([~}\\s)])))/, /^(?:-?[0-9]+(?:\\.[0-9]+)?(?=([~}\\s)])))/, /^(?:as\\s+\\|)/, /^(?:\\|)/, /^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)|]))))/, /^(?:\\[(\\\\\\]|[^\\]])*\\])/, /^(?:.)/, /^(?:$)/];\n        lexer.conditions = { \"mu\": { \"rules\": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], \"inclusive\": false }, \"emu\": { \"rules\": [2], \"inclusive\": false }, \"com\": { \"rules\": [6], \"inclusive\": false }, \"raw\": { \"rules\": [3, 4, 5], \"inclusive\": false }, \"INITIAL\": { \"rules\": [0, 1, 44], \"inclusive\": true } };\n        return lexer;\n    })();\n    parser.lexer = lexer;\n    function Parser() {\n        this.yy = {};\n    }Parser.prototype = parser;parser.Parser = Parser;\n    return new Parser();\n})();exports.__esModule = true;\nexports['default'] = handlebars;\n\n\n},{}],15:[function(require,module,exports){\n/* eslint-disable new-cap */\n'use strict';\n\nexports.__esModule = true;\nexports.print = print;\nexports.PrintVisitor = PrintVisitor;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _visitor = require('./visitor');\n\nvar _visitor2 = _interopRequireDefault(_visitor);\n\nfunction print(ast) {\n  return new PrintVisitor().accept(ast);\n}\n\nfunction PrintVisitor() {\n  this.padding = 0;\n}\n\nPrintVisitor.prototype = new _visitor2['default']();\n\nPrintVisitor.prototype.pad = function (string) {\n  var out = '';\n\n  for (var i = 0, l = this.padding; i < l; i++) {\n    out += '  ';\n  }\n\n  out += string + '\\n';\n  return out;\n};\n\nPrintVisitor.prototype.Program = function (program) {\n  var out = '',\n      body = program.body,\n      i = undefined,\n      l = undefined;\n\n  if (program.blockParams) {\n    var blockParams = 'BLOCK PARAMS: [';\n    for (i = 0, l = program.blockParams.length; i < l; i++) {\n      blockParams += ' ' + program.blockParams[i];\n    }\n    blockParams += ' ]';\n    out += this.pad(blockParams);\n  }\n\n  for (i = 0, l = body.length; i < l; i++) {\n    out += this.accept(body[i]);\n  }\n\n  this.padding--;\n\n  return out;\n};\n\nPrintVisitor.prototype.MustacheStatement = function (mustache) {\n  return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');\n};\nPrintVisitor.prototype.Decorator = function (mustache) {\n  return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');\n};\n\nPrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function (block) {\n  var out = '';\n\n  out += this.pad((block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:');\n  this.padding++;\n  out += this.pad(this.SubExpression(block));\n  if (block.program) {\n    out += this.pad('PROGRAM:');\n    this.padding++;\n    out += this.accept(block.program);\n    this.padding--;\n  }\n  if (block.inverse) {\n    if (block.program) {\n      this.padding++;\n    }\n    out += this.pad('{{^}}');\n    this.padding++;\n    out += this.accept(block.inverse);\n    this.padding--;\n    if (block.program) {\n      this.padding--;\n    }\n  }\n  this.padding--;\n\n  return out;\n};\n\nPrintVisitor.prototype.PartialStatement = function (partial) {\n  var content = 'PARTIAL:' + partial.name.original;\n  if (partial.params[0]) {\n    content += ' ' + this.accept(partial.params[0]);\n  }\n  if (partial.hash) {\n    content += ' ' + this.accept(partial.hash);\n  }\n  return this.pad('{{> ' + content + ' }}');\n};\nPrintVisitor.prototype.PartialBlockStatement = function (partial) {\n  var content = 'PARTIAL BLOCK:' + partial.name.original;\n  if (partial.params[0]) {\n    content += ' ' + this.accept(partial.params[0]);\n  }\n  if (partial.hash) {\n    content += ' ' + this.accept(partial.hash);\n  }\n\n  content += ' ' + this.pad('PROGRAM:');\n  this.padding++;\n  content += this.accept(partial.program);\n  this.padding--;\n\n  return this.pad('{{> ' + content + ' }}');\n};\n\nPrintVisitor.prototype.ContentStatement = function (content) {\n  return this.pad(\"CONTENT[ '\" + content.value + \"' ]\");\n};\n\nPrintVisitor.prototype.CommentStatement = function (comment) {\n  return this.pad(\"{{! '\" + comment.value + \"' }}\");\n};\n\nPrintVisitor.prototype.SubExpression = function (sexpr) {\n  var params = sexpr.params,\n      paramStrings = [],\n      hash = undefined;\n\n  for (var i = 0, l = params.length; i < l; i++) {\n    paramStrings.push(this.accept(params[i]));\n  }\n\n  params = '[' + paramStrings.join(', ') + ']';\n\n  hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';\n\n  return this.accept(sexpr.path) + ' ' + params + hash;\n};\n\nPrintVisitor.prototype.PathExpression = function (id) {\n  var path = id.parts.join('/');\n  return (id.data ? '@' : '') + 'PATH:' + path;\n};\n\nPrintVisitor.prototype.StringLiteral = function (string) {\n  return '\"' + string.value + '\"';\n};\n\nPrintVisitor.prototype.NumberLiteral = function (number) {\n  return 'NUMBER{' + number.value + '}';\n};\n\nPrintVisitor.prototype.BooleanLiteral = function (bool) {\n  return 'BOOLEAN{' + bool.value + '}';\n};\n\nPrintVisitor.prototype.UndefinedLiteral = function () {\n  return 'UNDEFINED';\n};\n\nPrintVisitor.prototype.NullLiteral = function () {\n  return 'NULL';\n};\n\nPrintVisitor.prototype.Hash = function (hash) {\n  var pairs = hash.pairs,\n      joinedPairs = [];\n\n  for (var i = 0, l = pairs.length; i < l; i++) {\n    joinedPairs.push(this.accept(pairs[i]));\n  }\n\n  return 'HASH{' + joinedPairs.join(', ') + '}';\n};\nPrintVisitor.prototype.HashPair = function (pair) {\n  return pair.key + '=' + this.accept(pair.value);\n};\n/* eslint-enable new-cap */\n\n\n},{\"./visitor\":16}],16:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nfunction Visitor() {\n  this.parents = [];\n}\n\nVisitor.prototype = {\n  constructor: Visitor,\n  mutating: false,\n\n  // Visits a given value. If mutating, will replace the value if necessary.\n  acceptKey: function acceptKey(node, name) {\n    var value = this.accept(node[name]);\n    if (this.mutating) {\n      // Hacky sanity check: This may have a few false positives for type for the helper\n      // methods but will generally do the right thing without a lot of overhead.\n      if (value && !Visitor.prototype[value.type]) {\n        throw new _exception2['default']('Unexpected node type \"' + value.type + '\" found when accepting ' + name + ' on ' + node.type);\n      }\n      node[name] = value;\n    }\n  },\n\n  // Performs an accept operation with added sanity check to ensure\n  // required keys are not removed.\n  acceptRequired: function acceptRequired(node, name) {\n    this.acceptKey(node, name);\n\n    if (!node[name]) {\n      throw new _exception2['default'](node.type + ' requires ' + name);\n    }\n  },\n\n  // Traverses a given array. If mutating, empty respnses will be removed\n  // for child elements.\n  acceptArray: function acceptArray(array) {\n    for (var i = 0, l = array.length; i < l; i++) {\n      this.acceptKey(array, i);\n\n      if (!array[i]) {\n        array.splice(i, 1);\n        i--;\n        l--;\n      }\n    }\n  },\n\n  accept: function accept(object) {\n    if (!object) {\n      return;\n    }\n\n    /* istanbul ignore next: Sanity code */\n    if (!this[object.type]) {\n      throw new _exception2['default']('Unknown type: ' + object.type, object);\n    }\n\n    if (this.current) {\n      this.parents.unshift(this.current);\n    }\n    this.current = object;\n\n    var ret = this[object.type](object);\n\n    this.current = this.parents.shift();\n\n    if (!this.mutating || ret) {\n      return ret;\n    } else if (ret !== false) {\n      return object;\n    }\n  },\n\n  Program: function Program(program) {\n    this.acceptArray(program.body);\n  },\n\n  MustacheStatement: visitSubExpression,\n  Decorator: visitSubExpression,\n\n  BlockStatement: visitBlock,\n  DecoratorBlock: visitBlock,\n\n  PartialStatement: visitPartial,\n  PartialBlockStatement: function PartialBlockStatement(partial) {\n    visitPartial.call(this, partial);\n\n    this.acceptKey(partial, 'program');\n  },\n\n  ContentStatement: function ContentStatement() /* content */{},\n  CommentStatement: function CommentStatement() /* comment */{},\n\n  SubExpression: visitSubExpression,\n\n  PathExpression: function PathExpression() /* path */{},\n\n  StringLiteral: function StringLiteral() /* string */{},\n  NumberLiteral: function NumberLiteral() /* number */{},\n  BooleanLiteral: function BooleanLiteral() /* bool */{},\n  UndefinedLiteral: function UndefinedLiteral() /* literal */{},\n  NullLiteral: function NullLiteral() /* literal */{},\n\n  Hash: function Hash(hash) {\n    this.acceptArray(hash.pairs);\n  },\n  HashPair: function HashPair(pair) {\n    this.acceptRequired(pair, 'value');\n  }\n};\n\nfunction visitSubExpression(mustache) {\n  this.acceptRequired(mustache, 'path');\n  this.acceptArray(mustache.params);\n  this.acceptKey(mustache, 'hash');\n}\nfunction visitBlock(block) {\n  visitSubExpression.call(this, block);\n\n  this.acceptKey(block, 'program');\n  this.acceptKey(block, 'inverse');\n}\nfunction visitPartial(partial) {\n  this.acceptRequired(partial, 'name');\n  this.acceptArray(partial.params);\n  this.acceptKey(partial, 'hash');\n}\n\nexports['default'] = Visitor;\nmodule.exports = exports['default'];\n\n\n},{\"../exception\":20}],17:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _visitor = require('./visitor');\n\nvar _visitor2 = _interopRequireDefault(_visitor);\n\nfunction WhitespaceControl() {\n  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  this.options = options;\n}\nWhitespaceControl.prototype = new _visitor2['default']();\n\nWhitespaceControl.prototype.Program = function (program) {\n  var doStandalone = !this.options.ignoreStandalone;\n\n  var isRoot = !this.isRootSeen;\n  this.isRootSeen = true;\n\n  var body = program.body;\n  for (var i = 0, l = body.length; i < l; i++) {\n    var current = body[i],\n        strip = this.accept(current);\n\n    if (!strip) {\n      continue;\n    }\n\n    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n        _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n        openStandalone = strip.openStandalone && _isPrevWhitespace,\n        closeStandalone = strip.closeStandalone && _isNextWhitespace,\n        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n    if (strip.close) {\n      omitRight(body, i, true);\n    }\n    if (strip.open) {\n      omitLeft(body, i, true);\n    }\n\n    if (doStandalone && inlineStandalone) {\n      omitRight(body, i);\n\n      if (omitLeft(body, i)) {\n        // If we are on a standalone node, save the indent info for partials\n        if (current.type === 'PartialStatement') {\n          // Pull out the whitespace from the final line\n          current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n        }\n      }\n    }\n    if (doStandalone && openStandalone) {\n      omitRight((current.program || current.inverse).body);\n\n      // Strip out the previous content node if it's whitespace only\n      omitLeft(body, i);\n    }\n    if (doStandalone && closeStandalone) {\n      // Always strip the next node\n      omitRight(body, i);\n\n      omitLeft((current.inverse || current.program).body);\n    }\n  }\n\n  return program;\n};\n\nWhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {\n  this.accept(block.program);\n  this.accept(block.inverse);\n\n  // Find the inverse program that is involed with whitespace stripping.\n  var program = block.program || block.inverse,\n      inverse = block.program && block.inverse,\n      firstInverse = inverse,\n      lastInverse = inverse;\n\n  if (inverse && inverse.chained) {\n    firstInverse = inverse.body[0].program;\n\n    // Walk the inverse chain to find the last inverse that is actually in the chain.\n    while (lastInverse.chained) {\n      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;\n    }\n  }\n\n  var strip = {\n    open: block.openStrip.open,\n    close: block.closeStrip.close,\n\n    // Determine the standalone candiacy. Basically flag our content as being possibly standalone\n    // so our parent can determine if we actually are standalone\n    openStandalone: isNextWhitespace(program.body),\n    closeStandalone: isPrevWhitespace((firstInverse || program).body)\n  };\n\n  if (block.openStrip.close) {\n    omitRight(program.body, null, true);\n  }\n\n  if (inverse) {\n    var inverseStrip = block.inverseStrip;\n\n    if (inverseStrip.open) {\n      omitLeft(program.body, null, true);\n    }\n\n    if (inverseStrip.close) {\n      omitRight(firstInverse.body, null, true);\n    }\n    if (block.closeStrip.open) {\n      omitLeft(lastInverse.body, null, true);\n    }\n\n    // Find standalone else statments\n    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {\n      omitLeft(program.body);\n      omitRight(firstInverse.body);\n    }\n  } else if (block.closeStrip.open) {\n    omitLeft(program.body, null, true);\n  }\n\n  return strip;\n};\n\nWhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {\n  return mustache.strip;\n};\n\nWhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {\n  /* istanbul ignore next */\n  var strip = node.strip || {};\n  return {\n    inlineStandalone: true,\n    open: strip.open,\n    close: strip.close\n  };\n};\n\nfunction isPrevWhitespace(body, i, isRoot) {\n  if (i === undefined) {\n    i = body.length;\n  }\n\n  // Nodes that end with newlines are considered whitespace (but are special\n  // cased for strip operations)\n  var prev = body[i - 1],\n      sibling = body[i - 2];\n  if (!prev) {\n    return isRoot;\n  }\n\n  if (prev.type === 'ContentStatement') {\n    return (sibling || !isRoot ? /\\r?\\n\\s*?$/ : /(^|\\r?\\n)\\s*?$/).test(prev.original);\n  }\n}\nfunction isNextWhitespace(body, i, isRoot) {\n  if (i === undefined) {\n    i = -1;\n  }\n\n  var next = body[i + 1],\n      sibling = body[i + 2];\n  if (!next) {\n    return isRoot;\n  }\n\n  if (next.type === 'ContentStatement') {\n    return (sibling || !isRoot ? /^\\s*?\\r?\\n/ : /^\\s*?(\\r?\\n|$)/).test(next.original);\n  }\n}\n\n// Marks the node to the right of the position as omitted.\n// I.e. {{foo}}' ' will mark the ' ' node as omitted.\n//\n// If i is undefined, then the first child will be marked as such.\n//\n// If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n// content is met.\nfunction omitRight(body, i, multiple) {\n  var current = body[i == null ? 0 : i + 1];\n  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {\n    return;\n  }\n\n  var original = current.value;\n  current.value = current.value.replace(multiple ? /^\\s+/ : /^[ \\t]*\\r?\\n?/, '');\n  current.rightStripped = current.value !== original;\n}\n\n// Marks the node to the left of the position as omitted.\n// I.e. ' '{{foo}} will mark the ' ' node as omitted.\n//\n// If i is undefined then the last child will be marked as such.\n//\n// If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n// content is met.\nfunction omitLeft(body, i, multiple) {\n  var current = body[i == null ? body.length - 1 : i - 1];\n  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {\n    return;\n  }\n\n  // We omit the last node if it's whitespace only and not preceeded by a non-content node.\n  var original = current.value;\n  current.value = current.value.replace(multiple ? /\\s+$/ : /[ \\t]+$/, '');\n  current.leftStripped = current.value !== original;\n  return current.leftStripped;\n}\n\nexports['default'] = WhitespaceControl;\nmodule.exports = exports['default'];\n\n\n},{\"./visitor\":16}],18:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\nexports.registerDefaultDecorators = registerDefaultDecorators;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _decoratorsInline = require('./decorators/inline');\n\nvar _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);\n\nfunction registerDefaultDecorators(instance) {\n  _decoratorsInline2['default'](instance);\n}\n\n\n},{\"./decorators/inline\":19}],19:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nexports['default'] = function (instance) {\n  instance.registerDecorator('inline', function (fn, props, container, options) {\n    var ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function (context, options) {\n        // Create a new partials stack frame prior to exec.\n        var original = container.partials;\n        container.partials = _utils.extend({}, original, props.partials);\n        var ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  });\n};\n\nmodule.exports = exports['default'];\n\n\n},{\"../utils\":33}],20:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n\nvar errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];\n\nfunction Exception(message, node) {\n  var loc = node && node.loc,\n      line = undefined,\n      column = undefined;\n  if (loc) {\n    line = loc.start.line;\n    column = loc.start.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  var tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (var idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n\n      // Work around issue under safari where we can't directly set the column value\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', { value: column });\n      } else {\n        this.column = column;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\n\nexports['default'] = Exception;\nmodule.exports = exports['default'];\n\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\nexports.registerDefaultHelpers = registerDefaultHelpers;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _helpersBlockHelperMissing = require('./helpers/block-helper-missing');\n\nvar _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);\n\nvar _helpersEach = require('./helpers/each');\n\nvar _helpersEach2 = _interopRequireDefault(_helpersEach);\n\nvar _helpersHelperMissing = require('./helpers/helper-missing');\n\nvar _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);\n\nvar _helpersIf = require('./helpers/if');\n\nvar _helpersIf2 = _interopRequireDefault(_helpersIf);\n\nvar _helpersLog = require('./helpers/log');\n\nvar _helpersLog2 = _interopRequireDefault(_helpersLog);\n\nvar _helpersLookup = require('./helpers/lookup');\n\nvar _helpersLookup2 = _interopRequireDefault(_helpersLookup);\n\nvar _helpersWith = require('./helpers/with');\n\nvar _helpersWith2 = _interopRequireDefault(_helpersWith);\n\nfunction registerDefaultHelpers(instance) {\n  _helpersBlockHelperMissing2['default'](instance);\n  _helpersEach2['default'](instance);\n  _helpersHelperMissing2['default'](instance);\n  _helpersIf2['default'](instance);\n  _helpersLog2['default'](instance);\n  _helpersLookup2['default'](instance);\n  _helpersWith2['default'](instance);\n}\n\n\n},{\"./helpers/block-helper-missing\":22,\"./helpers/each\":23,\"./helpers/helper-missing\":24,\"./helpers/if\":25,\"./helpers/log\":26,\"./helpers/lookup\":27,\"./helpers/with\":28}],22:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nexports['default'] = function (instance) {\n  instance.registerHelper('blockHelperMissing', function (context, options) {\n    var inverse = options.inverse,\n        fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (_utils.isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        var data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  });\n};\n\nmodule.exports = exports['default'];\n\n\n},{\"../utils\":33}],23:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _utils = require('../utils');\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports['default'] = function (instance) {\n  instance.registerHelper('each', function (context, options) {\n    if (!options) {\n      throw new _exception2['default']('Must pass iterator to #each');\n    }\n\n    var fn = options.fn,\n        inverse = options.inverse,\n        i = 0,\n        ret = '',\n        data = undefined,\n        contextPath = undefined;\n\n    if (options.data && options.ids) {\n      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = _utils.createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret = ret + fn(context[field], {\n        data: data,\n        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])\n      });\n    }\n\n    if (context && typeof context === 'object') {\n      if (_utils.isArray(context)) {\n        for (var j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else {\n        var priorKey = undefined;\n\n        for (var key in context) {\n          if (context.hasOwnProperty(key)) {\n            // We're running the iterations one step out of sync so we can detect\n            // the last iteration without have to scan the object twice and create\n            // an itermediate keys array.\n            if (priorKey !== undefined) {\n              execIteration(priorKey, i - 1);\n            }\n            priorKey = key;\n            i++;\n          }\n        }\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n};\n\nmodule.exports = exports['default'];\n\n\n},{\"../exception\":20,\"../utils\":33}],24:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _exception = require('../exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nexports['default'] = function (instance) {\n  instance.registerHelper('helperMissing', function () /* [args, ]options */{\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new _exception2['default']('Missing helper: \"' + arguments[arguments.length - 1].name + '\"');\n    }\n  });\n};\n\nmodule.exports = exports['default'];\n\n\n},{\"../exception\":20}],25:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nexports['default'] = function (instance) {\n  instance.registerHelper('if', function (conditional, options) {\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function (conditional, options) {\n    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });\n  });\n};\n\nmodule.exports = exports['default'];\n\n\n},{\"../utils\":33}],26:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n\nexports['default'] = function (instance) {\n  instance.registerHelper('log', function () /* message, options */{\n    var args = [undefined],\n        options = arguments[arguments.length - 1];\n    for (var i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    var level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log.apply(instance, args);\n  });\n};\n\nmodule.exports = exports['default'];\n\n\n},{}],27:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n\nexports['default'] = function (instance) {\n  instance.registerHelper('lookup', function (obj, field) {\n    return obj && obj[field];\n  });\n};\n\nmodule.exports = exports['default'];\n\n\n},{}],28:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('../utils');\n\nexports['default'] = function (instance) {\n  instance.registerHelper('with', function (context, options) {\n    if (_utils.isFunction(context)) {\n      context = context.call(this);\n    }\n\n    var fn = options.fn;\n\n    if (!_utils.isEmpty(context)) {\n      var data = options.data;\n      if (options.data && options.ids) {\n        data = _utils.createFrame(options.data);\n        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: _utils.blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n};\n\nmodule.exports = exports['default'];\n\n\n},{\"../utils\":33}],29:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\n\nvar _utils = require('./utils');\n\nvar logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function lookupLevel(level) {\n    if (typeof level === 'string') {\n      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function log(level) {\n    level = logger.lookupLevel(level);\n\n    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n      var method = logger.methodMap[level];\n      if (!console[method]) {\n        // eslint-disable-line no-console\n        method = 'log';\n      }\n\n      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        message[_key - 1] = arguments[_key];\n      }\n\n      console[method].apply(console, message); // eslint-disable-line no-console\n    }\n  }\n};\n\nexports['default'] = logger;\nmodule.exports = exports['default'];\n\n\n},{\"./utils\":33}],30:[function(require,module,exports){\n(function (global){\n/* global window */\n'use strict';\n\nexports.__esModule = true;\n\nexports['default'] = function (Handlebars) {\n  /* istanbul ignore next */\n  var root = typeof global !== 'undefined' ? global : window,\n      $Handlebars = root.Handlebars;\n  /* istanbul ignore next */\n  Handlebars.noConflict = function () {\n    if (root.Handlebars === Handlebars) {\n      root.Handlebars = $Handlebars;\n    }\n    return Handlebars;\n  };\n};\n\nmodule.exports = exports['default'];\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],31:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\nexports.checkRevision = checkRevision;\nexports.template = template;\nexports.wrapProgram = wrapProgram;\nexports.resolvePartial = resolvePartial;\nexports.invokePartial = invokePartial;\nexports.noop = noop;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// istanbul ignore next\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nvar _utils = require('./utils');\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _exception = require('./exception');\n\nvar _exception2 = _interopRequireDefault(_exception);\n\nvar _base = require('./base');\n\nfunction checkRevision(compilerInfo) {\n  var compilerRevision = compilerInfo && compilerInfo[0] || 1,\n      currentRevision = _base.COMPILER_REVISION;\n\n  if (compilerRevision !== currentRevision) {\n    if (compilerRevision < currentRevision) {\n      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],\n          compilerVersions = _base.REVISION_CHANGES[compilerRevision];\n      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');\n    } else {\n      // Use the embedded version info since the runtime doesn't know about this revision yet\n      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');\n    }\n  }\n}\n\nfunction template(templateSpec, env) {\n  /* istanbul ignore next */\n  if (!env) {\n    throw new _exception2['default']('No environment passed to template');\n  }\n  if (!templateSpec || !templateSpec.main) {\n    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);\n  }\n\n  templateSpec.main.decorator = templateSpec.main_d;\n\n  // Note: Using env.VM references rather than local var references throughout this section to allow\n  // for external users to override these as psuedo-supported APIs.\n  env.VM.checkRevision(templateSpec.compiler);\n\n  function invokePartialWrapper(partial, context, options) {\n    if (options.hash) {\n      context = Utils.extend({}, context, options.hash);\n      if (options.ids) {\n        options.ids[0] = true;\n      }\n    }\n\n    partial = env.VM.resolvePartial.call(this, partial, context, options);\n    var result = env.VM.invokePartial.call(this, partial, context, options);\n\n    if (result == null && env.compile) {\n      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);\n      result = options.partials[options.name](context, options);\n    }\n    if (result != null) {\n      if (options.indent) {\n        var lines = result.split('\\n');\n        for (var i = 0, l = lines.length; i < l; i++) {\n          if (!lines[i] && i + 1 === l) {\n            break;\n          }\n\n          lines[i] = options.indent + lines[i];\n        }\n        result = lines.join('\\n');\n      }\n      return result;\n    } else {\n      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');\n    }\n  }\n\n  // Just add water\n  var container = {\n    strict: function strict(obj, name) {\n      if (!(name in obj)) {\n        throw new _exception2['default']('\"' + name + '\" not defined in ' + obj);\n      }\n      return obj[name];\n    },\n    lookup: function lookup(depths, name) {\n      var len = depths.length;\n      for (var i = 0; i < len; i++) {\n        if (depths[i] && depths[i][name] != null) {\n          return depths[i][name];\n        }\n      }\n    },\n    lambda: function lambda(current, context) {\n      return typeof current === 'function' ? current.call(context) : current;\n    },\n\n    escapeExpression: Utils.escapeExpression,\n    invokePartial: invokePartialWrapper,\n\n    fn: function fn(i) {\n      var ret = templateSpec[i];\n      ret.decorator = templateSpec[i + '_d'];\n      return ret;\n    },\n\n    programs: [],\n    program: function program(i, data, declaredBlockParams, blockParams, depths) {\n      var programWrapper = this.programs[i],\n          fn = this.fn(i);\n      if (data || depths || blockParams || declaredBlockParams) {\n        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);\n      } else if (!programWrapper) {\n        programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n      }\n      return programWrapper;\n    },\n\n    data: function data(value, depth) {\n      while (value && depth--) {\n        value = value._parent;\n      }\n      return value;\n    },\n    merge: function merge(param, common) {\n      var obj = param || common;\n\n      if (param && common && param !== common) {\n        obj = Utils.extend({}, common, param);\n      }\n\n      return obj;\n    },\n\n    noop: env.VM.noop,\n    compilerInfo: templateSpec.compiler\n  };\n\n  function ret(context) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var data = options.data;\n\n    ret._setup(options);\n    if (!options.partial && templateSpec.useData) {\n      data = initData(context, data);\n    }\n    var depths = undefined,\n        blockParams = templateSpec.useBlockParams ? [] : undefined;\n    if (templateSpec.useDepths) {\n      if (options.depths) {\n        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;\n      } else {\n        depths = [context];\n      }\n    }\n\n    function main(context /*, options*/) {\n      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);\n    }\n    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);\n    return main(context, options);\n  }\n  ret.isTop = true;\n\n  ret._setup = function (options) {\n    if (!options.partial) {\n      container.helpers = container.merge(options.helpers, env.helpers);\n\n      if (templateSpec.usePartial) {\n        container.partials = container.merge(options.partials, env.partials);\n      }\n      if (templateSpec.usePartial || templateSpec.useDecorators) {\n        container.decorators = container.merge(options.decorators, env.decorators);\n      }\n    } else {\n      container.helpers = options.helpers;\n      container.partials = options.partials;\n      container.decorators = options.decorators;\n    }\n  };\n\n  ret._child = function (i, data, blockParams, depths) {\n    if (templateSpec.useBlockParams && !blockParams) {\n      throw new _exception2['default']('must pass block params');\n    }\n    if (templateSpec.useDepths && !depths) {\n      throw new _exception2['default']('must pass parent depths');\n    }\n\n    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);\n  };\n  return ret;\n}\n\nfunction wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {\n  function prog(context) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var currentDepths = depths;\n    if (depths && context != depths[0]) {\n      currentDepths = [context].concat(depths);\n    }\n\n    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);\n  }\n\n  prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n  prog.program = i;\n  prog.depth = depths ? depths.length : 0;\n  prog.blockParams = declaredBlockParams || 0;\n  return prog;\n}\n\nfunction resolvePartial(partial, context, options) {\n  if (!partial) {\n    if (options.name === '@partial-block') {\n      var data = options.data;\n      while (data['partial-block'] === noop) {\n        data = data._parent;\n      }\n      partial = data['partial-block'];\n      data['partial-block'] = noop;\n    } else {\n      partial = options.partials[options.name];\n    }\n  } else if (!partial.call && !options.name) {\n    // This is a dynamic partial that returned a string\n    options.name = partial;\n    partial = options.partials[partial];\n  }\n  return partial;\n}\n\nfunction invokePartial(partial, context, options) {\n  options.partial = true;\n  if (options.ids) {\n    options.data.contextPath = options.ids[0] || options.data.contextPath;\n  }\n\n  var partialBlock = undefined;\n  if (options.fn && options.fn !== noop) {\n    options.data = _base.createFrame(options.data);\n    partialBlock = options.data['partial-block'] = options.fn;\n\n    if (partialBlock.partials) {\n      options.partials = Utils.extend({}, options.partials, partialBlock.partials);\n    }\n  }\n\n  if (partial === undefined && partialBlock) {\n    partial = partialBlock;\n  }\n\n  if (partial === undefined) {\n    throw new _exception2['default']('The partial ' + options.name + ' could not be found');\n  } else if (partial instanceof Function) {\n    return partial(context, options);\n  }\n}\n\nfunction noop() {\n  return '';\n}\n\nfunction initData(context, data) {\n  if (!data || !('root' in data)) {\n    data = data ? _base.createFrame(data) : {};\n    data.root = context;\n  }\n  return data;\n}\n\nfunction executeDecorators(fn, prog, container, depths, data, blockParams) {\n  if (fn.decorator) {\n    var props = {};\n    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);\n    Utils.extend(prog, props);\n  }\n  return prog;\n}\n\n\n},{\"./base\":7,\"./exception\":20,\"./utils\":33}],32:[function(require,module,exports){\n// Build out our basic SafeString type\n'use strict';\n\nexports.__esModule = true;\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function () {\n  return '' + this.string;\n};\n\nexports['default'] = SafeString;\nmodule.exports = exports['default'];\n\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\nexports.__esModule = true;\nexports.extend = extend;\nexports.indexOf = indexOf;\nexports.escapeExpression = escapeExpression;\nexports.isEmpty = isEmpty;\nexports.createFrame = createFrame;\nexports.blockParams = blockParams;\nexports.appendContextPath = appendContextPath;\nvar escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nvar badChars = /[&<>\"'`=]/g,\n    possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nfunction extend(obj /* , ...source */) {\n  for (var i = 1; i < arguments.length; i++) {\n    for (var key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nvar toString = Object.prototype.toString;\n\nexports.toString = toString;\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  exports.isFunction = isFunction = function (value) {\n    return typeof value === 'function' && toString.call(value) === '[object Function]';\n  };\n}\nexports.isFunction = isFunction;\n\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nvar isArray = Array.isArray || function (value) {\n  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;\n};\n\nexports.isArray = isArray;\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\n\nfunction indexOf(array, value) {\n  for (var i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nfunction escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) {\n    return string;\n  }\n  return string.replace(badChars, escapeChar);\n}\n\nfunction isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction createFrame(object) {\n  var frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nfunction blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nfunction appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n\n\n},{}],34:[function(require,module,exports){\n// USAGE:\n// var handlebars = require('handlebars');\n/* eslint-disable no-var */\n\n// var local = handlebars.create();\n\nvar handlebars = require('../dist/cjs/handlebars')['default'];\n\nvar printer = require('../dist/cjs/handlebars/compiler/printer');\nhandlebars.PrintVisitor = printer.PrintVisitor;\nhandlebars.print = printer.print;\n\nmodule.exports = handlebars;\n\n// Publish a Node.js require() handler for .handlebars and .hbs files\nfunction extension(module, filename) {\n  var fs = require('fs');\n  var templateString = fs.readFileSync(filename, 'utf8');\n  module.exports = handlebars.compile(templateString);\n}\n/* istanbul ignore else */\nif (typeof require !== 'undefined' && require.extensions) {\n  require.extensions['.handlebars'] = extension;\n  require.extensions['.hbs'] = extension;\n}\n\n},{\"../dist/cjs/handlebars\":5,\"../dist/cjs/handlebars/compiler/printer\":15,\"fs\":63}],35:[function(require,module,exports){\n// Create a simple path alias to allow browserify to resolve\n// the runtime on a supported path.\nmodule.exports = require('./dist/cjs/handlebars.runtime')['default'];\n\n},{\"./dist/cjs/handlebars.runtime\":6}],36:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nrequire('whatwg-fetch');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nrequire('es6-promise').polyfill(); // needed for fetch\n\nvar Handlebars = require('handlebars');\n/**\n * Makes sure that a path is converted to an array.\n * @param paths\n * @returns {*}\n */\nvar ensurePathArray = function ensurePathArray(paths) {\n    if (!paths) {\n        paths = [];\n    } else if (typeof paths === 'string') {\n        paths = [paths];\n    }\n    return paths;\n};\n\n/**\n The Resource Manager.\n @class ResourceManager\n @description Represents a manager that loads any CSS and Javascript Resources on the fly.\n */\n\nvar ResourceManager = function () {\n\n    /**\n     * Upon initialization.\n     * @memberOf ResourceManager\n     */\n    function ResourceManager() {\n        _classCallCheck(this, ResourceManager);\n\n        this._head = document.getElementsByTagName('head')[0];\n        this._cssPaths = {};\n        this._scriptMaps = {};\n        this._dataPromises = {};\n    }\n\n    /**\n     * Loads a javascript file.\n     * @param {string|Array} paths - The path to the view's js file\n     * @memberOf ResourceManager\n     * @return {Promise} Returns a promise that resolves when all scripts have been loaded\n     */\n\n\n    _createClass(ResourceManager, [{\n        key: 'loadScript',\n        value: function loadScript(paths) {\n            var script,\n                map,\n                loadPromises = [];\n            paths = ensurePathArray(paths);\n            paths.forEach(function (path) {\n                map = this._scriptMaps[path] = this._scriptMaps[path] || {};\n                if (!map.promise) {\n                    map.path = path;\n                    map.promise = new Promise(function (resolve) {\n                        script = this.createScriptElement();\n                        script.setAttribute('type', 'text/javascript');\n                        script.src = path;\n                        script.addEventListener('load', resolve);\n                        this._head.appendChild(script);\n                    }.bind(this));\n                }\n                loadPromises.push(map.promise);\n            }.bind(this));\n            return Promise.all(loadPromises);\n        }\n\n        /**\n         * Removes a script that has the specified path from the head of the document.\n         * @param {string|Array} paths - The paths of the scripts to unload\n         * @memberOf ResourceManager\n         */\n\n    }, {\n        key: 'unloadScript',\n        value: function unloadScript(paths) {\n            var file;\n            return new Promise(function (resolve) {\n                paths = ensurePathArray(paths);\n                paths.forEach(function (path) {\n                    file = this._head.querySelectorAll('script[src=\"' + path + '\"]')[0];\n                    if (file) {\n                        this._head.removeChild(file);\n                        delete this._scriptMaps[path];\n                    }\n                }.bind(this));\n                resolve();\n            }.bind(this));\n        }\n\n        /**\n         * Creates a new script element.\n         * @returns {HTMLElement}\n         */\n\n    }, {\n        key: 'createScriptElement',\n        value: function createScriptElement() {\n            return document.createElement('script');\n        }\n\n        /**\n         * Makes a request to get data and caches it.\n         * @param {string} url - The url to fetch data from\n         * @param [reqOptions] - options to be passed to fetch call\n         * @returns {*}\n         */\n\n    }, {\n        key: 'fetchData',\n        value: function fetchData(url) {\n            var _this = this;\n\n            var reqOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            var cacheId = url + JSON.stringify(reqOptions);\n\n            reqOptions.cache = reqOptions.cache === undefined ? true : reqOptions.cache;\n\n            if (!url) {\n                return Promise.resolve();\n            }\n            if (!this._dataPromises[cacheId] || !reqOptions.cache) {\n                this._dataPromises[cacheId] = fetch(url, reqOptions).catch(function (e) {\n                    // if failure, remove cache so that subsequent\n                    // requests will trigger new ajax call\n                    _this._dataPromises[cacheId] = null;\n                    throw e;\n                });\n            }\n            return this._dataPromises[cacheId];\n        }\n\n        /**\n         * Loads css files.\n         * @param {Array|String} paths - An array of css paths files to load\n         * @memberOf ResourceManager\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'loadCss',\n        value: function loadCss(paths) {\n            return new Promise(function (resolve) {\n                paths = ensurePathArray(paths);\n                paths.forEach(function (path) {\n                    // TODO: figure out a way to find out when css is guaranteed to be loaded,\n                    // and make this return a truely asynchronous promise\n                    if (!this._cssPaths[path]) {\n                        var el = document.createElement('link');\n                        el.setAttribute('rel', 'stylesheet');\n                        el.setAttribute('href', path);\n                        this._head.appendChild(el);\n                        this._cssPaths[path] = el;\n                    }\n                }.bind(this));\n                resolve();\n            }.bind(this));\n        }\n\n        /**\n         * Unloads css paths.\n         * @param {string|Array} paths - The css paths to unload\n         * @memberOf ResourceManager\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'unloadCss',\n        value: function unloadCss(paths) {\n            var el;\n            return new Promise(function (resolve) {\n                paths = ensurePathArray(paths);\n                paths.forEach(function (path) {\n                    el = this._cssPaths[path];\n                    if (el) {\n                        this._head.removeChild(el);\n                        this._cssPaths[path] = null;\n                    }\n                }.bind(this));\n                resolve();\n            }.bind(this));\n        }\n\n        /**\n         * Parses a template into a DOM element, then returns element back to you.\n         * @param {string} path - The path to the template\n         * @param {HTMLElement} [el] - The element to attach template to\n         * @param {Object|Array} [hbsData] - The data to use for the handlebar template (if applicable)\n         * @returns {Promise} Returns a promise that resolves with contents of template file\n         */\n\n    }, {\n        key: 'loadTemplate',\n        value: function loadTemplate(path, el, hbsData) {\n\n            var isHandlebarFile = function isHandlebarFile(filePath) {\n                if (filePath) {\n                    var frags = filePath.split('.');\n                    var ext = frags[frags.length - 1];\n                    return ext === 'hbs';\n                }\n            };\n\n            if (!path) {\n                return Promise.resolve();\n            }\n\n            return fetch(path).then(function (resp) {\n                return resp.text().then(function (contents) {\n                    if (isHandlebarFile(path)) {\n                        contents = Handlebars.compile(contents)(hbsData || {});\n                    }\n                    if (el) {\n                        el.innerHTML = contents;\n                        contents = el;\n                    }\n                    return contents;\n                });\n            });\n        }\n\n        /**\n         * Removes all cached resources.\n         * @memberOf ResourceManager\n         */\n\n    }, {\n        key: 'flush',\n        value: function flush() {\n            this.unloadCss(Object.getOwnPropertyNames(this._cssPaths));\n            this._cssPaths = {};\n            for (var s in this._scriptMaps) {\n                if (this._scriptMaps.hasOwnProperty(s)) {\n                    var map = this._scriptMaps[s];\n                    this.unloadScript(map.path);\n                }\n            }\n            this._scriptMaps = {};\n            this._dataPromises = {};\n        }\n    }]);\n\n    return ResourceManager;\n}();\n\nexports.default = new ResourceManager();\n\n},{\"es6-promise\":4,\"handlebars\":34,\"whatwg-fetch\":57}],37:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _resourceManagerJs = require('resource-manager-js');\n\nvar _resourceManagerJs2 = _interopRequireDefault(_resourceManagerJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Promise = require('es6-promise').Promise;\nvar runtime = require('handlebars/runtime');\n\n/**\n * Takes a value and separates the number and unit into a key/value map.\n * @param v - The value\n * @returns {{num: Number, unit: string}} Returns the map\n * @private\n */\nvar getCssPropUnitMap = function getCssPropUnitMap(v) {\n    v.trim();\n    var num = v.match('[0-9\\.]+'),\n        unit = 'ms';\n\n    num = num ? num[0] : '';\n    if (num) {\n        unit = v.split(num)[1];\n        num = Number(num);\n    }\n    return {\n        num: num,\n        unit: unit\n    };\n};\n\n/**\n * Converts a css timing unit value into milliseconds.\n * @param {string} val - The value string\n * @returns {string} Returns the timing unit value in milliseconds\n */\nvar convertCssTimeValueToMilliseconds = function convertCssTimeValueToMilliseconds(val) {\n    var number = getCssPropUnitMap(val).num,\n        unit = val.replace(number, '');\n    if (unit === 's') {\n        val = number * 1000;\n    } else {\n        val = number;\n    }\n    return val + 'ms';\n};\n\n/**\n * Takes a css property name and returns the javascript version of it.\n * @param {string} cssProp - The css property\n * @returns {string} Returns the javascript version\n * @private\n */\nvar getJsPropName = function getJsPropName(cssProp) {\n    // convert to camelCase\n    return cssProp.replace(/-([a-z])/g, function (letter) {\n        return letter[1].toUpperCase();\n    });\n};\n\n/**\n * Bubbles up each parent node of the element, triggering the callback on each element until traversal\n * either runs out of parent nodes, reaches the document element, or if callback returns a falsy value\n * @param {Function} callback - A callback that fires which gets passed the current element\n * @param {HTMLElement} [startEl] - The element where traversal will begin (including the passed element), defaults to current el\n */\nvar traverseEachParent = function traverseEachParent(callback, startEl) {\n    var parentNode = startEl;\n    var predicate = null;\n    // check if the node has classname property, if not, we know we're at the #document element\n    while (parentNode && typeof parentNode.className === 'string') {\n        predicate = callback(parentNode);\n        if (predicate !== undefined && !predicate) {\n            break;\n        }\n        parentNode = parentNode.parentNode;\n    }\n};\n\n/**\n * A function that fires when the module's load() method is called\n * @callback Module~onLoad\n * @return {*} May return a promise when done\n */\n\n/**\n * A function that fires when the module's show() method is called\n * which can be overridden by subclass custom implementations.\n * @callback Module~onShow\n * @return {*} May return a promise when done\n */\n\n/**\n * A function that fires when the module's hide() method is called\n * which can be overridden by subclass custom implementations.\n * @callback Module~onHide\n */\n\n/**\n * A function that fires when the module's enable() method is called\n * @callback Module~onEnable\n */\n\n/**\n * A function that fires when the module's disable() method is called\n * @callback Module~onDisable\n */\n\n/**\n * A function that fires when the error() method is called\n * @callback Module~onError\n * @param {Object} [e] - The error object that was triggered\n */\n\n/**\n * @class Module\n * @description Base class that represents all modules of an App.\n */\n\nvar Module = function () {\n\n    /**\n     * Initialization.\n     * @param {HTMLElement} el - The module element\n     * @param {Object} [options] - An object of options\n     * @param {string} [options.loadedClass] - The class that will be applied to the module element when it is loaded\n     * @param {string} [options.activeClass] - The class that will be applied to the module element when it is shown\n     * @param {string} [options.disabledClass] - The class that will be applied to the module element when disabled\n     * @param {string} [options.errorClass] - The class that will be applied to the module element when it has a load error\n     * @param {Array|string} [options.styles] - Array of stylesheet urls or single url\n     * @param {string|HTMLTemplateElement|HTMLElement} [options.template] - The template to load (can be url to html or handlebars file or html template, just an element, or an html string)\n     * @param {Object|string} [options.data] - The data or url to the module's data\n     * @param {Object} [options.requestOptions] - The request options to use when running the fetch method to get data\n     * @param {Module~onLoad} [options.onLoad] - A function that fires when module's load() method is called\n     * @param {Module~onShow} [options.onShow] - A function that fires when module is shown\n     * @param {Module~onHide} [options.onHide] - A function that fires when module is hidden\n     * @param {Module~onEnable} [options.onEnable] - A function that fires when module is enabled\n     * @param {Module~onDisable} [options.onDisable] - A function that fires when module is disabled\n     * @param {Module~onError} [options.onError] - A function that fires when module goes into error state\n     * @param {Object} [options.helpers] - An object containing a mapping of handlebar helper ids (keys) to their functions (values) to use when handlebar compiling\n     */\n    function Module(el, options) {\n        _classCallCheck(this, Module);\n\n        options = options || {};\n\n        if (!el) {\n            console.error(\"Module error: No element was passed to constructor\");\n        }\n\n        this.el = el;\n\n        var defaultOptions = {\n            loadedClass: 'module-loaded',\n            activeClass: 'module-active',\n            disabledClass: 'module-disabled',\n            errorClass: 'module-error',\n            styles: [],\n            template: \"\",\n            data: null,\n            requestOptions: null,\n            onLoad: function onLoad() {},\n            onShow: function onShow() {},\n            onHide: function onHide() {},\n            onEnable: function onEnable() {},\n            onDisable: function onDisable() {},\n            onError: function onError() {},\n            helpers: {}\n        };\n\n        // we are adding default options to passed custom options\n        // to ensure all expected options exist when instantiating sub classes\n        for (var name in defaultOptions) {\n            if (defaultOptions.hasOwnProperty(name)) {\n                if (!options[name]) {\n                    options[name] = defaultOptions[name];\n                }\n            }\n        }\n\n        this.options = options;\n\n        // setup helpers\n        for (var _name in options.helpers) {\n            if (options.helpers.hasOwnProperty(_name)) {\n                runtime.registerHelper(_name, options.helpers[_name]);\n            }\n        }\n\n        this._handleElementInitialState();\n\n        this.subModules = {};\n        this.active = false;\n        this.loaded = false;\n        this._elChildren = [];\n        this.loadStatus = 'notLoaded';\n    }\n\n    /**\n     * Loads the module's styles, template, and data and applies loaded css classes and state.\n     * @return {Promise}\n     */\n\n\n    _createClass(Module, [{\n        key: 'load',\n        value: function load() {\n            var _this = this;\n\n            if (!this.loaded) {\n                this.loadStatus = 'loading';\n                // load all subModules\n                var loadPromises = [];\n                for (var key in this.subModules) {\n                    if (this.subModules.hasOwnProperty(key)) {\n                        var view = this.subModules[key];\n                        loadPromises.push(view.load());\n                    }\n                }\n                return Promise.all(loadPromises).then(function () {\n                    return _this.getStyles(_this.options.styles).then(function () {\n                        return _this.fetchData(_this.options.data, _this.options.requestOptions).then(function (data) {\n                            return _this.getTemplate(data).then(function (nodes) {\n                                nodes = nodes || [];\n                                var frag = document.createDocumentFragment();\n                                // hold reference to children to remove them later\n                                while (nodes.length) {\n                                    // order matters here so we always start from the first node\n                                    var node = nodes[0];\n                                    _this._elChildren.push(node);\n                                    // appending child changes length of nodes array\n                                    frag.appendChild(node);\n                                }\n                                _this.el.appendChild(frag);\n                                _this.loaded = true;\n                                _this.loadStatus = 'loaded';\n                                if (_this.el) {\n                                    _this.el.classList.add(_this.options.loadedClass);\n                                }\n                                _this.options.onLoad();\n                            });\n                        });\n                    });\n                }).catch(function (e) {\n                    _this.error(e);\n                    // throw error to reject promise\n                    throw e;\n                });\n            } else {\n                return Promise.resolve();\n            }\n        }\n\n        /**\n         * Makes a request to get the data for the module.\n         * @param {string|Object} url - The url to fetch data from or data object\n         * @param [options] - fetch options\n         * @returns {*}\n         */\n\n    }, {\n        key: 'fetchData',\n        value: function fetchData(url, options) {\n            if (typeof url !== 'string') {\n                return Promise.resolve(url);\n            }\n            return _resourceManagerJs2.default.fetchData(url, options);\n        }\n\n        /**\n         * Gets the css files for the module.\n         * @param cssUrl\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'getStyles',\n        value: function getStyles(cssUrl) {\n            return _resourceManagerJs2.default.loadCss(cssUrl);\n        }\n\n        /**\n         * Gets the html template for the module.\n         * @param {Object} [data] - The data to inject (if template is a handlebar file)\n         * @returns {Promise} Returns a document fragment containing the contents of the template with the data injected\n         */\n\n    }, {\n        key: 'getTemplate',\n        value: function getTemplate(data) {\n            var template = this.options.template || '';\n\n            if (!template) {\n                return Promise.resolve();\n            }\n\n            var isHandlebarFile = function isHandlebarFile(filePath) {\n                if (filePath) {\n                    var frags = filePath.split('.');\n                    var ext = frags[frags.length - 1];\n                    return ext === 'hbs';\n                }\n            };\n\n            if (this._isHTMLTemplate(template)) {\n                // template element\n                // TODO: update to accommodate situations where the user wants to adoptNode instead of cloning it\n                var tpl = document.importNode(template.content, true);\n                return Promise.resolve(tpl.childNodes);\n            } else if (template instanceof HTMLElement) {\n                // already an html element\n                var frag = document.createDocumentFragment();\n                frag.appendChild(template);\n                return Promise.resolve(frag.childNodes);\n            } else {\n                var _ret = function () {\n                    // html or handlebar file\n                    var tempDiv = document.createElement('div');\n                    return {\n                        v: _resourceManagerJs2.default.loadTemplate(template, tempDiv, data).then(function (html) {\n                            return tempDiv.childNodes;\n                        })\n                    };\n                }();\n\n                if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n            }\n        }\n\n        /**\n         * Checks if the provided template argument is indeed an html template element.\n         * This is mainly for testing purposes where phantom is not aware of HTMLTemplateElement\n         * @param template\n         * @returns {boolean}\n         * @private\n         */\n\n    }, {\n        key: '_isHTMLTemplate',\n        value: function _isHTMLTemplate(template) {\n            return template instanceof HTMLTemplateElement;\n        }\n\n        /**\n         * Triggers a load error on the module.\n         * @param {Object} [err] - The error object to trigger\n         * @return {Promise} Returns a promise when erroring operation is complete\n         */\n\n    }, {\n        key: 'error',\n        value: function error(err) {\n            var e = err || new Error();\n\n            this.el.classList.add(this.options.errorClass);\n\n            this.errored = true;\n            this.loaded = false;\n            this.loadStatus = 'notLoaded';\n\n            this.options.onError(e);\n            return this.waitForTransition().then(function () {\n                return e;\n            });\n        }\n\n        /**\n         * Enables the module.\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'enable',\n        value: function enable() {\n            var el = this.el;\n            if (el) {\n                el.classList.remove(this.options.disabledClass);\n            }\n            this.disabled = false;\n            this.options.onEnable();\n            return this.waitForTransition();\n        }\n\n        /**\n         * Disables the module.\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'disable',\n        value: function disable() {\n            var el = this.el;\n            if (el) {\n                el.classList.add(this.options.disabledClass);\n            }\n            this.disabled = true;\n\n            this.options.onDisable();\n            return this.waitForTransition();\n        }\n\n        /**\n         * Shows the module.\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'show',\n        value: function show() {\n            var el = this.el;\n            if (el) {\n                el.classList.add(this.options.activeClass);\n            }\n            this.active = true;\n            this.options.onShow();\n            return this.waitForTransition();\n        }\n\n        /**\n         * Hides the module.\n         * @return {Promise}\n         */\n\n    }, {\n        key: 'hide',\n        value: function hide() {\n            var el = this.el;\n            if (el) {\n                el.classList.remove(this.options.activeClass);\n            }\n            this.active = false;\n            this.options.onHide();\n            return this.waitForTransition();\n        }\n\n        /**\n         * Sets up element internally by evaluating its initial state.\n         * @private\n         */\n\n    }, {\n        key: '_handleElementInitialState',\n        value: function _handleElementInitialState() {\n            var el = this.el;\n            if (!el) {\n                return;\n            }\n            if (el.classList.contains(this.options.disabledClass)) {\n                this._origDisabled = true;\n                this.disable();\n            }\n\n            if (el.classList.contains(this.options.errorClass)) {\n                this._origError = true;\n                this.error(new Error());\n            }\n        }\n\n        /**\n         * Restores the elements classes back to the way they were before instantiation.\n         * @private\n         */\n\n    }, {\n        key: '_resetElementInitialState',\n        value: function _resetElementInitialState() {\n            var options = this.options,\n                disabledClass = options.disabledClass,\n                errorClass = options.errorClass;\n\n            if (!this.el) {\n                return;\n            }\n            if (this._origDisabled) {\n                this.el.classList.add(disabledClass);\n            } else {\n                this.el.classList.remove(disabledClass);\n            }\n\n            if (!this._origError) {\n                this.el.classList.remove(errorClass);\n            } else {\n                this.el.classList.add(errorClass);\n            }\n        }\n\n        /**\n         * Builds a transition promise that waits to resolve until the module el's CSS transition is completed (if applicable).\n         * @returns {Promise} Returns a promise that resolves when the element has finished animating\n         */\n\n    }, {\n        key: 'waitForTransition',\n        value: function waitForTransition() {\n            var _this2 = this;\n\n            var duration = this.getTransitionDuration();\n            return new Promise(function (resolve) {\n                if (duration > 0) {\n                    setTimeout(resolve.bind(_this2, _this2.el), duration);\n                } else {\n                    resolve(_this2.el);\n                }\n            });\n        }\n\n        /**\n         * Gets the time is takes for the element to transition to its show state.\n         * @returns {Number} Returns the total CSS transition time in milliseconds\n         */\n\n    }, {\n        key: 'getTransitionDuration',\n        value: function getTransitionDuration() {\n            var delayProp = this.getCssComputedProperty('transition-delay') || '0ms',\n                durationProp = this.getCssComputedProperty('transition-duration') || '0ms',\n                times = Array.isArray(durationProp) ? durationProp : [durationProp],\n                delay = Array.isArray(delayProp) ? delayProp : [delayProp],\n                highest = 0,\n                map;\n\n            times.push.apply(times, delay); // account for delay\n\n            // calculate highest number of time\n            times.forEach(function (value) {\n                value.split(',').forEach(function (v) {\n                    v = convertCssTimeValueToMilliseconds(v);\n                    map = getCssPropUnitMap(v);\n                    if (map.num > highest) {\n                        highest = map.num;\n                    }\n                });\n            });\n\n            return highest;\n        }\n\n        /**\n         * Gets the computed property of the element.\n         * @param {string} prop - The name of the property to get\n         * @returns {string} Returns the value of the property\n         */\n\n    }, {\n        key: 'getCssComputedProperty',\n        value: function getCssComputedProperty(prop) {\n            var style = window.getComputedStyle(this.el);\n            return style.getPropertyValue(prop) || this.el.style[getJsPropName(prop)];\n        }\n\n        /**\n         * Gets the closest ancestor element that has a css class.\n         * @param {string} className - The class name that the ancestor must have to match\n         * @param {Element} startTarget - The element the method should start from\n         */\n\n    }, {\n        key: 'getClosestAncestorElementByClassName',\n        value: function getClosestAncestorElementByClassName(className, startTarget) {\n            var result = null;\n            traverseEachParent(function (parent) {\n                if (parent.classList.contains(className)) {\n                    result = parent;\n                    return false;\n                }\n            }, startTarget || this.el.parentNode || this.el);\n            return result;\n        }\n\n        /**\n         * Destroys all nested views and cleans up.\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var _this3 = this;\n\n            var subModules = this.subModules;\n\n            for (var key in subModules) {\n                if (subModules.hasOwnProperty(key) && subModules[key]) {\n                    subModules[key].destroy();\n                }\n            }\n            this.subModules = {};\n            this.active = false;\n            this.loaded = false;\n            this.errored = false;\n            this.loadStatus = 'notLoaded';\n\n            this.el.classList.remove(this.options.loadedClass);\n            this.el.classList.remove(this.options.activeClass);\n\n            this._resetElementInitialState();\n\n            this._elChildren.forEach(function (el) {\n                if (_this3.el.contains(el)) {\n                    _this3.el.removeChild(el);\n                }\n            });\n            this._elChildren = [];\n        }\n    }]);\n\n    return Module;\n}();\n\nexports.default = Module;\n\n},{\"es6-promise\":4,\"handlebars/runtime\":35,\"resource-manager-js\":36}],38:[function(require,module,exports){\n'use strict';\n\nmodule.exports = require('./lib')\n\n},{\"./lib\":43}],39:[function(require,module,exports){\n'use strict';\n\nvar asap = require('asap/raw');\n\nfunction noop() {}\n\n// States:\n//\n// 0 - pending\n// 1 - fulfilled with _value\n// 2 - rejected with _value\n// 3 - adopted the state of another promise, _value\n//\n// once the state is no longer pending (0) it is immutable\n\n// All `_` prefixed properties will be reduced to `_{random number}`\n// at build time to obfuscate them and discourage their use.\n// We don't use symbols or Object.defineProperty to fully hide them\n// because the performance isn't good enough.\n\n\n// to avoid using try/catch inside critical functions, we\n// extract them to here.\nvar LAST_ERROR = null;\nvar IS_ERROR = {};\nfunction getThen(obj) {\n  try {\n    return obj.then;\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nfunction tryCallOne(fn, a) {\n  try {\n    return fn(a);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\nfunction tryCallTwo(fn, a, b) {\n  try {\n    fn(a, b);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nmodule.exports = Promise;\n\nfunction Promise(fn) {\n  if (typeof this !== 'object') {\n    throw new TypeError('Promises must be constructed via new');\n  }\n  if (typeof fn !== 'function') {\n    throw new TypeError('not a function');\n  }\n  this._45 = 0;\n  this._81 = 0;\n  this._65 = null;\n  this._54 = null;\n  if (fn === noop) return;\n  doResolve(fn, this);\n}\nPromise._10 = null;\nPromise._97 = null;\nPromise._61 = noop;\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  if (this.constructor !== Promise) {\n    return safeThen(this, onFulfilled, onRejected);\n  }\n  var res = new Promise(noop);\n  handle(this, new Handler(onFulfilled, onRejected, res));\n  return res;\n};\n\nfunction safeThen(self, onFulfilled, onRejected) {\n  return new self.constructor(function (resolve, reject) {\n    var res = new Promise(noop);\n    res.then(resolve, reject);\n    handle(self, new Handler(onFulfilled, onRejected, res));\n  });\n};\nfunction handle(self, deferred) {\n  while (self._81 === 3) {\n    self = self._65;\n  }\n  if (Promise._10) {\n    Promise._10(self);\n  }\n  if (self._81 === 0) {\n    if (self._45 === 0) {\n      self._45 = 1;\n      self._54 = deferred;\n      return;\n    }\n    if (self._45 === 1) {\n      self._45 = 2;\n      self._54 = [self._54, deferred];\n      return;\n    }\n    self._54.push(deferred);\n    return;\n  }\n  handleResolved(self, deferred);\n}\n\nfunction handleResolved(self, deferred) {\n  asap(function() {\n    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      if (self._81 === 1) {\n        resolve(deferred.promise, self._65);\n      } else {\n        reject(deferred.promise, self._65);\n      }\n      return;\n    }\n    var ret = tryCallOne(cb, self._65);\n    if (ret === IS_ERROR) {\n      reject(deferred.promise, LAST_ERROR);\n    } else {\n      resolve(deferred.promise, ret);\n    }\n  });\n}\nfunction resolve(self, newValue) {\n  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n  if (newValue === self) {\n    return reject(\n      self,\n      new TypeError('A promise cannot be resolved with itself.')\n    );\n  }\n  if (\n    newValue &&\n    (typeof newValue === 'object' || typeof newValue === 'function')\n  ) {\n    var then = getThen(newValue);\n    if (then === IS_ERROR) {\n      return reject(self, LAST_ERROR);\n    }\n    if (\n      then === self.then &&\n      newValue instanceof Promise\n    ) {\n      self._81 = 3;\n      self._65 = newValue;\n      finale(self);\n      return;\n    } else if (typeof then === 'function') {\n      doResolve(then.bind(newValue), self);\n      return;\n    }\n  }\n  self._81 = 1;\n  self._65 = newValue;\n  finale(self);\n}\n\nfunction reject(self, newValue) {\n  self._81 = 2;\n  self._65 = newValue;\n  if (Promise._97) {\n    Promise._97(self, newValue);\n  }\n  finale(self);\n}\nfunction finale(self) {\n  if (self._45 === 1) {\n    handle(self, self._54);\n    self._54 = null;\n  }\n  if (self._45 === 2) {\n    for (var i = 0; i < self._54.length; i++) {\n      handle(self, self._54[i]);\n    }\n    self._54 = null;\n  }\n}\n\nfunction Handler(onFulfilled, onRejected, promise){\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, promise) {\n  var done = false;\n  var res = tryCallTwo(fn, function (value) {\n    if (done) return;\n    done = true;\n    resolve(promise, value);\n  }, function (reason) {\n    if (done) return;\n    done = true;\n    reject(promise, reason);\n  })\n  if (!done && res === IS_ERROR) {\n    done = true;\n    reject(promise, LAST_ERROR);\n  }\n}\n\n},{\"asap/raw\":3}],40:[function(require,module,exports){\n'use strict';\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\nPromise.prototype.done = function (onFulfilled, onRejected) {\n  var self = arguments.length ? this.then.apply(this, arguments) : this;\n  self.then(null, function (err) {\n    setTimeout(function () {\n      throw err;\n    }, 0);\n  });\n};\n\n},{\"./core.js\":39}],41:[function(require,module,exports){\n'use strict';\n\n//This file contains the ES6 extensions to the core Promises/A+ API\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\n\n/* Static Functions */\n\nvar TRUE = valuePromise(true);\nvar FALSE = valuePromise(false);\nvar NULL = valuePromise(null);\nvar UNDEFINED = valuePromise(undefined);\nvar ZERO = valuePromise(0);\nvar EMPTYSTRING = valuePromise('');\n\nfunction valuePromise(value) {\n  var p = new Promise(Promise._61);\n  p._81 = 1;\n  p._65 = value;\n  return p;\n}\nPromise.resolve = function (value) {\n  if (value instanceof Promise) return value;\n\n  if (value === null) return NULL;\n  if (value === undefined) return UNDEFINED;\n  if (value === true) return TRUE;\n  if (value === false) return FALSE;\n  if (value === 0) return ZERO;\n  if (value === '') return EMPTYSTRING;\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    try {\n      var then = value.then;\n      if (typeof then === 'function') {\n        return new Promise(then.bind(value));\n      }\n    } catch (ex) {\n      return new Promise(function (resolve, reject) {\n        reject(ex);\n      });\n    }\n  }\n  return valuePromise(value);\n};\n\nPromise.all = function (arr) {\n  var args = Array.prototype.slice.call(arr);\n\n  return new Promise(function (resolve, reject) {\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n    function res(i, val) {\n      if (val && (typeof val === 'object' || typeof val === 'function')) {\n        if (val instanceof Promise && val.then === Promise.prototype.then) {\n          while (val._81 === 3) {\n            val = val._65;\n          }\n          if (val._81 === 1) return res(i, val._65);\n          if (val._81 === 2) reject(val._65);\n          val.then(function (val) {\n            res(i, val);\n          }, reject);\n          return;\n        } else {\n          var then = val.then;\n          if (typeof then === 'function') {\n            var p = new Promise(then.bind(val));\n            p.then(function (val) {\n              res(i, val);\n            }, reject);\n            return;\n          }\n        }\n      }\n      args[i] = val;\n      if (--remaining === 0) {\n        resolve(args);\n      }\n    }\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.reject = function (value) {\n  return new Promise(function (resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function (values) {\n  return new Promise(function (resolve, reject) {\n    values.forEach(function(value){\n      Promise.resolve(value).then(resolve, reject);\n    });\n  });\n};\n\n/* Prototype Methods */\n\nPromise.prototype['catch'] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n\n},{\"./core.js\":39}],42:[function(require,module,exports){\n'use strict';\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\nPromise.prototype['finally'] = function (f) {\n  return this.then(function (value) {\n    return Promise.resolve(f()).then(function () {\n      return value;\n    });\n  }, function (err) {\n    return Promise.resolve(f()).then(function () {\n      throw err;\n    });\n  });\n};\n\n},{\"./core.js\":39}],43:[function(require,module,exports){\n'use strict';\n\nmodule.exports = require('./core.js');\nrequire('./done.js');\nrequire('./finally.js');\nrequire('./es6-extensions.js');\nrequire('./node-extensions.js');\nrequire('./synchronous.js');\n\n},{\"./core.js\":39,\"./done.js\":40,\"./es6-extensions.js\":41,\"./finally.js\":42,\"./node-extensions.js\":44,\"./synchronous.js\":45}],44:[function(require,module,exports){\n'use strict';\n\n// This file contains then/promise specific extensions that are only useful\n// for node.js interop\n\nvar Promise = require('./core.js');\nvar asap = require('asap');\n\nmodule.exports = Promise;\n\n/* Static Functions */\n\nPromise.denodeify = function (fn, argumentCount) {\n  if (\n    typeof argumentCount === 'number' && argumentCount !== Infinity\n  ) {\n    return denodeifyWithCount(fn, argumentCount);\n  } else {\n    return denodeifyWithoutCount(fn);\n  }\n}\n\nvar callbackFn = (\n  'function (err, res) {' +\n  'if (err) { rj(err); } else { rs(res); }' +\n  '}'\n);\nfunction denodeifyWithCount(fn, argumentCount) {\n  var args = [];\n  for (var i = 0; i < argumentCount; i++) {\n    args.push('a' + i);\n  }\n  var body = [\n    'return function (' + args.join(',') + ') {',\n    'var self = this;',\n    'return new Promise(function (rs, rj) {',\n    'var res = fn.call(',\n    ['self'].concat(args).concat([callbackFn]).join(','),\n    ');',\n    'if (res &&',\n    '(typeof res === \"object\" || typeof res === \"function\") &&',\n    'typeof res.then === \"function\"',\n    ') {rs(res);}',\n    '});',\n    '};'\n  ].join('');\n  return Function(['Promise', 'fn'], body)(Promise, fn);\n}\nfunction denodeifyWithoutCount(fn) {\n  var fnLength = Math.max(fn.length - 1, 3);\n  var args = [];\n  for (var i = 0; i < fnLength; i++) {\n    args.push('a' + i);\n  }\n  var body = [\n    'return function (' + args.join(',') + ') {',\n    'var self = this;',\n    'var args;',\n    'var argLength = arguments.length;',\n    'if (arguments.length > ' + fnLength + ') {',\n    'args = new Array(arguments.length + 1);',\n    'for (var i = 0; i < arguments.length; i++) {',\n    'args[i] = arguments[i];',\n    '}',\n    '}',\n    'return new Promise(function (rs, rj) {',\n    'var cb = ' + callbackFn + ';',\n    'var res;',\n    'switch (argLength) {',\n    args.concat(['extra']).map(function (_, index) {\n      return (\n        'case ' + (index) + ':' +\n        'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +\n        'break;'\n      );\n    }).join(''),\n    'default:',\n    'args[argLength] = cb;',\n    'res = fn.apply(self, args);',\n    '}',\n    \n    'if (res &&',\n    '(typeof res === \"object\" || typeof res === \"function\") &&',\n    'typeof res.then === \"function\"',\n    ') {rs(res);}',\n    '});',\n    '};'\n  ].join('');\n\n  return Function(\n    ['Promise', 'fn'],\n    body\n  )(Promise, fn);\n}\n\nPromise.nodeify = function (fn) {\n  return function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback =\n      typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    var ctx = this;\n    try {\n      return fn.apply(this, arguments).nodeify(callback, ctx);\n    } catch (ex) {\n      if (callback === null || typeof callback == 'undefined') {\n        return new Promise(function (resolve, reject) {\n          reject(ex);\n        });\n      } else {\n        asap(function () {\n          callback.call(ctx, ex);\n        })\n      }\n    }\n  }\n}\n\nPromise.prototype.nodeify = function (callback, ctx) {\n  if (typeof callback != 'function') return this;\n\n  this.then(function (value) {\n    asap(function () {\n      callback.call(ctx, null, value);\n    });\n  }, function (err) {\n    asap(function () {\n      callback.call(ctx, err);\n    });\n  });\n}\n\n},{\"./core.js\":39,\"asap\":2}],45:[function(require,module,exports){\n'use strict';\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\nPromise.enableSynchronous = function () {\n  Promise.prototype.isPending = function() {\n    return this.getState() == 0;\n  };\n\n  Promise.prototype.isFulfilled = function() {\n    return this.getState() == 1;\n  };\n\n  Promise.prototype.isRejected = function() {\n    return this.getState() == 2;\n  };\n\n  Promise.prototype.getValue = function () {\n    if (this._81 === 3) {\n      return this._65.getValue();\n    }\n\n    if (!this.isFulfilled()) {\n      throw new Error('Cannot get a value of an unfulfilled promise.');\n    }\n\n    return this._65;\n  };\n\n  Promise.prototype.getReason = function () {\n    if (this._81 === 3) {\n      return this._65.getReason();\n    }\n\n    if (!this.isRejected()) {\n      throw new Error('Cannot get a rejection reason of a non-rejected promise.');\n    }\n\n    return this._65;\n  };\n\n  Promise.prototype.getState = function () {\n    if (this._81 === 3) {\n      return this._65.getState();\n    }\n    if (this._81 === -1 || this._81 === -2) {\n      return 0;\n    }\n\n    return this._81;\n  };\n};\n\nPromise.disableSynchronous = function() {\n  Promise.prototype.isPending = undefined;\n  Promise.prototype.isFulfilled = undefined;\n  Promise.prototype.isRejected = undefined;\n  Promise.prototype.getValue = undefined;\n  Promise.prototype.getReason = undefined;\n  Promise.prototype.getState = undefined;\n};\n\n},{\"./core.js\":39}],46:[function(require,module,exports){\n/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./source-map/source-node').SourceNode;\n\n},{\"./source-map/source-map-consumer\":53,\"./source-map/source-map-generator\":54,\"./source-map/source-node\":55}],47:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n\n  /**\n   * A data structure which is a combination of an array and a set. Adding a new\n   * member is O(1), testing for membership is O(1), and finding the index of an\n   * element is O(1). Removing elements from the set is not supported. Only\n   * strings are supported for membership.\n   */\n  function ArraySet() {\n    this._array = [];\n    this._set = {};\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  };\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  ArraySet.prototype.size = function ArraySet_size() {\n    return Object.getOwnPropertyNames(this._set).length;\n  };\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var isDuplicate = this.has(aStr);\n    var idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set[util.toSetString(aStr)] = idx;\n    }\n  };\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    return Object.prototype.hasOwnProperty.call(this._set,\n                                                util.toSetString(aStr));\n  };\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (this.has(aStr)) {\n      return this._set[util.toSetString(aStr)];\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n\n  exports.ArraySet = ArraySet;\n\n});\n\n},{\"./util\":56,\"amdefine\":1}],48:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var base64 = require('./base64');\n\n  // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n  // length quantities we use in the source map spec, the first bit is the sign,\n  // the next four bits are the actual value, and the 6th bit is the\n  // continuation bit. The continuation bit tells us whether there are more\n  // digits in this value following this digit.\n  //\n  //   Continuation\n  //   |    Sign\n  //   |    |\n  //   V    V\n  //   101011\n\n  var VLQ_BASE_SHIFT = 5;\n\n  // binary: 100000\n  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n  // binary: 011111\n  var VLQ_BASE_MASK = VLQ_BASE - 1;\n\n  // binary: 100000\n  var VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n  /**\n   * Converts from a two-complement value to a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n   */\n  function toVLQSigned(aValue) {\n    return aValue < 0\n      ? ((-aValue) << 1) + 1\n      : (aValue << 1) + 0;\n  }\n\n  /**\n   * Converts to a two-complement value from a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n   */\n  function fromVLQSigned(aValue) {\n    var isNegative = (aValue & 1) === 1;\n    var shifted = aValue >> 1;\n    return isNegative\n      ? -shifted\n      : shifted;\n  }\n\n  /**\n   * Returns the base 64 VLQ encoded value.\n   */\n  exports.encode = function base64VLQ_encode(aValue) {\n    var encoded = \"\";\n    var digit;\n\n    var vlq = toVLQSigned(aValue);\n\n    do {\n      digit = vlq & VLQ_BASE_MASK;\n      vlq >>>= VLQ_BASE_SHIFT;\n      if (vlq > 0) {\n        // There are still more digits in this value, so we must make sure the\n        // continuation bit is marked.\n        digit |= VLQ_CONTINUATION_BIT;\n      }\n      encoded += base64.encode(digit);\n    } while (vlq > 0);\n\n    return encoded;\n  };\n\n  /**\n   * Decodes the next base 64 VLQ value from the given string and returns the\n   * value and the rest of the string via the out parameter.\n   */\n  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n    var strLen = aStr.length;\n    var result = 0;\n    var shift = 0;\n    var continuation, digit;\n\n    do {\n      if (aIndex >= strLen) {\n        throw new Error(\"Expected more digits in base 64 VLQ value.\");\n      }\n\n      digit = base64.decode(aStr.charCodeAt(aIndex++));\n      if (digit === -1) {\n        throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n      }\n\n      continuation = !!(digit & VLQ_CONTINUATION_BIT);\n      digit &= VLQ_BASE_MASK;\n      result = result + (digit << shift);\n      shift += VLQ_BASE_SHIFT;\n    } while (continuation);\n\n    aOutParam.value = fromVLQSigned(result);\n    aOutParam.rest = aIndex;\n  };\n\n});\n\n},{\"./base64\":49,\"amdefine\":1}],49:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  /**\n   * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n   */\n  exports.encode = function (number) {\n    if (0 <= number && number < intToCharMap.length) {\n      return intToCharMap[number];\n    }\n    throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n  };\n\n  /**\n   * Decode a single base 64 character code digit to an integer. Returns -1 on\n   * failure.\n   */\n  exports.decode = function (charCode) {\n    var bigA = 65;     // 'A'\n    var bigZ = 90;     // 'Z'\n\n    var littleA = 97;  // 'a'\n    var littleZ = 122; // 'z'\n\n    var zero = 48;     // '0'\n    var nine = 57;     // '9'\n\n    var plus = 43;     // '+'\n    var slash = 47;    // '/'\n\n    var littleOffset = 26;\n    var numberOffset = 52;\n\n    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    if (bigA <= charCode && charCode <= bigZ) {\n      return (charCode - bigA);\n    }\n\n    // 26 - 51: abcdefghijklmnopqrstuvwxyz\n    if (littleA <= charCode && charCode <= littleZ) {\n      return (charCode - littleA + littleOffset);\n    }\n\n    // 52 - 61: 0123456789\n    if (zero <= charCode && charCode <= nine) {\n      return (charCode - zero + numberOffset);\n    }\n\n    // 62: +\n    if (charCode == plus) {\n      return 62;\n    }\n\n    // 63: /\n    if (charCode == slash) {\n      return 63;\n    }\n\n    // Invalid base64 digit.\n    return -1;\n  };\n\n});\n\n},{\"amdefine\":1}],50:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  exports.GREATEST_LOWER_BOUND = 1;\n  exports.LEAST_UPPER_BOUND = 2;\n\n  /**\n   * Recursive implementation of binary search.\n   *\n   * @param aLow Indices here and lower do not contain the needle.\n   * @param aHigh Indices here and higher do not contain the needle.\n   * @param aNeedle The element being searched for.\n   * @param aHaystack The non-empty array being searched.\n   * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   */\n  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n    // This function terminates when one of the following is true:\n    //\n    //   1. We find the exact element we are looking for.\n    //\n    //   2. We did not find the exact element, but we can return the index of\n    //      the next-closest element.\n    //\n    //   3. We did not find the exact element, and there is no next-closest\n    //      element than the one we are searching for, so we return -1.\n    var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n    var cmp = aCompare(aNeedle, aHaystack[mid], true);\n    if (cmp === 0) {\n      // Found the element we are looking for.\n      return mid;\n    }\n    else if (cmp > 0) {\n      // Our needle is greater than aHaystack[mid].\n      if (aHigh - mid > 1) {\n        // The element is in the upper half.\n        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n      }\n\n      // The exact needle element was not found in this haystack. Determine if\n      // we are in termination case (3) or (2) and return the appropriate thing.\n      if (aBias == exports.LEAST_UPPER_BOUND) {\n        return aHigh < aHaystack.length ? aHigh : -1;\n      } else {\n        return mid;\n      }\n    }\n    else {\n      // Our needle is less than aHaystack[mid].\n      if (mid - aLow > 1) {\n        // The element is in the lower half.\n        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n      }\n\n      // we are in termination case (3) or (2) and return the appropriate thing.\n      if (aBias == exports.LEAST_UPPER_BOUND) {\n        return mid;\n      } else {\n        return aLow < 0 ? -1 : aLow;\n      }\n    }\n  }\n\n  /**\n   * This is an implementation of binary search which will always try and return\n   * the index of the closest element if there is no exact hit. This is because\n   * mappings between original and generated line/col pairs are single points,\n   * and there is an implicit region between each of them, so a miss just means\n   * that you aren't on the very start of a region.\n   *\n   * @param aNeedle The element you are looking for.\n   * @param aHaystack The array that is being searched.\n   * @param aCompare A function which takes the needle and an element in the\n   *     array and returns -1, 0, or 1 depending on whether the needle is less\n   *     than, equal to, or greater than the element, respectively.\n   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n   */\n  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n    if (aHaystack.length === 0) {\n      return -1;\n    }\n\n    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n    if (index < 0) {\n      return -1;\n    }\n\n    // We have found either the exact element, or the next-closest element than\n    // the one we are searching for. However, there may be more than one such\n    // element. Make sure we always return the smallest of these.\n    while (index - 1 >= 0) {\n      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n        break;\n      }\n      --index;\n    }\n\n    return index;\n  };\n\n});\n\n},{\"amdefine\":1}],51:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n\n  /**\n   * Determine whether mappingB is after mappingA with respect to generated\n   * position.\n   */\n  function generatedPositionAfter(mappingA, mappingB) {\n    // Optimized for most common case\n    var lineA = mappingA.generatedLine;\n    var lineB = mappingB.generatedLine;\n    var columnA = mappingA.generatedColumn;\n    var columnB = mappingB.generatedColumn;\n    return lineB > lineA || lineB == lineA && columnB >= columnA ||\n           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n  }\n\n  /**\n   * A data structure to provide a sorted view of accumulated mappings in a\n   * performance conscious manner. It trades a neglibable overhead in general\n   * case for a large speedup in case of mappings being added in order.\n   */\n  function MappingList() {\n    this._array = [];\n    this._sorted = true;\n    // Serves as infimum\n    this._last = {generatedLine: -1, generatedColumn: 0};\n  }\n\n  /**\n   * Iterate through internal items. This method takes the same arguments that\n   * `Array.prototype.forEach` takes.\n   *\n   * NOTE: The order of the mappings is NOT guaranteed.\n   */\n  MappingList.prototype.unsortedForEach =\n    function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    };\n\n  /**\n   * Add the given source mapping.\n   *\n   * @param Object aMapping\n   */\n  MappingList.prototype.add = function MappingList_add(aMapping) {\n    var mapping;\n    if (generatedPositionAfter(this._last, aMapping)) {\n      this._last = aMapping;\n      this._array.push(aMapping);\n    } else {\n      this._sorted = false;\n      this._array.push(aMapping);\n    }\n  };\n\n  /**\n   * Returns the flat, sorted array of mappings. The mappings are sorted by\n   * generated position.\n   *\n   * WARNING: This method returns internal data without copying, for\n   * performance. The return value must NOT be mutated, and should be treated as\n   * an immutable borrow. If you want to take ownership, you must make your own\n   * copy.\n   */\n  MappingList.prototype.toArray = function MappingList_toArray() {\n    if (!this._sorted) {\n      this._array.sort(util.compareByGeneratedPositionsInflated);\n      this._sorted = true;\n    }\n    return this._array;\n  };\n\n  exports.MappingList = MappingList;\n\n});\n\n},{\"./util\":56,\"amdefine\":1}],52:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  // It turns out that some (most?) JavaScript engines don't self-host\n  // `Array.prototype.sort`. This makes sense because C++ will likely remain\n  // faster than JS when doing raw CPU-intensive sorting. However, when using a\n  // custom comparator function, calling back and forth between the VM's C++ and\n  // JIT'd JS is rather slow *and* loses JIT type information, resulting in\n  // worse generated code for the comparator function than would be optimal. In\n  // fact, when sorting with a comparator, these costs outweigh the benefits of\n  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n  // a ~3500ms mean speed-up in `bench/bench.html`.\n\n  /**\n   * Swap the elements indexed by `x` and `y` in the array `ary`.\n   *\n   * @param {Array} ary\n   *        The array.\n   * @param {Number} x\n   *        The index of the first item.\n   * @param {Number} y\n   *        The index of the second item.\n   */\n  function swap(ary, x, y) {\n    var temp = ary[x];\n    ary[x] = ary[y];\n    ary[y] = temp;\n  }\n\n  /**\n   * Returns a random integer within the range `low .. high` inclusive.\n   *\n   * @param {Number} low\n   *        The lower bound on the range.\n   * @param {Number} high\n   *        The upper bound on the range.\n   */\n  function randomIntInRange(low, high) {\n    return Math.round(low + (Math.random() * (high - low)));\n  }\n\n  /**\n   * The Quick Sort algorithm.\n   *\n   * @param {Array} ary\n   *        An array to sort.\n   * @param {function} comparator\n   *        Function to use to compare two items.\n   * @param {Number} p\n   *        Start index of the array\n   * @param {Number} r\n   *        End index of the array\n   */\n  function doQuickSort(ary, comparator, p, r) {\n    // If our lower bound is less than our upper bound, we (1) partition the\n    // array into two pieces and (2) recurse on each half. If it is not, this is\n    // the empty array and our base case.\n\n    if (p < r) {\n      // (1) Partitioning.\n      //\n      // The partitioning chooses a pivot between `p` and `r` and moves all\n      // elements that are less than or equal to the pivot to the before it, and\n      // all the elements that are greater than it after it. The effect is that\n      // once partition is done, the pivot is in the exact place it will be when\n      // the array is put in sorted order, and it will not need to be moved\n      // again. This runs in O(n) time.\n\n      // Always choose a random pivot so that an input array which is reverse\n      // sorted does not cause O(n^2) running time.\n      var pivotIndex = randomIntInRange(p, r);\n      var i = p - 1;\n\n      swap(ary, pivotIndex, r);\n      var pivot = ary[r];\n\n      // Immediately after `j` is incremented in this loop, the following hold\n      // true:\n      //\n      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n      //\n      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n      for (var j = p; j < r; j++) {\n        if (comparator(ary[j], pivot) <= 0) {\n          i += 1;\n          swap(ary, i, j);\n        }\n      }\n\n      swap(ary, i + 1, j);\n      var q = i + 1;\n\n      // (2) Recurse on each half.\n\n      doQuickSort(ary, comparator, p, q - 1);\n      doQuickSort(ary, comparator, q + 1, r);\n    }\n  }\n\n  /**\n   * Sort the given array in-place with the given comparator function.\n   *\n   * @param {Array} ary\n   *        An array to sort.\n   * @param {function} comparator\n   *        Function to use to compare two items.\n   */\n  exports.quickSort = function (ary, comparator) {\n    doQuickSort(ary, comparator, 0, ary.length - 1);\n  };\n\n});\n\n},{\"amdefine\":1}],53:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n  var binarySearch = require('./binary-search');\n  var ArraySet = require('./array-set').ArraySet;\n  var base64VLQ = require('./base64-vlq');\n  var quickSort = require('./quick-sort').quickSort;\n\n  function SourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    return sourceMap.sections != null\n      ? new IndexedSourceMapConsumer(sourceMap)\n      : new BasicSourceMapConsumer(sourceMap);\n  }\n\n  SourceMapConsumer.fromSourceMap = function(aSourceMap) {\n    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n  }\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  SourceMapConsumer.prototype._version = 3;\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n  SourceMapConsumer.prototype.__generatedMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n    get: function () {\n      if (!this.__generatedMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__generatedMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype.__originalMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n    get: function () {\n      if (!this.__originalMappings) {\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__originalMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype._charIsMappingSeparator =\n    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n      var c = aStr.charAt(index);\n      return c === \";\" || c === \",\";\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  SourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      throw new Error(\"Subclasses must implement _parseMappings\");\n    };\n\n  SourceMapConsumer.GENERATED_ORDER = 1;\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\n\n  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;\n  SourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  SourceMapConsumer.prototype.eachMapping =\n    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n      var mappings;\n      switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n      }\n\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function (mapping) {\n        var source = mapping.source === null ? null : this._sources.at(mapping.source);\n        if (source != null && sourceRoot != null) {\n          source = util.join(sourceRoot, source);\n        }\n        return {\n          source: source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name === null ? null : this._names.at(mapping.name)\n        };\n      }, this).forEach(aCallback, context);\n    };\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: Optional. the column number in the original source.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.allGeneratedPositionsFor =\n    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      var line = util.getArg(aArgs, 'line');\n\n      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n      // returns the index of the closest mapping less than the needle. By\n      // setting needle.originalColumn to 0, we thus find the last mapping for\n      // the given line, provided such a mapping exists.\n      var needle = {\n        source: util.getArg(aArgs, 'source'),\n        originalLine: line,\n        originalColumn: util.getArg(aArgs, 'column', 0)\n      };\n\n      if (this.sourceRoot != null) {\n        needle.source = util.relative(this.sourceRoot, needle.source);\n      }\n      if (!this._sources.has(needle.source)) {\n        return [];\n      }\n      needle.source = this._sources.indexOf(needle.source);\n\n      var mappings = [];\n\n      var index = this._findMapping(needle,\n                                    this._originalMappings,\n                                    \"originalLine\",\n                                    \"originalColumn\",\n                                    util.compareByOriginalPositions,\n                                    binarySearch.LEAST_UPPER_BOUND);\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (aArgs.column === undefined) {\n          var originalLine = mapping.originalLine;\n\n          // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we found. Since\n          // mappings are sorted, this is guaranteed to find all mappings for\n          // the line we found.\n          while (mapping && mapping.originalLine === originalLine) {\n            mappings.push({\n              line: util.getArg(mapping, 'generatedLine', null),\n              column: util.getArg(mapping, 'generatedColumn', null),\n              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n            });\n\n            mapping = this._originalMappings[++index];\n          }\n        } else {\n          var originalColumn = mapping.originalColumn;\n\n          // Iterate until either we run out of mappings, or we run into\n          // a mapping for a different line than the one we were searching for.\n          // Since mappings are sorted, this is guaranteed to find all mappings for\n          // the line we are searching for.\n          while (mapping &&\n                 mapping.originalLine === line &&\n                 mapping.originalColumn == originalColumn) {\n            mappings.push({\n              line: util.getArg(mapping, 'generatedLine', null),\n              column: util.getArg(mapping, 'generatedColumn', null),\n              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n            });\n\n            mapping = this._originalMappings[++index];\n          }\n        }\n      }\n\n      return mappings;\n    };\n\n  exports.SourceMapConsumer = SourceMapConsumer;\n\n  /**\n   * A BasicSourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: Optional. The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n   */\n  function BasicSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sources = util.getArg(sourceMap, 'sources');\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n    var names = util.getArg(sourceMap, 'names', []);\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n    var mappings = util.getArg(sourceMap, 'mappings');\n    var file = util.getArg(sourceMap, 'file', null);\n\n    // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    sources = sources.map(util.normalize);\n\n    // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n    this._names = ArraySet.fromArray(names, true);\n    this._sources = ArraySet.fromArray(sources, true);\n\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this.file = file;\n  }\n\n  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns BasicSourceMapConsumer\n   */\n  BasicSourceMapConsumer.fromSourceMap =\n    function SourceMapConsumer_fromSourceMap(aSourceMap) {\n      var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                              smc.sourceRoot);\n      smc.file = aSourceMap._file;\n\n      // Because we are modifying the entries (by converting string sources and\n      // names to indices into the sources and names ArraySets), we have to make\n      // a copy of the entry or else bad things happen. Shared mutable state\n      // strikes again! See github issue #191.\n\n      var generatedMappings = aSourceMap._mappings.toArray().slice();\n      var destGeneratedMappings = smc.__generatedMappings = [];\n      var destOriginalMappings = smc.__originalMappings = [];\n\n      for (var i = 0, length = generatedMappings.length; i < length; i++) {\n        var srcMapping = generatedMappings[i];\n        var destMapping = new Mapping;\n        destMapping.generatedLine = srcMapping.generatedLine;\n        destMapping.generatedColumn = srcMapping.generatedColumn;\n\n        if (srcMapping.source) {\n          destMapping.source = sources.indexOf(srcMapping.source);\n          destMapping.originalLine = srcMapping.originalLine;\n          destMapping.originalColumn = srcMapping.originalColumn;\n\n          if (srcMapping.name) {\n            destMapping.name = names.indexOf(srcMapping.name);\n          }\n\n          destOriginalMappings.push(destMapping);\n        }\n\n        destGeneratedMappings.push(destMapping);\n      }\n\n      quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n      return smc;\n    };\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  BasicSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      return this._sources.toArray().map(function (s) {\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n      }, this);\n    }\n  });\n\n  /**\n   * Provide the JIT with a nice shape / hidden class.\n   */\n  function Mapping() {\n    this.generatedLine = 0;\n    this.generatedColumn = 0;\n    this.source = null;\n    this.originalLine = null;\n    this.originalColumn = null;\n    this.name = null;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  BasicSourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var length = aStr.length;\n      var index = 0;\n      var cachedSegments = {};\n      var temp = {};\n      var originalMappings = [];\n      var generatedMappings = [];\n      var mapping, str, segment, end, value;\n\n      while (index < length) {\n        if (aStr.charAt(index) === ';') {\n          generatedLine++;\n          index++;\n          previousGeneratedColumn = 0;\n        }\n        else if (aStr.charAt(index) === ',') {\n          index++;\n        }\n        else {\n          mapping = new Mapping();\n          mapping.generatedLine = generatedLine;\n\n          // Because each offset is encoded relative to the previous one,\n          // many segments often have the same encoding. We can exploit this\n          // fact by caching the parsed variable length fields of each segment,\n          // allowing us to avoid a second parse if we encounter the same\n          // segment again.\n          for (end = index; end < length; end++) {\n            if (this._charIsMappingSeparator(aStr, end)) {\n              break;\n            }\n          }\n          str = aStr.slice(index, end);\n\n          segment = cachedSegments[str];\n          if (segment) {\n            index += str.length;\n          } else {\n            segment = [];\n            while (index < end) {\n              base64VLQ.decode(aStr, index, temp);\n              value = temp.value;\n              index = temp.rest;\n              segment.push(value);\n            }\n\n            if (segment.length === 2) {\n              throw new Error('Found a source, but no line and column');\n            }\n\n            if (segment.length === 3) {\n              throw new Error('Found a source and line, but no column');\n            }\n\n            cachedSegments[str] = segment;\n          }\n\n          // Generated column.\n          mapping.generatedColumn = previousGeneratedColumn + segment[0];\n          previousGeneratedColumn = mapping.generatedColumn;\n\n          if (segment.length > 1) {\n            // Original source.\n            mapping.source = previousSource + segment[1];\n            previousSource += segment[1];\n\n            // Original line.\n            mapping.originalLine = previousOriginalLine + segment[2];\n            previousOriginalLine = mapping.originalLine;\n            // Lines are stored 0-based\n            mapping.originalLine += 1;\n\n            // Original column.\n            mapping.originalColumn = previousOriginalColumn + segment[3];\n            previousOriginalColumn = mapping.originalColumn;\n\n            if (segment.length > 4) {\n              // Original name.\n              mapping.name = previousName + segment[4];\n              previousName += segment[4];\n            }\n          }\n\n          generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === 'number') {\n            originalMappings.push(mapping);\n          }\n        }\n      }\n\n      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n      this.__generatedMappings = generatedMappings;\n\n      quickSort(originalMappings, util.compareByOriginalPositions);\n      this.__originalMappings = originalMappings;\n    };\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  BasicSourceMapConsumer.prototype._findMapping =\n    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                           aColumnName, aComparator, aBias) {\n      // To return the position we are searching for, we must first find the\n      // mapping for the given position and then return the opposite position it\n      // points to. Because the mappings are sorted, we can use binary search to\n      // find the best mapping.\n\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError('Line must be greater than or equal to 1, got '\n                            + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError('Column must be greater than or equal to 0, got '\n                            + aNeedle[aColumnName]);\n      }\n\n      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n    };\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  BasicSourceMapConsumer.prototype.computeColumnSpans =\n    function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n\n        // Mappings do not contain a field for the last generated columnt. We\n        // can come up with an optimistic estimate, however, by assuming that\n        // mappings are contiguous (i.e. given two consecutive mappings, the\n        // first mapping ends where the second one starts).\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n\n        // The last mapping for each line spans the entire line.\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    };\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  BasicSourceMapConsumer.prototype.originalPositionFor =\n    function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(\n        needle,\n        this._generatedMappings,\n        \"generatedLine\",\n        \"generatedColumn\",\n        util.compareByGeneratedPositionsDeflated,\n        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n      );\n\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, 'source', null);\n          if (source !== null) {\n            source = this._sources.at(source);\n            if (this.sourceRoot != null) {\n              source = util.join(this.sourceRoot, source);\n            }\n          }\n          var name = util.getArg(mapping, 'name', null);\n          if (name !== null) {\n            name = this._names.at(name);\n          }\n          return {\n            source: source,\n            line: util.getArg(mapping, 'originalLine', null),\n            column: util.getArg(mapping, 'originalColumn', null),\n            name: name\n          };\n        }\n      }\n\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n    function BasicSourceMapConsumer_hasContentsOfAllSources() {\n      if (!this.sourcesContent) {\n        return false;\n      }\n      return this.sourcesContent.length >= this._sources.size() &&\n        !this.sourcesContent.some(function (sc) { return sc == null; });\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * availible.\n   */\n  BasicSourceMapConsumer.prototype.sourceContentFor =\n    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n\n      if (this.sourceRoot != null) {\n        aSource = util.relative(this.sourceRoot, aSource);\n      }\n\n      if (this._sources.has(aSource)) {\n        return this.sourcesContent[this._sources.indexOf(aSource)];\n      }\n\n      var url;\n      if (this.sourceRoot != null\n          && (url = util.urlParse(this.sourceRoot))) {\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n        // many users. We can help them out when they expect file:// URIs to\n        // behave like it would if they were running a local HTTP server. See\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n        var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\"\n            && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n        }\n\n        if ((!url.path || url.path == \"/\")\n            && this._sources.has(\"/\" + aSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n        }\n      }\n\n      // This function is used recursively from\n      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n      // don't want to throw if we can't find the source - we just want to\n      // return null, so we provide a flag to exit gracefully.\n      if (nullOnMissing) {\n        return null;\n      }\n      else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  BasicSourceMapConsumer.prototype.generatedPositionFor =\n    function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var source = util.getArg(aArgs, 'source');\n      if (this.sourceRoot != null) {\n        source = util.relative(this.sourceRoot, source);\n      }\n      if (!this._sources.has(source)) {\n        return {\n          line: null,\n          column: null,\n          lastColumn: null\n        };\n      }\n      source = this._sources.indexOf(source);\n\n      var needle = {\n        source: source,\n        originalLine: util.getArg(aArgs, 'line'),\n        originalColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(\n        needle,\n        this._originalMappings,\n        \"originalLine\",\n        \"originalColumn\",\n        util.compareByOriginalPositions,\n        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n      );\n\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        if (mapping.source === needle.source) {\n          return {\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          };\n        }\n      }\n\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    };\n\n  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n  /**\n   * An IndexedSourceMapConsumer instance represents a parsed source map which\n   * we can query for information. It differs from BasicSourceMapConsumer in\n   * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n   * input.\n   *\n   * The only parameter is a raw source map (either as a JSON string, or already\n   * parsed to an object). According to the spec for indexed source maps, they\n   * have the following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - file: Optional. The generated file this source map is associated with.\n   *   - sections: A list of section definitions.\n   *\n   * Each value under the \"sections\" field has two fields:\n   *   - offset: The offset into the original specified at which this section\n   *       begins to apply, defined as an object with a \"line\" and \"column\"\n   *       field.\n   *   - map: A source map definition. This source map could also be indexed,\n   *       but doesn't have to be.\n   *\n   * Instead of the \"map\" field, it's also possible to have a \"url\" field\n   * specifying a URL to retrieve a source map from, but that's currently\n   * unsupported.\n   *\n   * Here's an example source map, taken from the source map spec[0], but\n   * modified to omit a section which uses the \"url\" field.\n   *\n   *  {\n   *    version : 3,\n   *    file: \"app.js\",\n   *    sections: [{\n   *      offset: {line:100, column:10},\n   *      map: {\n   *        version : 3,\n   *        file: \"section.js\",\n   *        sources: [\"foo.js\", \"bar.js\"],\n   *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *        mappings: \"AAAA,E;;ABCDE;\"\n   *      }\n   *    }],\n   *  }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n   */\n  function IndexedSourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sections = util.getArg(sourceMap, 'sections');\n\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n\n    var lastOffset = {\n      line: -1,\n      column: 0\n    };\n    this._sections = sections.map(function (s) {\n      if (s.url) {\n        // The url field will require support for asynchronicity.\n        // See https://github.com/mozilla/source-map/issues/16\n        throw new Error('Support for url field in sections not implemented.');\n      }\n      var offset = util.getArg(s, 'offset');\n      var offsetLine = util.getArg(offset, 'line');\n      var offsetColumn = util.getArg(offset, 'column');\n\n      if (offsetLine < lastOffset.line ||\n          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n        throw new Error('Section offsets must be ordered and non-overlapping.');\n      }\n      lastOffset = offset;\n\n      return {\n        generatedOffset: {\n          // The offset fields are 0-based, but we use 1-based indices when\n          // encoding/decoding from VLQ.\n          generatedLine: offsetLine + 1,\n          generatedColumn: offsetColumn + 1\n        },\n        consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n      }\n    });\n  }\n\n  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\n  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  IndexedSourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      var sources = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n          sources.push(this._sections[i].consumer.sources[j]);\n        }\n      };\n      return sources;\n    }\n  });\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  IndexedSourceMapConsumer.prototype.originalPositionFor =\n    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      // Find the section containing the generated position we're trying to map\n      // to an original position.\n      var sectionIndex = binarySearch.search(needle, this._sections,\n        function(needle, section) {\n          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n          if (cmp) {\n            return cmp;\n          }\n\n          return (needle.generatedColumn -\n                  section.generatedOffset.generatedColumn);\n        });\n      var section = this._sections[sectionIndex];\n\n      if (!section) {\n        return {\n          source: null,\n          line: null,\n          column: null,\n          name: null\n        };\n      }\n\n      return section.consumer.originalPositionFor({\n        line: needle.generatedLine -\n          (section.generatedOffset.generatedLine - 1),\n        column: needle.generatedColumn -\n          (section.generatedOffset.generatedLine === needle.generatedLine\n           ? section.generatedOffset.generatedColumn - 1\n           : 0),\n        bias: aArgs.bias\n      });\n    };\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n    function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n      return this._sections.every(function (s) {\n        return s.consumer.hasContentsOfAllSources();\n      });\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  IndexedSourceMapConsumer.prototype.sourceContentFor =\n    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n\n        var content = section.consumer.sourceContentFor(aSource, true);\n        if (content) {\n          return content;\n        }\n      }\n      if (nullOnMissing) {\n        return null;\n      }\n      else {\n        throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n      }\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  IndexedSourceMapConsumer.prototype.generatedPositionFor =\n    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n\n        // Only consider this section if the requested source is in the list of\n        // sources of the consumer.\n        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n          continue;\n        }\n        var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n        if (generatedPosition) {\n          var ret = {\n            line: generatedPosition.line +\n              (section.generatedOffset.generatedLine - 1),\n            column: generatedPosition.column +\n              (section.generatedOffset.generatedLine === generatedPosition.line\n               ? section.generatedOffset.generatedColumn - 1\n               : 0)\n          };\n          return ret;\n        }\n      }\n\n      return {\n        line: null,\n        column: null\n      };\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  IndexedSourceMapConsumer.prototype._parseMappings =\n    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      this.__generatedMappings = [];\n      this.__originalMappings = [];\n      for (var i = 0; i < this._sections.length; i++) {\n        var section = this._sections[i];\n        var sectionMappings = section.consumer._generatedMappings;\n        for (var j = 0; j < sectionMappings.length; j++) {\n          var mapping = sectionMappings[i];\n\n          var source = section.consumer._sources.at(mapping.source);\n          if (section.consumer.sourceRoot !== null) {\n            source = util.join(section.consumer.sourceRoot, source);\n          }\n          this._sources.add(source);\n          source = this._sources.indexOf(source);\n\n          var name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n\n          // The mappings coming from the consumer for the section have\n          // generated positions relative to the start of the section, so we\n          // need to offset them to be relative to the start of the concatenated\n          // generated file.\n          var adjustedMapping = {\n            source: source,\n            generatedLine: mapping.generatedLine +\n              (section.generatedOffset.generatedLine - 1),\n            generatedColumn: mapping.column +\n              (section.generatedOffset.generatedLine === mapping.generatedLine)\n              ? section.generatedOffset.generatedColumn - 1\n              : 0,\n            originalLine: mapping.originalLine,\n            originalColumn: mapping.originalColumn,\n            name: name\n          };\n\n          this.__generatedMappings.push(adjustedMapping);\n          if (typeof adjustedMapping.originalLine === 'number') {\n            this.__originalMappings.push(adjustedMapping);\n          }\n        };\n      };\n\n      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n      quickSort(this.__originalMappings, util.compareByOriginalPositions);\n    };\n\n  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n});\n\n},{\"./array-set\":47,\"./base64-vlq\":48,\"./binary-search\":50,\"./quick-sort\":52,\"./util\":56,\"amdefine\":1}],54:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var base64VLQ = require('./base64-vlq');\n  var util = require('./util');\n  var ArraySet = require('./array-set').ArraySet;\n  var MappingList = require('./mapping-list').MappingList;\n\n  /**\n   * An instance of the SourceMapGenerator represents a source map which is\n   * being built incrementally. You may pass an object with the following\n   * properties:\n   *\n   *   - file: The filename of the generated source.\n   *   - sourceRoot: A root for all relative URLs in this source map.\n   */\n  function SourceMapGenerator(aArgs) {\n    if (!aArgs) {\n      aArgs = {};\n    }\n    this._file = util.getArg(aArgs, 'file', null);\n    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n  }\n\n  SourceMapGenerator.prototype._version = 3;\n\n  /**\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.\n   */\n  SourceMapGenerator.fromSourceMap =\n    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot: sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    };\n\n  /**\n   * Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.\n   */\n  SourceMapGenerator.prototype.addMapping =\n    function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, 'generated');\n      var original = util.getArg(aArgs, 'original', null);\n      var source = util.getArg(aArgs, 'source', null);\n      var name = util.getArg(aArgs, 'name', null);\n\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n\n      if (source != null && !this._sources.has(source)) {\n        this._sources.add(source);\n      }\n\n      if (name != null && !this._names.has(name)) {\n        this._names.add(name);\n      }\n\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source: source,\n        name: name\n      });\n    };\n\n  /**\n   * Set the source content for a source file.\n   */\n  SourceMapGenerator.prototype.setSourceContent =\n    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n\n      if (aSourceContent != null) {\n        // Add the source content to the _sourcesContents map.\n        // Create a new _sourcesContents map if the property is null.\n        if (!this._sourcesContents) {\n          this._sourcesContents = {};\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        // Remove the source file from the _sourcesContents map.\n        // If the _sourcesContents map is empty, set the property to null.\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    };\n\n  /**\n   * Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\n   *        This parameter is needed when the two source maps aren't in the same\n   *        directory, and the source map to be applied contains relative source\n   *        paths. If so, those relative source paths need to be rewritten\n   *        relative to the SourceMapGenerator.\n   */\n  SourceMapGenerator.prototype.applySourceMap =\n    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      // If aSourceFile is omitted, we will use the file property of the SourceMap\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n            'or the source map\\'s \"file\" property. Both were omitted.'\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      // Make \"sourceFile\" relative if an absolute Url is passed.\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      // Applying the SourceMap can add and remove items from the sources and\n      // the names array.\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n\n      // Find mappings for the \"sourceFile\"\n      this._mappings.unsortedForEach(function (mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          // Check if it can be mapped by the source map, then update the mapping.\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            // Copy mapping\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source)\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n\n      // Copy sourcesContents of applied map.\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile = util.join(aSourceMapPath, sourceFile);\n          }\n          if (sourceRoot != null) {\n            sourceFile = util.relative(sourceRoot, sourceFile);\n          }\n          this.setSourceContent(sourceFile, content);\n        }\n      }, this);\n    };\n\n  /**\n   * A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.\n   */\n  SourceMapGenerator.prototype._validateMapping =\n    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                                aName) {\n      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n          && aGenerated.line > 0 && aGenerated.column >= 0\n          && !aOriginal && !aSource && !aName) {\n        // Case 1.\n        return;\n      }\n      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n               && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n               && aGenerated.line > 0 && aGenerated.column >= 0\n               && aOriginal.line > 0 && aOriginal.column >= 0\n               && aSource) {\n        // Cases 2 and 3.\n        return;\n      }\n      else {\n        throw new Error('Invalid mapping: ' + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    };\n\n  /**\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.\n   */\n  SourceMapGenerator.prototype._serializeMappings =\n    function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = '';\n      var mapping;\n\n      var mappings = this._mappings.toArray();\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            result += ';';\n            previousGeneratedLine++;\n          }\n        }\n        else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n              continue;\n            }\n            result += ',';\n          }\n        }\n\n        result += base64VLQ.encode(mapping.generatedColumn\n                                   - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (mapping.source != null) {\n          result += base64VLQ.encode(this._sources.indexOf(mapping.source)\n                                     - previousSource);\n          previousSource = this._sources.indexOf(mapping.source);\n\n          // lines are stored 0-based in SourceMap spec version 3\n          result += base64VLQ.encode(mapping.originalLine - 1\n                                     - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n\n          result += base64VLQ.encode(mapping.originalColumn\n                                     - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (mapping.name != null) {\n            result += base64VLQ.encode(this._names.indexOf(mapping.name)\n                                       - previousName);\n            previousName = this._names.indexOf(mapping.name);\n          }\n        }\n      }\n\n      return result;\n    };\n\n  SourceMapGenerator.prototype._generateSourcesContent =\n    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function (source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents,\n                                                    key)\n          ? this._sourcesContents[key]\n          : null;\n      }, this);\n    };\n\n  /**\n   * Externalize the source map.\n   */\n  SourceMapGenerator.prototype.toJSON =\n    function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n\n      return map;\n    };\n\n  /**\n   * Render the source map being generated to a string.\n   */\n  SourceMapGenerator.prototype.toString =\n    function SourceMapGenerator_toString() {\n      return JSON.stringify(this.toJSON());\n    };\n\n  exports.SourceMapGenerator = SourceMapGenerator;\n\n});\n\n},{\"./array-set\":47,\"./base64-vlq\":48,\"./mapping-list\":51,\"./util\":56,\"amdefine\":1}],55:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n  var util = require('./util');\n\n  // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n  // operating systems these days (capturing the result).\n  var REGEX_NEWLINE = /(\\r?\\n)/;\n\n  // Newline character code for charCodeAt() comparisons\n  var NEWLINE_CODE = 10;\n\n  // Private symbol for identifying `SourceNode`s when multiple versions of\n  // the source-map library are loaded. This MUST NOT CHANGE across\n  // versions!\n  var isSourceNode = \"$$$isSourceNode$$$\";\n\n  /**\n   * SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.\n   */\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  SourceNode.fromStringWithSourceMap =\n    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode();\n\n      // All even indices of this array are one line of the generated code,\n      // while all odd indices are the newlines between two adjacent lines\n      // (since `REGEX_NEWLINE` captures its match).\n      // Processed fragments are removed from this array, by calling `shiftNextLine`.\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var shiftNextLine = function() {\n        var lineContents = remainingLines.shift();\n        // The last line of a file might not have a newline.\n        var newLine = remainingLines.shift() || \"\";\n        return lineContents + newLine;\n      };\n\n      // We need to remember the position of \"remainingLines\"\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n      // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n      var lastMapping = null;\n\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping !== null) {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            var code = \"\";\n            // Associate first line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n            // The remaining code is added without mapping\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            var nextLine = remainingLines[0];\n            var code = nextLine.substr(0, mapping.generatedColumn -\n                                          lastGeneratedColumn);\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                                                lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            // No more remaining code, continue\n            lastMapping = mapping;\n            return;\n          }\n        }\n        // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[0];\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      // We have processed all mappings.\n      if (remainingLines.length > 0) {\n        if (lastMapping) {\n          // Associate the remaining code in the current line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        // and add the remaining lines without any mapping\n        node.add(remainingLines.join(\"\"));\n      }\n\n      // Copy sourcesContent into SourceNode\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n\n      return node;\n\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          var source = aRelativePath\n            ? util.join(aRelativePath, mapping.source)\n            : mapping.source;\n          node.add(new SourceNode(mapping.originalLine,\n                                  mapping.originalColumn,\n                                  source,\n                                  code,\n                                  mapping.name));\n        }\n      }\n    };\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (var i = aChunk.length-1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      }\n      else {\n        if (chunk !== '') {\n          aFn(chunk, { source: this.source,\n                       line: this.line,\n                       column: this.column,\n                       name: this.name });\n        }\n      }\n    }\n  };\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len-1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  };\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    }\n    else if (typeof lastChild === 'string') {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    }\n    else {\n      this.children.push(''.replace(aPattern, aReplacement));\n    }\n    return this;\n  };\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  SourceNode.prototype.setSourceContent =\n    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    };\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walkSourceContents =\n    function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    };\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  };\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if(lastOriginalSource !== original.source\n           || lastOriginalLine !== original.line\n           || lastOriginalColumn !== original.column\n           || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (var idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map: map };\n  };\n\n  exports.SourceNode = SourceNode;\n\n});\n\n},{\"./source-map-generator\":54,\"./util\":56,\"amdefine\":1}],56:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  /**\n   * This is a helper function for getting values from parameter/options\n   * objects.\n   *\n   * @param args The object we are extracting values from\n   * @param name The name of the property we are getting.\n   * @param defaultValue An optional value to return if the property is missing\n   * from the object. If this is not specified and the property is missing, an\n   * error will be thrown.\n   */\n  function getArg(aArgs, aName, aDefaultValue) {\n    if (aName in aArgs) {\n      return aArgs[aName];\n    } else if (arguments.length === 3) {\n      return aDefaultValue;\n    } else {\n      throw new Error('\"' + aName + '\" is a required argument.');\n    }\n  }\n  exports.getArg = getArg;\n\n  var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\n  var dataUrlRegexp = /^data:.+\\,.+$/;\n\n  function urlParse(aUrl) {\n    var match = aUrl.match(urlRegexp);\n    if (!match) {\n      return null;\n    }\n    return {\n      scheme: match[1],\n      auth: match[2],\n      host: match[3],\n      port: match[4],\n      path: match[5]\n    };\n  }\n  exports.urlParse = urlParse;\n\n  function urlGenerate(aParsedUrl) {\n    var url = '';\n    if (aParsedUrl.scheme) {\n      url += aParsedUrl.scheme + ':';\n    }\n    url += '//';\n    if (aParsedUrl.auth) {\n      url += aParsedUrl.auth + '@';\n    }\n    if (aParsedUrl.host) {\n      url += aParsedUrl.host;\n    }\n    if (aParsedUrl.port) {\n      url += \":\" + aParsedUrl.port\n    }\n    if (aParsedUrl.path) {\n      url += aParsedUrl.path;\n    }\n    return url;\n  }\n  exports.urlGenerate = urlGenerate;\n\n  /**\n   * Normalizes a path, or the path portion of a URL:\n   *\n   * - Replaces consequtive slashes with one slash.\n   * - Removes unnecessary '.' parts.\n   * - Removes unnecessary '<dir>/..' parts.\n   *\n   * Based on code in the Node.js 'path' core module.\n   *\n   * @param aPath The path or url to normalize.\n   */\n  function normalize(aPath) {\n    var path = aPath;\n    var url = urlParse(aPath);\n    if (url) {\n      if (!url.path) {\n        return aPath;\n      }\n      path = url.path;\n    }\n    var isAbsolute = (path.charAt(0) === '/');\n\n    var parts = path.split(/\\/+/);\n    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n      part = parts[i];\n      if (part === '.') {\n        parts.splice(i, 1);\n      } else if (part === '..') {\n        up++;\n      } else if (up > 0) {\n        if (part === '') {\n          // The first part is blank if the path is absolute. Trying to go\n          // above the root is a no-op. Therefore we can remove all '..' parts\n          // directly after the root.\n          parts.splice(i + 1, up);\n          up = 0;\n        } else {\n          parts.splice(i, 2);\n          up--;\n        }\n      }\n    }\n    path = parts.join('/');\n\n    if (path === '') {\n      path = isAbsolute ? '/' : '.';\n    }\n\n    if (url) {\n      url.path = path;\n      return urlGenerate(url);\n    }\n    return path;\n  }\n  exports.normalize = normalize;\n\n  /**\n   * Joins two paths/URLs.\n   *\n   * @param aRoot The root path or URL.\n   * @param aPath The path or URL to be joined with the root.\n   *\n   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n   *   first.\n   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n   *   is updated with the result and aRoot is returned. Otherwise the result\n   *   is returned.\n   *   - If aPath is absolute, the result is aPath.\n   *   - Otherwise the two paths are joined with a slash.\n   * - Joining for example 'http://' and 'www.example.com' is also supported.\n   */\n  function join(aRoot, aPath) {\n    if (aRoot === \"\") {\n      aRoot = \".\";\n    }\n    if (aPath === \"\") {\n      aPath = \".\";\n    }\n    var aPathUrl = urlParse(aPath);\n    var aRootUrl = urlParse(aRoot);\n    if (aRootUrl) {\n      aRoot = aRootUrl.path || '/';\n    }\n\n    // `join(foo, '//www.example.org')`\n    if (aPathUrl && !aPathUrl.scheme) {\n      if (aRootUrl) {\n        aPathUrl.scheme = aRootUrl.scheme;\n      }\n      return urlGenerate(aPathUrl);\n    }\n\n    if (aPathUrl || aPath.match(dataUrlRegexp)) {\n      return aPath;\n    }\n\n    // `join('http://', 'www.example.com')`\n    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n      aRootUrl.host = aPath;\n      return urlGenerate(aRootUrl);\n    }\n\n    var joined = aPath.charAt(0) === '/'\n      ? aPath\n      : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n    if (aRootUrl) {\n      aRootUrl.path = joined;\n      return urlGenerate(aRootUrl);\n    }\n    return joined;\n  }\n  exports.join = join;\n\n  /**\n   * Make a path relative to a URL or another path.\n   *\n   * @param aRoot The root path or URL.\n   * @param aPath The path or URL to be made relative to aRoot.\n   */\n  function relative(aRoot, aPath) {\n    if (aRoot === \"\") {\n      aRoot = \".\";\n    }\n\n    aRoot = aRoot.replace(/\\/$/, '');\n\n    // It is possible for the path to be above the root. In this case, simply\n    // checking whether the root is a prefix of the path won't work. Instead, we\n    // need to remove components from the root one by one, until either we find\n    // a prefix that fits, or we run out of components to remove.\n    var level = 0;\n    while (aPath.indexOf(aRoot + '/') !== 0) {\n      var index = aRoot.lastIndexOf(\"/\");\n      if (index < 0) {\n        return aPath;\n      }\n\n      // If the only part of the root that is left is the scheme (i.e. http://,\n      // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n      // have exhausted all components, so the path is not relative to the root.\n      aRoot = aRoot.slice(0, index);\n      if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n        return aPath;\n      }\n\n      ++level;\n    }\n\n    // Make sure we add a \"../\" for each component we removed from the root.\n    return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n  }\n  exports.relative = relative;\n\n  /**\n   * Because behavior goes wacky when you set `__proto__` on objects, we\n   * have to prefix all the strings in our set with an arbitrary character.\n   *\n   * See https://github.com/mozilla/source-map/pull/31 and\n   * https://github.com/mozilla/source-map/issues/30\n   *\n   * @param String aStr\n   */\n  function toSetString(aStr) {\n    return '$' + aStr;\n  }\n  exports.toSetString = toSetString;\n\n  function fromSetString(aStr) {\n    return aStr.substr(1);\n  }\n  exports.fromSetString = fromSetString;\n\n  /**\n   * Comparator between two mappings where the original positions are compared.\n   *\n   * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n   * mappings with the same original source/line/column, but different generated\n   * line and column the same. Useful when searching for a mapping with a\n   * stubbed out mapping.\n   */\n  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n    var cmp = mappingA.source - mappingB.source;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalLine - mappingB.originalLine;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\n    if (cmp !== 0 || onlyCompareOriginal) {\n      return cmp;\n    }\n\n    cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.generatedLine - mappingB.generatedLine;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    return mappingA.name - mappingB.name;\n  };\n  exports.compareByOriginalPositions = compareByOriginalPositions;\n\n  /**\n   * Comparator between two mappings with deflated source and name indices where\n   * the generated positions are compared.\n   *\n   * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n   * mappings with the same generated line and column, but different\n   * source/name/original line and column the same. Useful when searching for a\n   * mapping with a stubbed out mapping.\n   */\n  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n    var cmp = mappingA.generatedLine - mappingB.generatedLine;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n    if (cmp !== 0 || onlyCompareGenerated) {\n      return cmp;\n    }\n\n    cmp = mappingA.source - mappingB.source;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalLine - mappingB.originalLine;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    return mappingA.name - mappingB.name;\n  };\n  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\n  function strcmp(aStr1, aStr2) {\n    if (aStr1 === aStr2) {\n      return 0;\n    }\n\n    if (aStr1 > aStr2) {\n      return 1;\n    }\n\n    return -1;\n  }\n\n  /**\n   * Comparator between two mappings with inflated source and name strings where\n   * the generated positions are compared.\n   */\n  function compareByGeneratedPositionsInflated(mappingA, mappingB) {\n    var cmp = mappingA.generatedLine - mappingB.generatedLine;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = strcmp(mappingA.source, mappingB.source);\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalLine - mappingB.originalLine;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\n    if (cmp !== 0) {\n      return cmp;\n    }\n\n    return strcmp(mappingA.name, mappingB.name);\n  };\n  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n});\n\n},{\"amdefine\":1}],57:[function(require,module,exports){\n(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (typeof input === 'string') {\n      this.url = input\n    } else {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split('\\r\\n').forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n},{}],58:[function(require,module,exports){\n'use strict';\n\n/**\n * A callback function that fires after the left arrow is clicked\n * @callback CarouselArrows~onLeftArrowClick\n */\n\n/**\n * A callback function that fires after the right arrow is clicked\n * @callback CarouselArrows~onRightArrowClick\n */\n\n/**\n * Adds functionality for carousel's left and right arrows.\n * @constructor CarouselArrows\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CarouselArrows = function () {\n\n    /**\n     * When the carousel is instantiated.\n     * @param {object} options - Options passed into instance\n     * @param {HTMLElement} options.leftArrow - The html element to use as the left arrow\n     * @param {HTMLElement} options.rightArrow - The html element to use as the right arrow\n     * @param {HTMLCollection} options.panels - The carousel panel elements that to be associated with the arrows\n     * @param {string} [options.arrowDisabledClass] - The CSS class that gets added to an arrow when it becomes disabled\n     * @param {CarouselArrows~onLeftArrowClick} [options.onLeftArrowClick] - When the left arrow is clicked\n     * @param {CarouselArrows~onRightArrowClick} [options.onRightArrowClick] - When the right arrow is clicked\n     */\n    function CarouselArrows(options) {\n        var _this = this;\n\n        _classCallCheck(this, CarouselArrows);\n\n        options = _extends({\n            leftArrow: null,\n            rightArrow: null,\n            panels: [],\n            arrowDisabledClass: 'carousel-arrow-disabled',\n            onLeftArrowClick: null,\n            onRightArrowClick: null,\n            initialIndex: 0\n        }, options);\n\n        if (!options.leftArrow && !options.rightArrow) {\n            console.error('Carousel Arrows Error: no left and right arrows were passed into constructor');\n        }\n\n        this.options = options;\n\n        this.arrows = [];\n\n        // setup listeners\n        if (options.leftArrow) {\n            this.arrows.push(options.leftArrow);\n            this._leftArrowEventListener = function (e) {\n                return _this.onLeftArrowClick(e);\n            };\n            options.leftArrow.addEventListener('click', this._leftArrowEventListener);\n        }\n\n        if (options.rightArrow) {\n            this.arrows.push(options.rightArrow);\n            this._rightArrowEventListener = function (e) {\n                return _this.onRightArrowClick(e);\n            };\n            options.rightArrow.addEventListener('click', this._rightArrowEventListener);\n        }\n    }\n\n    /**\n     * Updates the arrow based on the supplied panel index.\n     * @param {Number} panelIndex - The new panel index\n     */\n\n\n    _createClass(CarouselArrows, [{\n        key: 'update',\n        value: function update(panelIndex) {\n            var currentItemNum = panelIndex + 1,\n                maxItems = this.options.panels.length,\n                minItems = 1;\n\n            if (currentItemNum < maxItems && currentItemNum > minItems) {\n                // not on first or last item\n                this.enable();\n            } else if (currentItemNum === maxItems && currentItemNum === minItems) {\n                // on the only panel available\n                this.disable();\n            } else if (currentItemNum === maxItems) {\n                // on last item\n                this.disableRightArrow();\n                this.enableLeftArrow();\n            } else if (currentItemNum === minItems) {\n                // on first item\n                this.disableLeftArrow();\n                this.enableRightArrow();\n            }\n        }\n\n        /**\n         * Disables all arrows\n         */\n\n    }, {\n        key: 'disable',\n        value: function disable() {\n            this.disableLeftArrow();\n            this.disableRightArrow();\n        }\n\n        /**\n         * Disables left arrow.\n         */\n\n    }, {\n        key: 'disableLeftArrow',\n        value: function disableLeftArrow() {\n            if (this.options.leftArrow) {\n                this.options.leftArrow.classList.add(this.options.arrowDisabledClass);\n            }\n        }\n\n        /**\n         * Disables right arrow.\n         */\n\n    }, {\n        key: 'disableRightArrow',\n        value: function disableRightArrow() {\n            if (this.options.rightArrow) {\n                this.options.rightArrow.classList.add(this.options.arrowDisabledClass);\n            }\n        }\n\n        /**\n         * Re-enables all arrows.\n         */\n\n    }, {\n        key: 'enable',\n        value: function enable() {\n            this.enableLeftArrow();\n            this.enableRightArrow();\n        }\n\n        /**\n         * Re-enables left arrow.\n         */\n\n    }, {\n        key: 'enableLeftArrow',\n        value: function enableLeftArrow() {\n            if (this.options.leftArrow) {\n                this.options.leftArrow.classList.remove(this.options.arrowDisabledClass);\n            }\n        }\n\n        /**\n         * Re-enables right arrow.\n         */\n\n    }, {\n        key: 'enableRightArrow',\n        value: function enableRightArrow() {\n            if (this.options.rightArrow) {\n                this.options.rightArrow.classList.remove(this.options.arrowDisabledClass);\n            }\n        }\n\n        /**\n         * When the left arrow is clicked.\n         * @param {Event} e\n         */\n\n    }, {\n        key: 'onLeftArrowClick',\n        value: function onLeftArrowClick(e) {\n            var isDisabled = this.options.leftArrow.classList.contains(this.options.arrowDisabledClass);\n            if (this.options.onLeftArrowClick && !isDisabled) {\n                this.options.onLeftArrowClick(e);\n            }\n        }\n\n        /**\n         * When the right arrow is clicked.\n         * @param {Event} e\n         */\n\n    }, {\n        key: 'onRightArrowClick',\n        value: function onRightArrowClick(e) {\n            var isDisabled = this.options.rightArrow.classList.contains(this.options.arrowDisabledClass);\n            if (this.options.onRightArrowClick && !isDisabled) {\n                this.options.onRightArrowClick(e);\n            }\n        }\n\n        /**\n         * Final cleanup of instance.\n         * @memberOf CarouselArrows\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            if (this.options.leftArrow) {\n                this.options.leftArrow.removeEventListener('click', this._leftArrowEventListener);\n            }\n\n            if (this.options.rightArrow) {\n                this.options.rightArrow.removeEventListener('click', this._rightArrowEventListener);\n            }\n        }\n    }]);\n\n    return CarouselArrows;\n}();\n\nexports.default = CarouselArrows;\n\nmodule.exports = exports['default'];\n\n},{}],59:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _promise = require('promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _moduleJs = require('module-js');\n\nvar _moduleJs2 = _interopRequireDefault(_moduleJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar CarouselPanel = function (_Module) {\n    _inherits(CarouselPanel, _Module);\n\n    /**\n     * Sets some stuff up.\n     * @param {HTMLElement} el - The element that represents a panel.\n     * @param {Object} options - The options\n     * @param {String} [options.activeClass] - The css class that gets applied when the module is showing\n     * @param {String} [options.assetLoadedClass] - The css class that gets added when the asset has been loaded\n     * @param {String} [options.lazyLoadAttr] - The lazy loading attribute of the panel element containing the src to load\n     */\n    function CarouselPanel(el, options) {\n        _classCallCheck(this, CarouselPanel);\n\n        options = _extends({\n            activeClass: 'carousel-panel-active',\n            lazyLoadAttr: null,\n            loadedClass: 'carousel-panel-loaded',\n            assetLoadedClass: 'carousel-panel-asset-loaded'\n        }, options);\n\n        var _this = _possibleConstructorReturn(this, (CarouselPanel.__proto__ || Object.getPrototypeOf(CarouselPanel)).call(this, el, options));\n\n        _this.options = options;\n        _this.el = el;\n        return _this;\n    }\n\n    /**\n     * Loads all lazy-loadable images within the panel.\n     * @returns {Promise}\n     */\n\n\n    _createClass(CarouselPanel, [{\n        key: 'load',\n        value: function load() {\n            var _this2 = this;\n\n            var loadPromises = [];\n            this._loadableImages().forEach(function (imgEl) {\n                var loadedClass = _this2.options.assetLoadedClass;\n                var promise = _this2._loadImage(imgEl).then(function () {\n                    _this2.el.classList.add(loadedClass);\n                });\n                loadPromises.push(promise);\n            });\n\n            return _get(CarouselPanel.prototype.__proto__ || Object.getPrototypeOf(CarouselPanel.prototype), 'load', this).call(this).then(function () {\n                return _promise2.default.all(loadPromises);\n            });\n        }\n\n        /**\n         * Gets the live set of loadable image elements within the panel (or the panel itself if it is an <img>).\n         * @returns {Array}\n         * @private\n         */\n\n    }, {\n        key: '_loadableImages',\n        value: function _loadableImages() {\n            // if panel has lazy load attribute,  add to loadable assets\n            if (this.el.tagName.toLowerCase() === 'img' && this.el.getAttribute(this.options.lazyLoadAttr)) {\n                return [this.el];\n            } else {\n                return Array.prototype.slice.call(this.el.querySelectorAll('img[' + this.options.lazyLoadAttr + ']'));\n            }\n        }\n\n        /**\n         * Manually lazy loads a resource using an element's data attribute.\n         * @param {HTMLImageElement} img - The image element to load\n         * @private\n         */\n\n    }, {\n        key: '_loadImage',\n        value: function _loadImage(img) {\n            var src = img.getAttribute(this.options.lazyLoadAttr);\n            return new _promise2.default(function (resolve) {\n                img.onload = function () {\n                    resolve(img);\n                };\n                img.onerror = function () {\n                    // IE 9-11 have an issue where it automatically triggers an error on some images,\n                    // and then will immediately trigger onload() causing intermittent errors to appear\n                    // until this is fixed or we have a workaround, we will be resolving\n                    // even if there is an error\n                    resolve(img);\n                };\n                img.src = src;\n            });\n        }\n    }]);\n\n    return CarouselPanel;\n}(_moduleJs2.default);\n\nexports.default = CarouselPanel;\n\nmodule.exports = exports['default'];\n\n},{\"module-js\":37,\"promise\":38}],60:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _promise = require('promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _carouselPanel = require('./carousel-panel');\n\nvar _carouselPanel2 = _interopRequireDefault(_carouselPanel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A callback function that fires after a new active panel is set\n * @callback CarouselPanels~onChange\n * @param {Number} index - The index of the new panel\n */\n\n/**\n * Adds functionality for carousel panels. Not really meant to be used own its own, unless you want\n * to customize the the javascript logic for the \"panels\" of the Carousel (assuming that you actually\n * know what you're doing when you do so).\n * @constructor CarouselPanels\n */\nvar CarouselPanels = function () {\n\n    /**\n     * When the carousel is instantiated.\n     * @param {object} options - Options passed into instance\n     * @param {HTMLCollection|NodeList} options.panels - The panels in which to use for the carousel (an array of photos)\n     * @param {string} [options.assetLoadedClass] - The CSS class that gets added to a panel el when it is loaded\n     * @param {string} [options.panelActiveClass] - The CSS class that gets added to an panel when it becomes active\n     * @param {string} [options.panelBackClass] - The CSS class that gets added to all panel elements that appear before the current panel\n     * @param {string} [options.panelForwardClass] - The CSS class that gets added to all panel elements that appear ahead of the current panel\n     * @param {CarouselPanels~onChange} [options.onChange] - When the current panel is changed\n     * @param {string} [options.lazyLoadAttr] - The lazy loading attribute\n     */\n    function CarouselPanels(options) {\n        _classCallCheck(this, CarouselPanels);\n\n        options = _extends({\n            panels: [],\n            assetLoadedClass: 'carousel-asset-loaded',\n            panelActiveClass: 'carousel-panel-active',\n            panelLoadedClass: 'carousel-panel-loaded',\n            onChange: null,\n            lazyLoadAttr: 'data-src',\n            panelBackClass: 'carousel-panel-behind',\n            panelForwardClass: 'carousel-panel-ahead'\n        }, options);\n\n        if (!options.panels.length) {\n            console.error('carousel error: no panels were passed in constructor');\n        } else {\n            this._panelModules = this._setupPanelModules(options);\n        }\n\n        // add forward classes initially\n        this._panelModules.forEach(function (panel) {\n            panel.el.classList.add(options.panelForwardClass);\n        });\n\n        this.options = options;\n    }\n\n    /**\n     * Sets up the panel module instances.\n     * @param {Object} options - The initialization options\n     * @returns {Array} Returns an array of the panel instances\n     * @private\n     */\n\n\n    _createClass(CarouselPanels, [{\n        key: '_setupPanelModules',\n        value: function _setupPanelModules(options) {\n            var modules = [];\n            // panels can be either an array or an HTMLCollection so we\n            // are doing an old-school for loop to satisify both scenarios\n            for (var i = 0; i < options.panels.length; i++) {\n                modules[i] = new _carouselPanel2.default(options.panels[i], {\n                    activeClass: options.panelActiveClass,\n                    lazyLoadAttr: options.lazyLoadAttr,\n                    assetLoadedClass: options.assetLoadedClass,\n                    loadedClass: options.panelLoadedClass\n                });\n            }\n            return modules;\n        }\n\n        /**\n         * Transitions to a panel of an index.\n         * @param {Number} index - The index number to go to\n         * @returns {Promise}\n         */\n\n    }, {\n        key: 'goTo',\n        value: function goTo(index) {\n            var maxIndex = this.options.panels.length - 1,\n                minIndex = 0,\n                prevIndex = this.getCurrentIndex(),\n                errorMsg,\n                promise;\n\n            if (typeof index !== 'number' || index > maxIndex || index < minIndex) {\n                errorMsg = 'carousel panel error: unable to transition to an index of ' + index + 'which does not exist!';\n                console.error(errorMsg);\n                promise = _promise2.default.reject(new Error(errorMsg));\n            } else if (prevIndex === index) {\n                // already at index\n                promise = _promise2.default.resolve();\n            } else {\n                promise = this.load(index);\n                this._updatePanels(index);\n                this._currentIndex = index;\n                if (this.options.onChange) {\n                    this.options.onChange(index);\n                }\n            }\n            return promise;\n        }\n\n        /**\n         * Makes all panels inactive except for the one at the index provided.\n         * @param {Number} toIndex - The new index\n         * @private\n         */\n\n    }, {\n        key: '_updatePanels',\n        value: function _updatePanels(toIndex) {\n            var fromIndex = this.getCurrentIndex();\n            var fromPanel = this._panelModules[fromIndex];\n            var toPanel = this._panelModules[toIndex];\n            var rangePanels = [];\n            var toAdd = '';\n            var toRemove = '';\n\n            if (fromIndex > toIndex) {\n                // include fromIndex but not toIndex\n                rangePanels = this._panelModules.slice(toIndex + 1, fromIndex + 1);\n                toAdd = this.options.panelForwardClass;\n                toRemove = this.options.panelBackClass;\n            } else if (fromIndex < toIndex) {\n                rangePanels = this._panelModules.slice(fromIndex, toIndex);\n                toAdd = this.options.panelBackClass;\n                toRemove = this.options.panelForwardClass;\n            }\n\n            rangePanels.forEach(function (p) {\n                p.el.classList.add(toAdd);\n                p.el.classList.remove(toRemove);\n            });\n\n            if (fromPanel) {\n                fromPanel.hide();\n            }\n            toPanel.el.classList.remove(this.options.panelForwardClass, this.options.panelBackClass);\n            toPanel.show();\n        }\n\n        /**\n         * Gets the current index that is showing.\n         * @returns {Number} Returns the index\n         */\n\n    }, {\n        key: 'getCurrentIndex',\n        value: function getCurrentIndex() {\n            return this._currentIndex;\n        }\n\n        /**\n         * Loads assets for a given panel.\n         * @param {Number} idx - The index of the panel containing the assets to load\n         * @returns {Promise}\n         */\n\n    }, {\n        key: 'load',\n        value: function load(idx) {\n            var panelModule = this._panelModules[idx];\n            if (panelModule.loaded) {\n                return _promise2.default.resolve();\n            }\n            return panelModule.load();\n        }\n\n        /**\n         * Loads assets for a given panel.\n         * @deprecated since 2.1.6\n         * @param {Number} index - The index of the panel containing the assets to load\n         * @returns {Promise}\n         */\n\n    }, {\n        key: 'loadPanelAssets',\n        value: function loadPanelAssets(index) {\n            return this.load(index);\n        }\n\n        /**\n         * Final cleanup of instance.\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var options = this.options,\n                currentIndex = this.getCurrentIndex();\n\n            if (currentIndex) {\n                options.panels[currentIndex].classList.remove(options.panelActiveClass);\n            }\n            this._currentIndex = undefined;\n\n            this._panelModules.forEach(function (module) {\n                module.el.classList.remove(options.panelForwardClass, options.panelBackClass);\n                module.destroy();\n            });\n        }\n    }]);\n\n    return CarouselPanels;\n}();\n\nexports.default = CarouselPanels;\n\nmodule.exports = exports['default'];\n\n},{\"./carousel-panel\":59,\"promise\":38}],61:[function(require,module,exports){\n'use strict';\n\n/**\n * A callback function that fires after a new active panel is set\n * @callback CarouselThumbs~onChange\n * @param {Number} index - The index of the new panel\n */\n\n/**\n * Adds thumbnails for carousel. Not really meant to be used own its own, unless you\n * want to customize the javascript logic for the \"thumbnails\" of your Carousel instance (assuming that you actually\n * know what you're doing when you do so).\n * @class CarouselThumbs\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CarouselThumbs = function () {\n\n    /**\n     * When carousel is instantiated.\n     * @param {object} options - Options passed into instance\n     * @param {HTMLCollection} [options.thumbnails] - A collection of elements that are the thumbnails\n     * @param {string} [options.thumbnailActiveClass] - The CSS class that gets added to a thumbnail element when it becomes active\n     * @param {CarouselThumbs~onChange} [options.onChange] - When a new thumbnail becomes active\n     * @memberOf CarouselThumbs\n     */\n    function CarouselThumbs(options) {\n        _classCallCheck(this, CarouselThumbs);\n\n        options = _extends({\n            thumbnails: [],\n            thumbnailActiveTriggerEvent: 'click',\n            thumbnailActiveClass: 'carousel-thumbnail-active',\n            onChange: null\n        }, options);\n\n        this.options = options;\n        this._thumbnailEventListener = this.onThumbnailEvent.bind(this);\n        this.setup();\n    }\n\n    /**\n     * Sets up the carousel instance by adding event listeners to the thumbnails.\n     * @memberOf CarouselThumbs\n     */\n\n\n    _createClass(CarouselThumbs, [{\n        key: 'setup',\n        value: function setup() {\n            var thumbs = this.options.thumbnails;\n            if (thumbs.length) {\n                this.triggerThumbsEventListener('addEventListener');\n            } else {\n                console.error('carousel thumb error: no thumbnails were passed to constructor');\n            }\n        }\n\n        /**\n         * When a thumbnail is clicked.\n         * @param {MouseEvent} e - The click event\n         * @memberOf CarouselThumbs\n         */\n\n    }, {\n        key: 'onThumbnailEvent',\n        value: function onThumbnailEvent(e) {\n            if (!this._thumbnailArr) {\n                // convert thumbnail HTMLCollection to real array so we can perform necessary array methods\n                this._thumbnailArr = Array.prototype.slice.call(this.options.thumbnails);\n            }\n            var index = this._thumbnailArr.indexOf(e.currentTarget);\n            // we are checking that the selected thumbnail is still in the HTMLCollection\n            // because it is live introducing the possibility that the element is no longer in the DOM\n            if (index !== -1 && index !== this.getCurrentIndex()) {\n                this.goTo(index);\n                if (this.options.onChange) {\n                    this.options.onChange(index);\n                }\n            }\n        }\n\n        /**\n         * Checks for errors upon initialize.\n         * @memberOf CarouselThumbs\n         * @private\n         */\n\n    }, {\n        key: '_checkForInitErrors',\n        value: function _checkForInitErrors() {\n            var options = this.options,\n                thumbnailCount = options.thumbnails.length;\n            if (!thumbnailCount) {\n                console.error('carousel error: no thumbnails were passed in constructor');\n            }\n        }\n\n        /**\n         * Makes all thumbnails inactive except for the one at the index provided.\n         * @param {Number} index - The new index\n         * @memberOf CarouselThumbs\n         */\n\n    }, {\n        key: 'goTo',\n        value: function goTo(index) {\n            var thumbs = this.options.thumbnails,\n                prevIndex = this.getCurrentIndex() || 0,\n                activeClass = this.options.thumbnailActiveClass,\n                maxIndex = thumbs.length - 1,\n                minIndex = 0;\n\n            if (index > maxIndex || index < minIndex) {\n                console.error('carousel thumbnail error: unable to transition to a thumbnail with an index of ' + index + ', it does not exist!');\n            }\n\n            thumbs[index].classList.add(activeClass);\n\n            if (prevIndex !== index) {\n                thumbs[prevIndex].classList.remove(activeClass);\n            }\n            this._currentIndex = index;\n        }\n\n        /**\n         * Gets the current thumbnail index that is showing.\n         * @returns {Number} Returns the index\n         * @memberOf CarouselThumbs\n         */\n\n    }, {\n        key: 'getCurrentIndex',\n        value: function getCurrentIndex() {\n            return this._currentIndex;\n        }\n\n        /**\n         * Triggers an event listener method on all thumbnail elements.\n         * @param {string} method - The event listener method to call on each of the elements\n         */\n\n    }, {\n        key: 'triggerThumbsEventListener',\n        value: function triggerThumbsEventListener(method) {\n            var count = this.options.thumbnails.length,\n                i,\n                el;\n            for (i = 0; i < count; i++) {\n                el = this.options.thumbnails[i];\n                el[method](this.options.thumbnailActiveTriggerEvent, this._thumbnailEventListener);\n            }\n        }\n\n        /**\n         * Destroys the instance.\n         * @memberOf CarouselThumbs\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var thumbs = this.options.thumbnails;\n            this._currentIndex = null;\n            if (thumbs.length) {\n                this.triggerThumbsEventListener('removeEventListener');\n            }\n        }\n    }]);\n\n    return CarouselThumbs;\n}();\n\nexports.default = CarouselThumbs;\n\nmodule.exports = exports['default'];\n\n},{}],62:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _carouselThumbs = require('./carousel-thumbs');\n\nvar _carouselThumbs2 = _interopRequireDefault(_carouselThumbs);\n\nvar _carouselPanels = require('./carousel-panels');\n\nvar _carouselPanels2 = _interopRequireDefault(_carouselPanels);\n\nvar _carouselArrows = require('./carousel-arrows');\n\nvar _carouselArrows2 = _interopRequireDefault(_carouselArrows);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A callback function that fires after a new active panel is set\n * @callback Carousel~onPanelChange\n * @param {Number} index - The index of the new panel\n */\n\n/**\n * Adds carousel functionality to a set up pre-determined HTML markup.\n * @class Carousel\n * @param {object} options - Options passed into instance\n * @param {HTMLCollection} options.panels - The panels in which to use for the carousel (an array of photos)\n * @param {string} [options.assetLoadingClass] - The CSS class that gets added to an asset when it is loading\n * @param {boolean} [options.autoLoadAssets] - Whether or not to automatically load assets when active\n * @param {string} [options.panelActiveClass] - The CSS class that gets added to an panel when it becomes active\n * @param {string} [options.panelLoadedClass] - The CSS class that gets added to an panel when it is fully loaded\n * @param {string} [options.panelBackClass] - The CSS class that gets added to all panel elements that appear before the current panel\n * @param {string} [options.panelForwardClass] - The CSS class that gets added to all panel elements that appear ahead of the current panel\n * @param {Carousel~onPanelChange} [options.onPanelChange] - When the current panel is changed\n * @param {string} [options.lazyLoadAttr] - The attribute containing the url path to content that is to be lazy loaded\n * @param {HTMLCollection} [options.thumbnails] - A collection of elements that are the thumbnails\n * @param {string} [options.thumbnailActiveClass] - The CSS class that gets added to a thumbnail element when it becomes active\n * @param {Number} [options.initialIndex] - The index of the panel to go to upon instantiation (if not declared, goTo() must be called manually).\n */\n\nvar Carousel = function () {\n\n    /**\n     * Sets up stuff.\n     * @param options\n     */\n    function Carousel(options) {\n        _classCallCheck(this, Carousel);\n\n        options = options || {};\n\n        // if undefined or null is passed in options for panels or thumbnails,\n        // we need to sanitize it to an empty array to prevent a crash\n        if (!options.panels) {\n            options.panels = [];\n        }\n        if (!options.thumbnails) {\n            options.thumbnails = [];\n        }\n\n        options = _extends({\n            panels: [],\n            assetLoadingClass: 'carousel-asset-loading',\n            autoLoadAssets: true,\n            panelActiveClass: 'carousel-panel-active',\n            panelLoadedClass: 'carousel-panel-loaded',\n            panelBackClass: 'carousel-panel-behind',\n            panelForwardClass: 'carousel-panel-ahead',\n            onPanelChange: null,\n            lazyLoadAttr: 'data-src',\n            thumbnails: [],\n            thumbnailActiveTriggerEvent: 'click',\n            thumbnailActiveClass: 'carousel-thumbnail-active',\n            initialIndex: 0,\n            leftArrow: null,\n            rightArrow: null,\n            arrowActiveClass: 'carousel-arrow-active',\n            arrowDisabledClass: 'carousel-arrow-disabled',\n            onLeftArrowClick: null,\n            onRightArrowClick: null\n        }, options);\n\n        this.options = options;\n        this.subModules = {};\n        this._checkForInitErrors();\n        this.setup();\n    }\n\n    /**\n     * Sets up the carousel instance and all controls.\n     */\n\n\n    _createClass(Carousel, [{\n        key: 'setup',\n        value: function setup() {\n\n            if (!this.subModules.panels) {\n                this.subModules.panels = this._setupPanels(this.options);\n            }\n\n            if (this.options.thumbnails.length && !this.subModules.thumbnails) {\n                this.subModules.thumbnails = this._setupThumbs(this.options);\n            }\n\n            if ((this.options.leftArrow || this.options.rightArrow) && !this.subModules.arrows) {\n                this.subModules.arrows = this._setupArrows(this.options);\n            }\n\n            if (typeof this.options.initialIndex === 'number') {\n                this.goTo(this.options.initialIndex);\n            }\n        }\n\n        /**\n         * Sets up the carousel thumbs.\n         * @param {Object} options - The initialize options\n         * @return {CarouselThumbs} Returns thumbnail instance\n         * @private\n         */\n\n    }, {\n        key: '_setupThumbs',\n        value: function _setupThumbs(options) {\n            return new _carouselThumbs2.default(_extends({}, options, {\n                onChange: this.onThumbnailChange.bind(this)\n            }));\n        }\n\n        /**\n         * Sets up the carousel panels.\n         * @param {Object} options - The initialize options\n         * @return {CarouselPanels} Returns panels instance\n         * @private\n         */\n\n    }, {\n        key: '_setupPanels',\n        value: function _setupPanels(options) {\n            if (options.panels.length) {\n                return new _carouselPanels2.default(_extends({}, options, {\n                    onChange: this.onPanelChange.bind(this)\n                }));\n            }\n        }\n\n        /**\n         * Sets up the carousel arrows.\n         * @param {Object} options - The initialize options\n         * @return {CarouselArrows} Returns arrows instance\n         * @private\n         */\n\n    }, {\n        key: '_setupArrows',\n        value: function _setupArrows(options) {\n            var internalOptions;\n            // make clone of original options\n            internalOptions = _extends({}, options);\n\n            internalOptions.onLeftArrowClick = this.onLeftArrowClick.bind(this);\n            internalOptions.onRightArrowClick = this.onRightArrowClick.bind(this);\n            return new _carouselArrows2.default(internalOptions);\n        }\n\n        /**\n         * Checks for errors upon initialize.\n         * @private\n         */\n\n    }, {\n        key: '_checkForInitErrors',\n        value: function _checkForInitErrors() {\n            var options = this.options,\n                panelCount = options.panels.length,\n                thumbnailCount = options.thumbnails.length;\n            if (thumbnailCount && thumbnailCount !== panelCount) {\n                console.warn('carousel warning: number of thumbnails passed in constructor do not equal the number of panels' + '\\n' + 'panels: ' + panelCount + '\\n' + 'thumbnails: ' + thumbnailCount + '\\n');\n            }\n        }\n\n        /**\n         * When a panel index changes.\n         * @param {Number} index - The new index\n         */\n\n    }, {\n        key: 'onPanelChange',\n        value: function onPanelChange(index) {\n            if (this.subModules.thumbnails) {\n                this.subModules.thumbnails.goTo(index);\n            }\n\n            if (this.subModules.arrows) {\n                this.subModules.arrows.update(index);\n            }\n\n            if (this.options.onPanelChange) {\n                this.options.onPanelChange(index);\n            }\n        }\n\n        /**\n         * When the thumbnail index changes.\n         * @param {Number} index - The new index\n         */\n\n    }, {\n        key: 'onThumbnailChange',\n        value: function onThumbnailChange(index) {\n            this.goTo(index);\n        }\n\n        /**\n         * When the right arrow of the carousel is clicked.\n         * @param e\n         */\n\n    }, {\n        key: 'onRightArrowClick',\n        value: function onRightArrowClick(e) {\n            this.goTo(this.subModules.panels.getCurrentIndex() + 1);\n            if (this.options.onRightArrowClick) {\n                this.options.onRightArrowClick(e);\n            }\n        }\n\n        /**\n         * When the left arrow of the carousel is clicked.\n         * @param e\n         */\n\n    }, {\n        key: 'onLeftArrowClick',\n        value: function onLeftArrowClick(e) {\n            this.goTo(this.subModules.panels.getCurrentIndex() - 1);\n            if (this.options.onLeftArrowClick) {\n                this.options.onLeftArrowClick(e);\n            }\n        }\n\n        /**\n         * Transition to a new panel and thumbnail.\n         * @param {Number} index - The index number to go to\n         */\n\n    }, {\n        key: 'goTo',\n        value: function goTo(index) {\n            var options = this.options,\n                maxIndex = options.panels.length - 1,\n                minIndex = 0;\n\n            if (index > maxIndex) {\n                // set to first index if too high\n                index = minIndex;\n            } else if (index < minIndex) {\n                // set to last index if too low\n                index = maxIndex;\n            }\n\n            if (this.subModules.thumbnails) {\n                this.subModules.thumbnails.goTo(index);\n            }\n            if (this.subModules.arrows) {\n                this.subModules.arrows.update(index);\n            }\n\n            if (this.subModules.panels) {\n                return this.subModules.panels.goTo(index);\n            }\n        }\n\n        /**\n         * Gets the current index that is showing.\n         * @returns {Number} Returns the index\n         */\n\n    }, {\n        key: 'getCurrentIndex',\n        value: function getCurrentIndex() {\n            return this.subModules.panels.getCurrentIndex();\n        }\n\n        /**\n         * Moves carousel to next panel.\n         */\n\n    }, {\n        key: 'next',\n        value: function next() {\n            this.goTo(this.getCurrentIndex() + 1);\n        }\n\n        /**\n         * Moves to previous carousel panel.\n         */\n\n    }, {\n        key: 'prev',\n        value: function prev() {\n            this.goTo(this.getCurrentIndex() - 1);\n        }\n\n        /**\n         * Destroys all sub modules.\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            for (var key in this.subModules) {\n                if (this.subModules.hasOwnProperty(key) && this.subModules[key]) {\n                    this.subModules[key].destroy();\n                }\n            }\n        }\n    }]);\n\n    return Carousel;\n}();\n\nexports.default = Carousel;\n\nmodule.exports = exports['default'];\n\n},{\"./carousel-arrows\":58,\"./carousel-panels\":60,\"./carousel-thumbs\":61}],63:[function(require,module,exports){\n\n},{}],64:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,require('_process'))\n},{\"_process\":65}],65:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[62])(62)\n});","/* global\n    hide\n    toggle\n */\n'use strict';\n\n(function() {\n  /**\n   * Render the FAQ questions from a file located at /faq.js.\n   */\n  window.renderFAQ = () => {\n    /**\n     * Destination of all FAQ items\n     * @type {Element}\n     */\n    const _destination = document.getElementsByClassName('faq-placeholder')[0];\n\n    /**\n     * Template for each wrapper section, including an image.\n     * @type {Element}\n     */\n    const _section = document.getElementsByClassName('template faq-section')[0];\n    bootstrapTemplate(_section);\n\n    /**\n     * Template for each wrapper subsection, including an image.\n     * @type {Element}\n     */\n    const _subsection =\n      document.getElementsByClassName('template faq-subsection')[0];\n    bootstrapTemplate(_subsection);\n\n    /**\n     * Template for each question.\n     * @type {[type]}\n     */\n    const _question = document\n      .getElementsByClassName('template faq-question')[0];\n    bootstrapTemplate(_question);\n\n    for (let sectionTitle in window.faq) {\n      // Since we're working with a global obj, let's make sure we're not\n      // screwed by accidental prototyping.\n      if (!window.faq.hasOwnProperty(sectionTitle)) {\n        continue;\n      }\n\n      /** @type {object} Shortcut  */\n      const section = window.faq[sectionTitle];\n\n      /** @type {Element} The new section where we're putting the FAQ elements */\n      const _thisSection = _section.cloneNode(true);\n\n      // Fill in template data\n      _thisSection.querySelectorAll('h1')[0].innerHTML = sectionTitle;\n      _thisSection.querySelectorAll('img')[0].src = section.image;\n\n      const _thisDestination = _thisSection.querySelectorAll('.faq-content')[0];\n\n      for (let subsectionTitle in section.questions) {\n        if (!section.questions.hasOwnProperty(subsectionTitle)) {\n          continue;\n        }\n\n        /** @type {object,string} The set of either subsections or questions */\n        const subsection = section.questions[subsectionTitle];\n\n        if (typeof subsection === 'string') {\n          // we have a question\n          addQuestion(subsectionTitle, subsection, _thisDestination);\n        } else {\n          // we have a subsection\n          const _thisSubsection = _subsection.cloneNode(true);\n\n          _thisSubsection.querySelectorAll('h2')[0].innerHTML = subsectionTitle;\n\n          for (let question in subsection) {\n            if (!subsection.hasOwnProperty(question)) {\n              continue;\n            }\n\n            addQuestion(question, subsection[question], _thisSubsection);\n          }\n\n          _thisDestination.appendChild(_thisSubsection);\n        }\n      }\n      // Finally, append to the DOM.\n      _destination.appendChild(_thisSection);\n    }\n\n    /**\n     * Bootstrap a template by removing it from the dom and removing the template class.\n     *\n     * @param {Element} domNode The domNode to bootstrap into a template\n     */\n    function bootstrapTemplate(domNode) {\n      // Remove from DOM\n      domNode.parentNode.removeChild(domNode);\n\n      // Remove the template class\n      domNode.className = domNode.className.replace('template', '');\n    }\n\n    /**\n     * Add a question using the global question template to an Element, appendTo.\n     * @param {string} question question\n     * @param {string} answer answer\n     * @param {Element} appendTo Element to append the question to\n     */\n    function addQuestion(question, answer, appendTo) {\n      const _thisQuestion = _question.cloneNode(true);\n\n      _thisQuestion.querySelectorAll('h3')[0].innerHTML = question;\n      _thisQuestion.querySelectorAll('p')[0].innerHTML = answer;\n\n      appendTo.appendChild(_thisQuestion);\n    }\n  };\n\n  /**\n   * Bind click events and hide elements from the FAQ\n   */\n  window.bindFAQ = () => {\n    const select = '.faq-content';\n\n    const allElements = document.querySelectorAll(select);\n    hide(allElements);\n\n    allElements.forEach((e) => {\n      e.style.cursor = 'auto';\n\n      // Prevent the click listener on the parent from affecting this (i.e. re-hiding this element)\n      e.addEventListener('click', function(event) {\n        event.stopPropagation();\n      });\n    });\n\n    const sections = document.querySelectorAll('.faq-section');\n    sections.forEach((e) => {\n      e.style.cursor = 'pointer';\n\n      e.addEventListener('click', function() {\n        this.querySelectorAll(select).forEach(toggle);\n      });\n    });\n  };\n})();\n","/* global\n    Carousel\n */\n'use strict';\n\n(function() {\n  /**\n   * Render the carousel.\n   */\n  window.renderCarousel = () => {\n    new Carousel({\n      panels: document.getElementsByClassName('carousel-panel'),\n      leftArrow: document.getElementsByClassName('carousel-left')[0],\n      rightArrow: document.getElementsByClassName('carousel-right')[0],\n    });\n\n    // setInterval(() => {\n    //   carousel.next();\n    // }, 5000);\n  };\n})();\n","'use strict';\n\n(function() {\n  const MESSAGE_URL = 'http://www.crisistextline.org/trends/data/messages.txt';\n  const messageDiv = document.getElementById('message-count');\n\n  let currentVal = parseInt(messageDiv.innerHTML.replace(/,/g, ''), 10);\n\n  window.getMessageCount = () => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        incrementValue(xhr.responseText);\n      } else {\n        fail();\n      }\n    });\n\n    xhr.addEventListener('error', () => {\n      fail();\n    });\n\n    xhr.open('GET', MESSAGE_URL);\n    xhr.send();\n  };\n\n  /**\n   * Failure handler for a failed XHR request. Let's just populate with a sane,\n   * true-enough value.\n   */\n  function fail() {\n    incrementValue('27212575');\n  }\n\n  /**\n   * Increment the current value by the difference from current to desired / 2.\n   *\n   * @param  {integer} intVal Value we're shooting for\n   */\n  function incrementValue(intVal) {\n    intVal = parseInt(intVal, 10);\n\n    const difference = intVal - currentVal;\n\n    currentVal += Math.ceil(difference / 2);\n\n    updateDisplay();\n\n    if (currentVal !== intVal) {\n      setTimeout(() => {\n        incrementValue(intVal);\n      }, 125 - Math.log(difference) * 5);\n    }\n  }\n\n  /**\n   * Update the display to currentValue, formatted in 1,231,131,232 format\n   */\n  function updateDisplay() {\n    // format the string with commas every 3 places\n    messageDiv.innerHTML = currentVal\n      .toString()\n      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n})();\n","(function() {\n  const DASHBOARD_URL = 'http://public.tableausoftware.com/views/crisistrends2dec132016/WorkingDashMobile?:embed=y&:showVizHome=no&:host_url=https%3A%2F%2Fpublic.tableausoftware.com%2F&:tabs=no&:toolbar=top&:animate_transition=yes&:display_static_image=no&:display_spinner=yes&:display_overlay=yes&:display_count=yes&:loadOrderID=0';\n\n  let loaded = false;\n\n  window.addEventListener('scroll', loadDashboard);\n  window.addEventListener('resize-complete', reflowDashboard);\n\n  adjustHeight();\n\n  /**\n   * Load the dashboard if it hasn't been loaded yet.\n   *\n   * @param {boolean} reload true if we want to force reloading the dashboard\n   */\n  function loadDashboard(reload) {\n    if (!loaded || reload === true) {\n      document.getElementById('viz').src = DASHBOARD_URL;\n      loaded = true;\n    }\n  }\n\n  /**\n   * Reload the dashboard in response to screen size change.\n   */\n  function reflowDashboard() {\n    loadDashboard(true);\n    adjustHeight();\n  }\n\n  /**\n   * Adjust the height of the data viz.\n   */\n  function adjustHeight() {\n    const viz = document.getElementById('viz');\n\n    if (viz.offsetWidth <= 500) {\n      viz.height = 1950;\n    } else {\n      viz.height = 2600;\n    }\n  }\n})();\n","/* global d3 */\n\n(function() {\n  const wordCloudDiv = document.getElementById('wordcloud');\n  const quoteDiv = document.getElementById('wordcloud-quote');\n  const CLOUD_HEIGHT = 500;\n  const svg = d3.select(wordCloudDiv).append('svg');\n\n  let quotes;\n  let cloudWidth;\n  let cloudHeight = CLOUD_HEIGHT;\n  let vis;\n  let lastWords;\n\n  window.bootstrapWordCloud = () => {\n    getQuotes();\n    initializeD3();\n\n    window.addEventListener('resize-complete', setSVGWidth);\n  };\n\n  function getQuotes() {\n    const xhr = new XMLHttpRequest();\n\n    xhr.addEventListener('load', () => {\n      if (xhr.status === 200) {\n        quotes = JSON.parse(xhr.responseText);\n      }\n    });\n\n    xhr.open('GET', 'data/quotes.json');\n    xhr.send();\n  }\n\n  function initializeD3() {\n    svg.attr('height', cloudHeight);\n    setSVGWidth();\n    wordCloudDiv.style.display = 'none';\n  }\n\n  function setSVGWidth(skipRedraw) {\n    cloudWidth = wordCloudDiv.offsetWidth;\n    svg.attr('width', cloudWidth);\n\n    if (skipRedraw !== true) {\n      doViz();\n    }\n  }\n\n  function doViz(words) {\n    if (words === undefined) {\n      if (lastWords === undefined) {\n        return;\n      }\n\n      words = lastWords;\n    } else {\n      lastWords = words;\n    }\n\n    svg.selectAll('g').remove();\n\n    vis = svg\n      .append('g')\n      .attr('transform', 'translate(' +\n        [cloudWidth >> 1, cloudHeight >> 1] +\n        ')');\n\n    let max = 0;\n    let min = 1000000;\n\n    for (let i in words) {\n      if (words[i].c > max) {\n        max = words[i].c;\n      }\n\n      if (words[i].c < min) {\n        min = words[i].c;\n      }\n    }\n\n    const maxscale = d3.scale.linear().range([50, 120]).domain([10, 960])(cloudWidth);\n    const sizeScale = d3.scale.linear().range([12, maxscale]).domain([min, max]);\n\n    d3.layout.cloud()\n      .size([cloudWidth, cloudHeight])\n      .words(words)\n      .rotate(function() {\n        return 0;\n      })\n      .font('Impact')\n      .fontSize(function(d) {\n        return sizeScale(d.c);\n      })\n      .text(function(d) {\n        return d.w;\n      })\n      .on('end', draw)\n      .start();\n  }\n\n  function draw(words, bounds) {\n    const scale = bounds ? Math.min(\n      cloudWidth / Math.abs(bounds[1].x - cloudWidth / 2),\n      cloudWidth / Math.abs(bounds[0].x - cloudWidth / 2),\n      cloudHeight / Math.abs(bounds[1].y - cloudHeight / 2),\n      cloudHeight / Math.abs(bounds[0].y - cloudHeight / 2)) / 2 : 1;\n\n    vis\n      .selectAll('text')\n      .data(words)\n      .enter().append('text')\n        .attr('text-anchor', 'middle')\n        .style('font-size', function(d) {\n          return d.size + 'px';\n        })\n        .style('font-family', 'Impact')\n        .style('fill', function() {\n          return 'rgba(0,0,0,' + (Math.random() * 0.50 + 0.25) + ')';\n        })\n        .attr('text-anchor', 'middle')\n        .attr('transform', function(d) {\n          return 'translate(' + [d.x, d.y] + ')rotate(' + d.rotate + ')';\n        })\n        .text(function(d) {\n          return d.w;\n        })\n    ;\n\n    vis.attr('transform', 'translate(' + [cloudWidth >> 1, cloudHeight >> 1] + ')scale(' + scale + ')');\n  }\n\n  document.getElementById('wordcloud-select').addEventListener('change', function() {\n    const issue = this.value;\n\n    wordCloudDiv.style.display = 'block';\n    setSVGWidth(true);\n\n    d3.json('data/words/' + issue + '.json', function(error, json) {\n      if (error) {\n        return console.warn(error);\n      }\n\n      if (quotes !== undefined) {\n        quoteDiv.innerHTML = '<p>' + quotes[issue] + '</p>';\n      }\n\n      doViz(json);\n    });\n  });\n})();\n","/* global\n    getMessageCount\n    renderFAQ\n    bindFAQ\n    bootstrapWordCloud\n    toggle\n    hide\n */\n'use strict';\n\n(function() {\n  polyfill();\n  attachHamburger();\n  getMessageCount();\n  renderCarousel();\n  renderFAQ();\n  bindFAQ();\n  bootstrapWordCloud();\n  scrollToTop();\n\n  let resizeTimer;\n  let w = window.outerWidth;\n  window.addEventListener('resize', function(e) {\n    clearTimeout(resizeTimer);\n\n    resizeTimer = setTimeout(() => {\n      if (window.outerWidth === w) {\n        return;\n      }\n\n      w = window.outerWidth;\n      const newEvent = new Event('resize-complete');\n      newEvent.originalEvent = e;\n      window.dispatchEvent(newEvent);\n    }, 500);\n  });\n\n  /**\n   * Attach the hamburger click binders.\n   */\n  function attachHamburger() {\n    document.querySelectorAll('.hamburger')[0].addEventListener('click', () => {\n      toggle(document.querySelectorAll('.hamburger-menu'));\n    });\n\n    document.querySelectorAll('.hamburger-menu a').forEach(function(element) {\n      element.addEventListener('click', function() {\n        hide(document.querySelectorAll('.hamburger-menu'));\n      });\n    });\n  }\n\n  /**\n   * Custom polyfills that aren't included in es5-shim.\n   */\n  function polyfill() {\n    if (NodeList.prototype.forEach === undefined) {\n      NodeList.prototype.forEach = Array.prototype.forEach;\n    }\n  }\n\n  /**\n   * Attach click binder to make #top scroll ALL THE WAY to the top\n   */\n  function scrollToTop() {\n    document.querySelectorAll('a[href=\"#top\"]').forEach(function(element) {\n      element.addEventListener('click', (event) => {\n        window.scrollTo(0, 0);\n        event.preventDefault();\n      });\n    });\n  }\n})();\n"]}