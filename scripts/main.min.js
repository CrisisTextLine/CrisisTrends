'use strict';(function (window) {
  window.config = {
    visualizations: {
      domain: 'https://app.periscopedata.com',
      dashboards: {
        desktop: 'e12a39cb-63d2-4349-94a1-d0ebc6bf9a7d',
        mobile: '171d3869-a831-433b-900d-45e53badfd7f' },

      constants: {
        vizHeights: {
          desktop: 3000,
          mobile: 4100 },

        viewportWidths: {
          mobile: 1000 } } } };




})(window);
"use strict";var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {return typeof obj;} : function (obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;}; // Word cloud layout by Jason Davies, http://www.jasondavies.com/word-cloud/
// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf
(function () {
  function cloud() {
    var size = [256, 256],
    text = cloudText,
    font = cloudFont,
    fontSize = cloudFontSize,
    fontStyle = cloudFontNormal,
    fontWeight = cloudFontNormal,
    rotate = cloudRotate,
    padding = cloudPadding,
    spiral = archimedeanSpiral,
    words = [],
    timeInterval = Infinity;
    var event = d3.dispatch("word", "end");
    var timer = null;
    var cloud = {};

    cloud.start = function () {
      var board = zeroArray((size[0] >> 5) * size[1]);
      var bounds = null;
      var n = words.length;
      var i = -1;
      var tags = [],
      data = words.map(function (d, i) {
        d.text = text.call(this, d, i);
        d.font = font.call(this, d, i);
        d.style = fontStyle.call(this, d, i);
        d.weight = fontWeight.call(this, d, i);
        d.rotate = rotate.call(this, d, i);
        d.size = ~~fontSize.call(this, d, i);
        d.padding = padding.call(this, d, i);
        return d;
      }).sort(function (a, b) {
        return b.size - a.size;
      });

      if (timer) clearInterval(timer);
      timer = setInterval(step, 0);
      step();

      return cloud;

      function step() {
        var start = +new Date();
        var d = void 0;
        while (+new Date() - start < timeInterval && ++i < n && timer) {
          d = data[i];
          d.x = size[0] * (Math.random() + .5) >> 1;
          d.y = size[1] * (Math.random() + .5) >> 1;
          cloudSprite(d, data, i);
          if (d.hasText && place(board, d, bounds)) {
            tags.push(d);
            event.word(d);
            if (bounds) cloudBounds(bounds, d);else
            bounds = [{ x: d.x + d.x0, y: d.y + d.y0 }, { x: d.x + d.x1, y: d.y + d.y1 }];
            // Temporary hack
            d.x -= size[0] >> 1;
            d.y -= size[1] >> 1;
          }
        }
        if (i >= n) {
          cloud.stop();
          event.end(tags, bounds);
        }
      }
    };

    cloud.stop = function () {
      if (timer) {
        clearInterval(timer);
        timer = null;
      }
      return cloud;
    };

    cloud.timeInterval = function (x) {
      if (!arguments.length) return timeInterval;
      timeInterval = x == null ? Infinity : x;
      return cloud;
    };

    function place(board, tag, bounds) {
      var perimeter = [{ x: 0, y: 0 }, { x: size[0], y: size[1] }],
      startX = tag.x,
      startY = tag.y,
      maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),
      s = spiral(size),
      dt = Math.random() < .5 ? 1 : -1;
      var t = -dt,
      dxdy = void 0,
      dx = void 0,
      dy = void 0;

      while (dxdy = s(t += dt)) {
        dx = ~~dxdy[0];
        dy = ~~dxdy[1];

        if (Math.min(dx, dy) > maxDelta) break;

        tag.x = startX + dx;
        tag.y = startY + dy;

        if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||
        tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;
        // TODO only check for collisions within current bounds.
        if (!bounds || !cloudCollide(tag, board, size[0])) {
          if (!bounds || collideRects(tag, bounds)) {
            var sprite = tag.sprite,
            w = tag.width >> 5,
            sw = size[0] >> 5,
            lx = tag.x - (w << 4),
            sx = lx & 0x7f,
            msx = 32 - sx,
            h = tag.y1 - tag.y0;
            var x = (tag.y + tag.y0) * sw + (lx >> 5),
            last = void 0;
            for (var j = 0; j < h; j++) {
              last = 0;
              for (var i = 0; i <= w; i++) {
                board[x + i] |= last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);
              }
              x += sw;
            }
            delete tag.sprite;
            return true;
          }
        }
      }
      return false;
    }

    cloud.words = function (x) {
      if (!arguments.length) return words;
      words = x;
      return cloud;
    };

    cloud.size = function (x) {
      if (!arguments.length) return size;
      size = [+x[0], +x[1]];
      return cloud;
    };

    cloud.font = function (x) {
      if (!arguments.length) return font;
      font = d3.functor(x);
      return cloud;
    };

    cloud.fontStyle = function (x) {
      if (!arguments.length) return fontStyle;
      fontStyle = d3.functor(x);
      return cloud;
    };

    cloud.fontWeight = function (x) {
      if (!arguments.length) return fontWeight;
      fontWeight = d3.functor(x);
      return cloud;
    };

    cloud.rotate = function (x) {
      if (!arguments.length) return rotate;
      rotate = d3.functor(x);
      return cloud;
    };

    cloud.text = function (x) {
      if (!arguments.length) return text;
      text = d3.functor(x);
      return cloud;
    };

    cloud.spiral = function (x) {
      if (!arguments.length) return spiral;
      spiral = spirals[x + ""] || x;
      return cloud;
    };

    cloud.fontSize = function (x) {
      if (!arguments.length) return fontSize;
      fontSize = d3.functor(x);
      return cloud;
    };

    cloud.padding = function (x) {
      if (!arguments.length) return padding;
      padding = d3.functor(x);
      return cloud;
    };

    return d3.rebind(cloud, event, "on");
  }

  function cloudText(d) {
    return d.text;
  }

  function cloudFont() {
    return "serif";
  }

  function cloudFontNormal() {
    return "normal";
  }

  function cloudFontSize(d) {
    return Math.sqrt(d.value);
  }

  function cloudRotate() {
    return (~~(Math.random() * 6) - 3) * 30;
  }

  function cloudPadding() {
    return 1;
  }

  // Fetches a monochrome sprite bitmap for the specified text.
  // Load in batches for speed.
  function cloudSprite(d, data, di) {
    if (d.sprite) return;
    c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);
    var x = 0,
    y = 0,
    maxh = 0;
    var n = data.length;
    --di;
    while (++di < n) {
      d = data[di];
      c.save();
      c.font = d.style + " " + d.weight + " " + ~~((d.size + 1) / ratio) + "px " + d.font;
      var w = c.measureText(d.text + "m").width * ratio,
      h = d.size << 1;
      if (d.rotate) {
        var sr = Math.sin(d.rotate * cloudRadians),
        cr = Math.cos(d.rotate * cloudRadians),
        wcr = w * cr,
        wsr = w * sr,
        hcr = h * cr,
        hsr = h * sr;
        w = Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f >> 5 << 5;
        h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));
      } else {
        w = w + 0x1f >> 5 << 5;
      }
      if (h > maxh) maxh = h;
      if (x + w >= cw << 5) {
        x = 0;
        y += maxh;
        maxh = 0;
      }
      if (y + h >= ch) break;
      c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);
      if (d.rotate) c.rotate(d.rotate * cloudRadians);
      c.fillText(d.text, 0, 0);
      if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, 0, 0);
      c.restore();
      d.width = w;
      d.height = h;
      d.xoff = x;
      d.yoff = y;
      d.x1 = w >> 1;
      d.y1 = h >> 1;
      d.x0 = -d.x1;
      d.y0 = -d.y1;
      d.hasText = true;
      x += w;
    }
    var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,
    sprite = [];
    while (--di >= 0) {
      d = data[di];
      if (!d.hasText) continue;
      var w = d.width,
      w32 = w >> 5,
      h = d.y1 - d.y0;
      // Zero the buffer
      for (var i = 0; i < h * w32; i++) {sprite[i] = 0;}
      x = d.xoff;
      if (x == null) return;
      y = d.yoff;
      var seen = 0,
      seenRow = -1;
      for (var j = 0; j < h; j++) {
        for (var i = 0; i < w; i++) {
          var k = w32 * j + (i >> 5),
          m = pixels[(y + j) * (cw << 5) + (x + i) << 2] ? 1 << 31 - i % 32 : 0;
          sprite[k] |= m;
          seen |= m;
        }
        if (seen) seenRow = j;else
        {
          d.y0++;
          h--;
          j--;
          y++;
        }
      }
      d.y1 = d.y0 + seenRow;
      d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);
    }
  }

  // Use mask-based collision detection.
  function cloudCollide(tag, board, sw) {
    sw >>= 5;
    var sprite = tag.sprite,
    w = tag.width >> 5,
    lx = tag.x - (w << 4),
    sx = lx & 0x7f,
    msx = 32 - sx,
    h = tag.y1 - tag.y0;
    var x = (tag.y + tag.y0) * sw + (lx >> 5),
    last = void 0;
    for (var j = 0; j < h; j++) {
      last = 0;
      for (var i = 0; i <= w; i++) {
        if ((last << msx | (i < w ? (last = sprite[j * w + i]) >>> sx : 0)) &
        board[x + i]) return true;
      }
      x += sw;
    }
    return false;
  }

  function cloudBounds(bounds, d) {
    var b0 = bounds[0],
    b1 = bounds[1];
    if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;
    if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;
    if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;
    if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;
  }

  function collideRects(a, b) {
    return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;
  }

  function archimedeanSpiral(size) {
    var e = size[0] / size[1];
    return function (t) {
      return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];
    };
  }

  function rectangularSpiral(size) {
    var dy = 4,
    dx = dy * size[0] / size[1];
    var x = 0,
    y = 0;
    return function (t) {
      var sign = t < 0 ? -1 : 1;
      // See triangular numbers: T_n = n * (n + 1) / 2.
      switch (Math.sqrt(1 + 4 * sign * t) - sign & 3) {
        case 0:x += dx;break;
        case 1:y += dy;break;
        case 2:x -= dx;break;
        default:y -= dy;break;}

      return [x, y];
    };
  }

  // TODO reuse arrays?
  function zeroArray(n) {
    var a = [];
    var i = -1;
    while (++i < n) {a[i] = 0;}
    return a;
  }

  var cloudRadians = Math.PI / 180,
  cw = 1 << 11 >> 5,
  ch = 1 << 11,
  canvas,
  ratio = 1;

  if (typeof document !== "undefined") {
    canvas = document.createElement("canvas");
    canvas.width = 1;
    canvas.height = 1;
    ratio = Math.sqrt(canvas.getContext("2d").getImageData(0, 0, 1, 1).data.length >> 2);
    canvas.width = (cw << 5) / ratio;
    canvas.height = ch / ratio;
  } else {
    // Attempt to use node-canvas.
    canvas = new Canvas(cw << 5, ch);
  }

  var c = canvas.getContext("2d"),
  spirals = {
    archimedean: archimedeanSpiral,
    rectangular: rectangularSpiral };

  c.fillStyle = c.strokeStyle = "red";
  c.textAlign = "center";

  if ((typeof module === "undefined" ? "undefined" : _typeof(module)) === "object" && module.exports) module.exports = cloud;else
  (d3.layout || (d3.layout = {})).cloud = cloud;
})();
'use strict'; /* eslint-env browser */
/**
                                        * Toggle the display of an element.
                                        *
                                        * @param  {element} e The element to toggle.
                                        *
                                        * @return {element}   The element that was toggled.
                                        */
window.toggle = function (e) {
  if (e instanceof NodeList) {
    e.forEach(toggle);
    return e;
  }

  if (e.style.display === 'inherit') {
    return hide(e);
  }

  return show(e);
};

/**
    * Hide an element or elements.
    *
    * @param  {element|NodeList} e The element(s) to hide
    *
    * @return {element} The element hidden
    */
window.hide = function (e) {
  if (e instanceof NodeList) {
    e.forEach(hide);
  } else {
    e.style.display = 'none';
  }

  return e;
};

/**
    * Unhide an element.
    *
    * @param  {element} e The element to unhide.
    *
    * @return {element} The element unhidden
    */
window.show = function (e) {
  if (e instanceof NodeList) {
    e.forEach(hide);
  } else {
    e.style.display = 'inherit';
  }

  return e;
};
'use strict';var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}(); /* global config */
(function () {
  var loaded = false;

  window.addEventListener('resize-complete', reflowDashboard);
  window.addEventListener('message', messageHandler);
  loadDashboard();

  /**
                    * @param {Event} e Message event object
                    */
  function messageHandler(e) {var
    origin = e.origin,data = e.data;
    var domain = config.visualizations.domain;

    if (origin !== domain || data.event_type !== 'dashboard_resize') {
      return;
    }

    adjustHeight(data.dashboard_height);
  }

  /**
     * @return {string} size
     */
  function getDashboardSizeName() {
    var viewportWidths = config.visualizations.constants.viewportWidths;
    var width = window.innerWidth;
    var size = Object.entries(viewportWidths)
    // eslint-disable-next-line no-unused-vars
    .filter(function (_ref) {var _ref2 = _slicedToArray(_ref, 2),name = _ref2[0],size = _ref2[1];return width < size;}) // Remove viewport sizes smaller than current viewport
    .reduce(function (currentLargest, currentSize) {return (
        // If the current size is bigger than the largest size seen so far,
        // then return that one, otherwise return the existing largest seen so far
        currentSize[1] > currentLargest[1] ? currentSize : currentLargest);}, ['desktop', width]); // Start with the smallest size to start width

    return size[0];
  }

  /**
     * Gets the dashboard url for a given size
     * @param {string} size Name of size to get dashboard for
     * @return {string} dashboardUrl
     */
  function getDashboardUrl() {var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getDashboardSizeName();
    var domain = config.visualizations.domain;
    var dashboardId = config.visualizations.dashboards[size];

    return domain + '/shared/' + dashboardId + '?embed=true';
  }

  /**
     * Load the dashboard if it hasn't been loaded yet.
     *
     * @param {boolean} reload true if we want to force reloading the dashboard
     */
  function loadDashboard(reload) {
    if (!loaded || reload === true) {
      document.getElementById('viz').src = getDashboardUrl();
      loaded = true;
    }
  }

  /**
     * Reload the dashboard in response to screen size change.
     */
  function reflowDashboard() {
    loadDashboard(true);
    adjustHeight();
  }

  /**
     * Adjust the height of the data viz.
     * @param {number} height The height of the iframed document
     */
  function adjustHeight() {var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getDefaultVizHeight();
    var viz = document.getElementById('viz');
    viz.style.height = height + 15 + 'px';
  }

  /**
     * @return {number} height
     */
  function getDefaultVizHeight() {
    var heights = config.visualizations.constants.vizHeights;
    var size = getDashboardSizeName();

    return heights[size];
  }
})();
'use strict'; /* global d3 */
/* eslint-disable */

(function () {
  var wordCloudDiv = document.getElementById('wordcloud');
  var quoteDiv = document.getElementById('wordcloud-quote');
  var CLOUD_HEIGHT = 500;
  var svg = d3.select(wordCloudDiv).append('svg');

  var quotes = void 0;
  var cloudWidth = void 0;
  var cloudHeight = CLOUD_HEIGHT;
  var vis = void 0;
  var lastWords = void 0;

  window.bootstrapWordCloud = function () {
    getQuotes();
    initializeD3();

    window.addEventListener('resize-complete', setSVGWidth);
  };

  function getQuotes() {
    var xhr = new XMLHttpRequest();

    xhr.addEventListener('load', function () {
      if (xhr.status === 200) {
        quotes = JSON.parse(xhr.responseText);
      }
    });

    xhr.open('GET', 'data/quotes.json');
    xhr.send();
  }

  function initializeD3() {
    svg.attr('height', cloudHeight);
    setSVGWidth();
    wordCloudDiv.style.display = 'none';
  }

  function setSVGWidth(skipRedraw) {
    cloudWidth = wordCloudDiv.offsetWidth;
    svg.attr('width', cloudWidth);

    if (skipRedraw !== true) {
      doViz();
    }
  }

  function doViz(words) {
    if (words === undefined) {
      if (lastWords === undefined) {
        return;
      }

      words = lastWords;
    } else {
      lastWords = words;
    }

    svg.selectAll('g').remove();

    vis = svg.
    append('g').
    attr('transform', 'translate(' +
    [cloudWidth >> 1, cloudHeight >> 1] +
    ')');

    var max = 0;
    var min = 1000000;

    for (var i in words) {
      if (words[i].c > max) {
        max = words[i].c;
      }

      if (words[i].c < min) {
        min = words[i].c;
      }
    }

    var maxscale = d3.scale.linear().range([50, 120]).domain([10, 960])(cloudWidth);
    var sizeScale = d3.scale.linear().range([12, maxscale]).domain([min, max]);

    d3.layout.cloud().
    size([cloudWidth, cloudHeight]).
    words(words).
    rotate(function () {
      return 0;
    }).
    font('Impact').
    fontSize(function (d) {
      return sizeScale(d.c);
    }).
    text(function (d) {
      return d.w;
    }).
    on('end', draw).
    start();
  }

  function draw(words, bounds) {
    var scale = bounds ? Math.min(
    cloudWidth / Math.abs(bounds[1].x - cloudWidth / 2),
    cloudWidth / Math.abs(bounds[0].x - cloudWidth / 2),
    cloudHeight / Math.abs(bounds[1].y - cloudHeight / 2),
    cloudHeight / Math.abs(bounds[0].y - cloudHeight / 2)) / 2 : 1;

    vis.
    selectAll('text').
    data(words).
    enter().append('text').
    attr('text-anchor', 'middle').
    style('font-size', function (d) {
      return d.size + 'px';
    }).
    style('font-family', 'Impact').
    style('fill', function () {
      return 'rgba(0,0,0,' + (Math.random() * 0.50 + 0.25) + ')';
    }).
    attr('text-anchor', 'middle').
    attr('transform', function (d) {
      return 'translate(' + [d.x, d.y] + ')rotate(' + d.rotate + ')';
    }).
    text(function (d) {
      return d.w;
    });


    vis.attr('transform', 'translate(' + [cloudWidth >> 1, cloudHeight >> 1] + ')scale(' + scale + ')');
  }

  document.getElementById('wordcloud-select').addEventListener('change', function () {
    var issue = this.value;

    wordCloudDiv.style.display = 'block';
    setSVGWidth(true);

    d3.json('data/words/' + issue + '.json', function (error, json) {
      if (error) {
        return console.warn(error);
      }

      if (quotes !== undefined) {
        quoteDiv.innerHTML = '<p>' + quotes[issue] + '</p>';
      }

      doViz(json);
    });
  });
})();
/* global
    hide
    toggle
 */
'use strict';

(function () {
  /**
               * Render the FAQ questions from a file located at /faq.js.
               */
  window.renderFAQ = function () {
    /**
                                   * Destination of all FAQ items
                                   * @type {Element}
                                   */
    var _destination = document.getElementsByClassName('faq-placeholder')[0];

    /**
                                                                               * Template for each wrapper section, including an image.
                                                                               * @type {Element}
                                                                               */
    var _section = document.getElementsByClassName('template faq-section')[0];
    bootstrapTemplate(_section);

    /**
                                  * Template for each wrapper subsection, including an image.
                                  * @type {Element}
                                  */
    var _subsection =
    document.getElementsByClassName('template faq-subsection')[0];
    bootstrapTemplate(_subsection);

    /**
                                     * Template for each question.
                                     * @type {[type]}
                                     */
    var _question = document.
    getElementsByClassName('template faq-question')[0];
    bootstrapTemplate(_question);

    for (var sectionTitle in window.faq) {
      // Since we're working with a global obj, let's make sure we're not
      // screwed by accidental prototyping.
      if (!Object.prototype.hasOwnProperty.call(window.faq, sectionTitle)) {
        continue;
      }

      /** @type {object} Shortcut  */
      var section = window.faq[sectionTitle];

      /** @type {Element} The new section where we're putting the FAQ elements */
      var _thisSection = _section.cloneNode(true);

      // Fill in template data
      _thisSection.querySelectorAll('h1')[0].innerHTML = sectionTitle;
      _thisSection.querySelectorAll('img')[0].src = section.image;

      var _thisDestination = _thisSection.querySelectorAll('.faq-content')[0];

      for (var subsectionTitle in section.questions) {
        if (!Object.prototype.hasOwnProperty.call(section.questions, subsectionTitle)) {
          continue;
        }

        /** @type {object,string} The set of either subsections or questions */
        var subsection = section.questions[subsectionTitle];

        if (typeof subsection === 'string') {
          // we have a question
          addQuestion(subsectionTitle, subsection, _thisDestination);
        } else {
          // we have a subsection
          var _thisSubsection = _subsection.cloneNode(true);

          _thisSubsection.querySelectorAll('h2')[0].innerHTML = subsectionTitle;

          for (var question in subsection) {
            if (!Object.prototype.hasOwnProperty.call(subsection, question)) {
              continue;
            }

            addQuestion(question, subsection[question], _thisSubsection);
          }

          _thisDestination.appendChild(_thisSubsection);
        }
      }
      // Finally, append to the DOM.
      _destination.appendChild(_thisSection);
    }

    /**
       * Bootstrap a template by removing it from the dom and removing the template class.
       *
       * @param {Element} domNode The domNode to bootstrap into a template
       */
    function bootstrapTemplate(domNode) {
      // Remove from DOM
      domNode.parentNode.removeChild(domNode);

      // Remove the template class
      domNode.className = domNode.className.replace('template', '');
    }

    /**
       * Add a question using the global question template to an Element, appendTo.
       * @param {string} question question
       * @param {string} answer answer
       * @param {Element} appendTo Element to append the question to
       */
    function addQuestion(question, answer, appendTo) {
      var _thisQuestion = _question.cloneNode(true);

      _thisQuestion.querySelectorAll('h3')[0].innerHTML = question;
      _thisQuestion.querySelectorAll('p')[0].innerHTML = answer;

      appendTo.appendChild(_thisQuestion);
    }
  };

  /**
      * Bind click events and hide elements from the FAQ
      */
  window.bindFAQ = function () {
    var select = '.faq-content';

    var allElements = document.querySelectorAll(select);
    hide(allElements);

    allElements.forEach(function (e) {
      e.style.cursor = 'auto';

      // Prevent the click listener on the parent from affecting this (i.e. re-hiding this element)
      e.addEventListener('click', function (event) {
        event.stopPropagation();
      });
    });

    var sections = document.querySelectorAll('.faq-section');
    sections.forEach(function (e) {
      e.style.cursor = 'pointer';

      e.addEventListener('click', function () {
        this.querySelectorAll(select).forEach(toggle);
      });
    });
  };
})();
/* global
    renderFAQ
    bindFAQ
    bootstrapWordCloud
    toggle
    hide
 */
'use strict';

(function () {
  attachHamburger();
  renderFAQ();
  bindFAQ();
  bootstrapWordCloud();
  scrollToTop();

  var resizeTimer = void 0;
  var w = window.outerWidth;
  window.addEventListener('resize', function (e) {
    clearTimeout(resizeTimer);

    resizeTimer = setTimeout(function () {
      if (window.outerWidth === w) {
        return;
      }

      w = window.outerWidth;
      var newEvent = new Event('resize-complete');
      newEvent.originalEvent = e;
      window.dispatchEvent(newEvent);
    }, 500);
  });

  /**
       * Attach the hamburger click binders.
       */
  function attachHamburger() {
    document.querySelectorAll('.hamburger')[0].addEventListener('click', function () {
      toggle(document.querySelectorAll('.hamburger-menu'));
    });

    document.querySelectorAll('.hamburger-menu a').forEach(function (element) {
      element.addEventListener('click', function () {
        hide(document.querySelectorAll('.hamburger-menu'));
      });
    });
  }

  /**
     * Attach click binder to make #top scroll ALL THE WAY to the top
     */
  function scrollToTop() {
    document.querySelectorAll('a[href="#top"]').forEach(function (element) {
      element.addEventListener('click', function (event) {
        window.scrollTo(0, 0);
        event.preventDefault();
      });
    });
  }
})();
'use strict'; /*
               *
               *  Web Starter Kit
               *  Copyright 2015 Google Inc. All rights reserved.
               *
               *  Licensed under the Apache License, Version 2.0 (the "License");
               *  you may not use this file except in compliance with the License.
               *  You may obtain a copy of the License at
               *
               *    https://www.apache.org/licenses/LICENSE-2.0
               *
               *  Unless required by applicable law or agreed to in writing, software
               *  distributed under the License is distributed on an "AS IS" BASIS,
               *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
               *  See the License for the specific language governing permissions and
               *  limitations under the License
               *
               */

(function () {
  'use strict';

  // Check to make sure service workers are supported in the current browser,
  // and that the current page is accessed from a secure origin. Using a
  // service worker from an insecure origin will trigger JS console errors. See
  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||
  // [::1] is the IPv6 localhost address.
  window.location.hostname === '[::1]' ||
  // 127.0.0.1/8 is considered localhost for IPv4.
  window.location.hostname.match(
  /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));



  if ('serviceWorker' in navigator && (
  window.location.protocol === 'https:' || isLocalhost)) {
    navigator.serviceWorker.register('service-worker.js').
    then(function (registration) {
      // updatefound is fired if service-worker.js changes.
      registration.onupdatefound = function () {
        // updatefound is also fired the very first time the SW is installed,
        // and there's no need to prompt for a reload at that point.
        // So check here to see if the page is already controlled,
        // i.e. whether there's an existing service worker.
        if (navigator.serviceWorker.controller) {
          // The updatefound event implies that registration.installing is set:
          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event
          var installingWorker = registration.installing;

          installingWorker.onstatechange = function () {
            switch (installingWorker.state) {
              case 'installed':
                // At this point, the old content will have been purged and the
                // fresh content will have been added to the cache.
                // It's the perfect time to display a "New content is
                // available; please refresh." message in the page's interface.
                break;

              case 'redundant':
                throw new Error('The installing ' +
                'service worker became redundant.');

              default:
              // Ignore
            }
          };
        }
      };
    }).catch(function (e) {
      // eslint-disable-next-line no-console
      console.error('Error during service worker registration:', e);
    });
  }

  // Your custom JavaScript goes here
})();