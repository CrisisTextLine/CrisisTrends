{"version":3,"sources":["sections/visualizations.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","Array","isArray","Object","TypeError","messageHandler","e","origin","data","domain","config","visualizations","event_type","adjustHeight","dashboard_height","getDashboardSizeName","viewportWidths","constants","width","window","innerWidth","size","entries","filter","_ref","_ref2","reduce","currentLargest","currentSize","getDashboardUrl","arguments","dashboardId","dashboards","loadDashboard","reload","loaded","document","getElementById","src","reflowDashboard","height","getDefaultVizHeight","viz","style","heights","vizHeights","addEventListener"],"mappings":"AAAA,YAAa,IAAIA,gBAAiB,WAAa,QAASC,GAAcC,EAAKC,GAAI,GAAIC,MAAcC,GAAK,EAASC,GAAK,EAAUC,EAAKC,MAAU,KAAK,IAAK,GAAiCC,GAA7BC,EAAKR,EAAIS,OAAOC,cAAmBP,GAAMI,EAAKC,EAAGG,QAAQC,QAAmBV,EAAKW,KAAKN,EAAGO,QAAWb,GAAKC,EAAKa,SAAWd,GAAzDE,GAAK,IAAgE,MAAOa,GAAMZ,GAAK,EAAKC,EAAKW,EAAM,QAAS,KAAUb,GAAMK,EAAG,WAAWA,EAAG,YAAc,QAAS,GAAIJ,EAAI,KAAMC,IAAK,MAAOH,GAAM,MAAO,UAAUF,EAAKC,GAAI,GAAIgB,MAAMC,QAAQlB,GAAO,MAAOA,EAAW,IAAIS,OAAOC,WAAYS,QAAOnB,GAAO,MAAOD,GAAcC,EAAKC,EAAW,MAAM,IAAImB,WAAU,6DACtkB,WAUE,QAASC,GAAeC,GAAG,GAClBC,GAAgBD,EAAhBC,OAAQC,EAAQF,EAARE,KACTC,EAASC,OAAOC,eAAeF,MAEjCF,KAAWE,GAA8B,qBAApBD,EAAKI,YAI9BC,EAAaL,EAAKM,kBAMpB,QAASC,KACP,GAAMC,GAAiBN,OAAOC,eAAeM,UAAUD,eACjDE,EAAQC,OAAOC,WACfC,EAAOlB,OAAOmB,QAAQN,GAEzBO,OAAO,SAAAC,GAAA,GAAAC,GAAA3C,eAAA0C,EAAA,GAAQH,GAARI,EAAA,GAAAA,EAAA,GAAA,OAAkBP,GAAQG,IACjCK,OAAO,SAACC,EAAgBC,GAAjB,MAGLA,GAAY,GAAKD,EAAe,GAAKC,EAAcD,IAAiB,UAAWT,GAEpF,OAAOG,GAAK,GAQd,QAASQ,KAA+C,GAA/BR,GAA+BS,UAAA/B,OAAA,GAAAT,SAAAwC,UAAA,GAAAA,UAAA,GAAxBf,IACxBN,EAASC,OAAOC,eAAeF,OAC/BsB,EAAcrB,OAAOC,eAAeqB,WAAWX,EAErD,OAAUZ,GAAV,WAA2BsB,EAA3B,cAQF,QAASE,GAAcC,GAChBC,GAAUD,KAAW,IACxBE,SAASC,eAAe,OAAOC,IAAMT,IACrCM,GAAS,GAOb,QAASI,KACPN,GAAc,GACdpB,IAOF,QAASA,KAA6C,GAAhC2B,GAAgCV,UAAA/B,OAAA,GAAAT,SAAAwC,UAAA,GAAAA,UAAA,GAAvBW,IACvBC,EAAMN,SAASC,eAAe,MACpCK,GAAIC,MAAMH,OAAYA,EAAS,GAA/B,KAMF,QAASC,KACP,GAAMG,GAAUlC,OAAOC,eAAeM,UAAU4B,WAC1CxB,EAAON,GAEb,OAAO6B,GAAQvB,GArFjB,GAAIc,IAAS,CAEbhB,QAAO2B,iBAAiB,kBAAmBP,GAC3CpB,OAAO2B,iBAAiB,UAAWzC,GACnC4B","file":"visualizations.js","sourcesContent":["/* global config */\n(function() {\n  let loaded = false;\n\n  window.addEventListener('resize-complete', reflowDashboard);\n  window.addEventListener('message', messageHandler);\n  loadDashboard();\n\n  /**\n   * @param {Event} e Message event object\n   */\n  function messageHandler(e) {\n    const {origin, data} = e;\n    const domain = config.visualizations.domain;\n\n    if (origin !== domain || data.event_type !== 'dashboard_resize') {\n      return;\n    }\n\n    adjustHeight(data.dashboard_height);\n  }\n\n  /**\n   * @return {string} size\n   */\n  function getDashboardSizeName() {\n    const viewportWidths = config.visualizations.constants.viewportWidths;\n    const width = window.innerWidth;\n    const size = Object.entries(viewportWidths)\n      // eslint-disable-next-line no-unused-vars\n      .filter(([name, size]) => width < size)   // Remove viewport sizes smaller than current viewport\n      .reduce((currentLargest, currentSize) =>\n        // If the current size is bigger than the largest size seen so far,\n        // then return that one, otherwise return the existing largest seen so far\n         currentSize[1] > currentLargest[1] ? currentSize : currentLargest, ['desktop', width]); // Start with the smallest size to start width\n\n    return size[0];\n  }\n\n  /**\n   * Gets the dashboard url for a given size\n   * @param {string} size Name of size to get dashboard for\n   * @return {string} dashboardUrl\n   */\n  function getDashboardUrl(size = getDashboardSizeName()) {\n    const domain = config.visualizations.domain;\n    const dashboardId = config.visualizations.dashboards[size];\n\n    return `${domain}/shared/${dashboardId}?embed=true`;\n  }\n\n  /**\n   * Load the dashboard if it hasn't been loaded yet.\n   *\n   * @param {boolean} reload true if we want to force reloading the dashboard\n   */\n  function loadDashboard(reload) {\n    if (!loaded || reload === true) {\n      document.getElementById('viz').src = getDashboardUrl();\n      loaded = true;\n    }\n  }\n\n  /**\n   * Reload the dashboard in response to screen size change.\n   */\n  function reflowDashboard() {\n    loadDashboard(true);\n    adjustHeight();\n  }\n\n  /**\n   * Adjust the height of the data viz.\n   * @param {number} height The height of the iframed document\n   */\n  function adjustHeight(height = getDefaultVizHeight()) {\n    const viz = document.getElementById('viz');\n    viz.style.height = `${height + 15}px`;\n  }\n\n  /**\n   * @return {number} height\n   */\n  function getDefaultVizHeight() {\n    const heights = config.visualizations.constants.vizHeights;\n    const size = getDashboardSizeName();\n\n    return heights[size];\n  }\n})();\n"]}